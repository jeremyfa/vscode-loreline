// Generated by Haxe 4.3.6
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Module = require("module");
var loreline_lsp_Server = function() {
	this.shutdown = false;
	this.initialized = false;
	this.documentDiagnostics = new haxe_ds_StringMap();
	this.documentContents = new haxe_ds_StringMap();
	this.documents = new haxe_ds_StringMap();
	this.RE_ARRAY_ACCESS_BEFORE = new EReg("(\\])((?:\\s*|/\\*(?:[^*]|\\*[^/])*\\*/)*)$","");
	this.RE_ARROW_BEFORE = new EReg("(->)((?:\\s*|/\\*(?:[^*]|\\*[^/])*\\*/)*)$","");
	this.RE_IDENTIFIER_BEFORE = new EReg("([a-zA-Z_][a-zA-Z0-9_]*)((?:\\s*|/\\*(?:[^*]|\\*[^/])*\\*/)*)$","");
};
loreline_lsp_Server.__name__ = "loreline.lsp.Server";
loreline_lsp_Server.prototype = {
	onLog: function(message,pos) {
		console.log(message);
	}
	,onNotification: function(message) {
	}
	,handleMessage: function(msg) {
		try {
			if(Object.prototype.hasOwnProperty.call(msg,"method")) {
				if(Object.prototype.hasOwnProperty.call(msg,"id")) {
					return this.handleRequest(msg);
				} else {
					this.handleNotification(msg);
					return null;
				}
			}
			return this.createErrorResponse(null,-32600,"Invalid message");
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			return this.createErrorResponse(null,-32700,Std.string(e));
		}
	}
	,createErrorResponse: function(id,code,message,data) {
		var response = { jsonrpc : "2.0", id : id, error : { code : code, message : message, data : data}};
		return response;
	}
	,createResponse: function(id,result) {
		var response = { jsonrpc : "2.0", id : id, result : result};
		return response;
	}
	,handleRequest: function(request) {
		try {
			if(!this.initialized && request.method != "initialize") {
				throw haxe_Exception.thrown({ code : -32002, message : "Server not initialized"});
			}
			var result;
			switch(request.method) {
			case "initialize":
				result = this.handleInitialize(request.params);
				break;
			case "shutdown":
				result = this.handleShutdown();
				break;
			case "textDocument/completion":
				result = this.handleCompletion(request.params);
				break;
			case "textDocument/definition":
				result = this.handleDefinition(request.params);
				break;
			case "textDocument/documentSymbol":
				result = this.handleDocumentSymbol(request.params);
				break;
			case "textDocument/formatting":
				result = this.handleDocumentFormatting(request.params);
				break;
			case "textDocument/hover":
				result = this.handleHover(request.params);
				break;
			case "textDocument/references":
				result = null;
				break;
			default:
				throw haxe_Exception.thrown({ code : -32601, message : "Method not found: " + request.method});
			}
			return this.createResponse(request.id,result);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(Object.prototype.hasOwnProperty.call(e,"code") && Object.prototype.hasOwnProperty.call(e,"message")) {
				var err = e;
				return this.createErrorResponse(request.id,err.code,err.message);
			} else {
				return this.createErrorResponse(request.id,-32603,e == null ? "null" : Std.string(e));
			}
		}
	}
	,handleNotification: function(notification) {
		try {
			if(!this.initialized && notification.method != "initialized") {
				return;
			}
			switch(notification.method) {
			case "exit":
				this.handleExit();
				break;
			case "initialized":
				this.initialized = true;
				break;
			case "textDocument/didChange":
				this.handleDidChangeTextDocument(notification.params);
				break;
			case "textDocument/didClose":
				this.handleDidCloseTextDocument(notification.params);
				break;
			case "textDocument/didOpen":
				this.handleDidOpenTextDocument(notification.params);
				break;
			case "textDocument/didSave":
				this.handleDidSaveTextDocument(notification.params);
				break;
			default:
			}
		} catch( _g ) {
		}
	}
	,handleInitialize: function(params) {
		if(this.initialized) {
			throw haxe_Exception.thrown({ code : -32600, message : "Server already initialized"});
		}
		this.clientCapabilities = params.capabilities;
		return { capabilities : { textDocumentSync : { openClose : true, change : 1, save : { includeText : true}}, completionProvider : { resolveProvider : false, triggerCharacters : [".","$","<"," ","\""]}, definitionProvider : true, hoverProvider : true, documentSymbolProvider : true, documentFormattingProvider : true}};
	}
	,handleShutdown: function() {
		if(this.shutdown) {
			throw haxe_Exception.thrown({ code : -32600, message : "Server already shut down"});
		}
		this.shutdown = true;
		return null;
	}
	,handleExit: function() {
		var code = this.shutdown ? 0 : 1;
		process.exit(code);
	}
	,handleDidOpenTextDocument: function(params) {
		var doc = params.textDocument;
		this.updateDocument(loreline_lsp_URI.toString(doc.uri),doc.text,true);
	}
	,handleDidSaveTextDocument: function(params) {
		if(params.text != null) {
			this.updateDocument(loreline_lsp_URI.toString(params.textDocument.uri),params.text,true);
		} else {
			var this1 = this.documentContents;
			var key = loreline_lsp_URI.toString(params.textDocument.uri);
			var content = this1.h[key];
			if(content != null) {
				this.updateDocument(loreline_lsp_URI.toString(params.textDocument.uri),content,true);
			}
		}
	}
	,handleDidChangeTextDocument: function(params) {
		if(params.contentChanges.length > 0) {
			var change = params.contentChanges[params.contentChanges.length - 1];
			this.updateDocument(loreline_lsp_URI.toString(params.textDocument.uri),change.text,false);
		}
	}
	,handleDidCloseTextDocument: function(params) {
		var this1 = this.documents;
		var key = loreline_lsp_URI.toString(params.textDocument.uri);
		var _this = this1;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
		var this1 = this.documentContents;
		var key = loreline_lsp_URI.toString(params.textDocument.uri);
		var _this = this1;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
		var this1 = this.documentDiagnostics;
		var key = loreline_lsp_URI.toString(params.textDocument.uri);
		var _this = this1;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
	}
	,updateDocument: function(uri,content,runDiagnostics) {
		if(runDiagnostics == null) {
			runDiagnostics = true;
		}
		this.documentContents.h[uri] = content;
		if(runDiagnostics) {
			this.documentDiagnostics.h[uri] = [];
			try {
				var lexer = new loreline_Lexer(content);
				var parser = new loreline_Parser(lexer.tokenize());
				var ast = parser.parse();
				this.documents.h[uri] = ast;
				var errors = parser.getErrors();
				if(errors != null && errors.length > 0) {
					var _g = 0;
					while(_g < errors.length) {
						var error = errors[_g];
						++_g;
						this.addDiagnostic(uri,error.pos,error.message,1);
					}
				}
				this.validateDocument(uri,ast);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(((_g1) instanceof loreline_Error)) {
					var e = _g1;
					this.addDiagnostic(uri,e.pos,e.message,1);
				} else {
					var e = _g1;
					this.addDiagnostic(uri,null,Std.string(e),1);
				}
			}
			this.publishDiagnostics(uri);
		} else {
			try {
				var lexer = new loreline_Lexer(content);
				var parser = new loreline_Parser(lexer.tokenize());
				var this1 = this.documents;
				var value = parser.parse();
				this1.h[uri] = value;
			} catch( _g ) {
			}
		}
	}
	,addDiagnostic: function(uri,pos,message,severity) {
		var diagnostics = this.documentDiagnostics.h[uri];
		if(diagnostics == null) {
			return;
		}
		var range = pos != null ? { start : { line : pos.line - 1, character : pos.column - 1}, end : { line : pos.line - 1, character : pos.column - 1 + (pos.length > 0 ? pos.length : 1)}} : { start : { line : 0, character : 0}, end : { line : 0, character : 0}};
		diagnostics.push({ range : range, severity : severity, source : "loreline", message : message});
	}
	,publishDiagnostics: function(uri) {
		var diagnostics = this.documentDiagnostics.h[uri];
		if(diagnostics == null) {
			return;
		}
		var params = { uri : uri, diagnostics : diagnostics};
		var notification = { jsonrpc : "2.0", method : "textDocument/publishDiagnostics", params : params};
		this.onNotification(notification);
	}
	,validateDocument: function(uri,ast) {
	}
	,handleCompletion: function(params) {
		var uri = params.textDocument.uri;
		var this1 = this.documents;
		var key = loreline_lsp_URI.toString(uri);
		var ast = this1.h[key];
		if(ast == null) {
			return [];
		}
		var this1 = this.documentContents;
		var key = loreline_lsp_URI.toString(uri);
		var content = this1.h[key];
		if(content == null) {
			return [];
		}
		var lorelinePos = this.toLorelinePosition(params.position,content);
		var lens = new loreline_Lens(ast);
		var node = lens.getNodeAtPosition(lorelinePos);
		var beforeNode = lens.getClosestNodeAtOrBeforePosition(lorelinePos);
		if(node == null) {
			node = beforeNode;
		} else {
			switch(js_Boot.getClass(node)) {
			case loreline_NAccess:case loreline_NArrayAccess:case loreline_NCharacterDecl:case loreline_NLiteral:case loreline_NObjectField:case loreline_NStateDecl:case loreline_NStringLiteral:case loreline_NStringPart:
				break;
			default:
				node = beforeNode;
			}
		}
		if(node == null) {
			return [];
		}
		var inString;
		switch(js_Boot.getClass(node)) {
		case loreline_NStringLiteral:case loreline_NStringPart:
			inString = true;
			break;
		default:
			inString = false;
		}
		var tmp = params.context;
		var triggerCharacter = tmp != null ? tmp.triggerCharacter : null;
		var tmp;
		if(triggerCharacter == null) {
			var tmp1 = params.context;
			tmp = (tmp1 != null ? tmp1.triggerKind : null) == 1;
		} else {
			tmp = false;
		}
		if(tmp && lorelinePos.offset > 0) {
			var charBefore = content.charAt(lorelinePos.offset - 1);
			switch(charBefore) {
			case "\"":case ".":case "<":
				triggerCharacter = charBefore;
				break;
			default:
			}
		}
		if(params.context != null && triggerCharacter != null) {
			if(triggerCharacter == null) {
				return [];
			} else {
				switch(triggerCharacter) {
				case " ":
					var prevText = HxOverrides.substr(content,0,lorelinePos.offset);
					var isTransition = this.RE_ARROW_BEFORE.match(prevText);
					if(isTransition) {
						var matchedLen = this.RE_ARROW_BEFORE.matched(0).length;
						var trimmedLen = StringTools.rtrim(this.RE_ARROW_BEFORE.matched(0)).length;
						var spaces = matchedLen != trimmedLen ? HxOverrides.substr(this.RE_ARROW_BEFORE.matched(0),trimmedLen,matchedLen - trimmedLen) : "";
						return this.getBeatCompletions(lens,node,spaces.length > 0 ? "" : " ");
					}
					return [];
				case "\"":
					return [];
				case "$":
					return this.getVariableCompletions(lens,node);
				case ".":
					var prevText = HxOverrides.substr(content,0,lorelinePos.offset);
					var dotIdx = prevText.lastIndexOf(".");
					if(dotIdx < 0) {
						return [];
					}
					prevText = HxOverrides.substr(prevText,0,dotIdx);
					var resolved = null;
					if(this.RE_IDENTIFIER_BEFORE.match(prevText)) {
						var beforeNode = lens.getNodeAtPosition(lorelinePos.withOffset(content,-this.RE_IDENTIFIER_BEFORE.matched(0).length - 1));
						if(beforeNode == null || !((beforeNode) instanceof loreline_NAccess)) {
							return [];
						}
						var access = beforeNode;
						resolved = lens.resolveAccess(access);
					} else if(this.RE_ARRAY_ACCESS_BEFORE.match(prevText)) {
						var beforeNode = lens.getNodeAtPosition(lorelinePos.withOffset(content,-this.RE_ARRAY_ACCESS_BEFORE.matched(0).length - 1));
						if(beforeNode == null || !((beforeNode) instanceof loreline_NArrayAccess)) {
							return [];
						}
						var access = beforeNode;
						resolved = lens.resolveArrayAccess(access);
					}
					if(resolved == null) {
						return [];
					}
					if(((resolved) instanceof loreline_NObjectField)) {
						resolved = resolved.value;
					}
					switch(js_Boot.getClass(resolved)) {
					case loreline_NCharacterDecl:
						var character = resolved;
						var items = [];
						var _g = 0;
						var _g1 = character.fields;
						while(_g < _g1.length) {
							var field = _g1[_g];
							++_g;
							items.push({ label : field.name, kind : 10, detail : "Character property", insertText : field.name, insertTextMode : 1, insertTextFormat : 1});
						}
						return items;
					case loreline_NLiteral:
						var literal = resolved;
						var _g = literal.type;
						switch(_g._hx_index) {
						case 0:
							break;
						case 1:
							break;
						case 2:
							break;
						case 3:
							break;
						case 4:
							var _g1 = _g.style;
							var fields = literal.value;
							var items = [];
							var _g = 0;
							while(_g < fields.length) {
								var field = fields[_g];
								++_g;
								items.push({ label : field.name, kind : 5, detail : "Object field", insertText : field.name, insertTextMode : 1, insertTextFormat : 1});
							}
							return items;
						}
						break;
					}
					return [];
				case "<":
					return this.getTagCompletions(lens);
				default:
					return [];
				}
			}
		}
		if(params.context != null && params.context.triggerKind == 1) {
			var prevText = HxOverrides.substr(content,0,lorelinePos.offset);
			var isTransition = this.RE_ARROW_BEFORE.match(prevText);
			if(isTransition) {
				var matchedLen = this.RE_ARROW_BEFORE.matched(0).length;
				var trimmedLen = StringTools.rtrim(this.RE_ARROW_BEFORE.matched(0)).length;
				var spaces = matchedLen != trimmedLen ? HxOverrides.substr(this.RE_ARROW_BEFORE.matched(0),trimmedLen,matchedLen - trimmedLen) : "";
				return this.getBeatCompletions(lens,node,spaces.length > 0 ? "" : " ");
			}
			var items = [];
			var _g = 0;
			var _g1 = lens.getVisibleCharacters();
			while(_g < _g1.length) {
				var character = _g1[_g];
				++_g;
				items.push({ label : character.name, kind : 22, detail : "Character", insertText : character.name, insertTextMode : 1, insertTextFormat : 1});
			}
			var _g = 0;
			var _g1 = lens.getVisibleStateFields(node);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				items.push({ label : field.name, kind : 6, detail : "State field", insertText : field.name, insertTextMode : 1, insertTextFormat : 1});
			}
			var _g = 0;
			var _g1 = lens.getVisibleBeats(node);
			while(_g < _g1.length) {
				var beat = _g1[_g];
				++_g;
				items.push({ label : beat.name, kind : 7, detail : "Beat", insertText : beat.name, insertTextMode : 1, insertTextFormat : 1});
			}
			return items;
		}
		return [];
	}
	,getVariableCompletions: function(lens,node) {
		var items = [];
		var _g = 0;
		var _g1 = lens.getVisibleStateFields(node);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			items.push({ label : field.name, kind : 6, detail : "State field"});
		}
		var _g = 0;
		var _g1 = lens.getVisibleCharacters();
		while(_g < _g1.length) {
			var character = _g1[_g];
			++_g;
			items.push({ label : character.name, kind : 7, detail : "Character"});
		}
		return items;
	}
	,getBeatCompletions: function(lens,node,insert) {
		var items = [];
		var _g = 0;
		var _g1 = lens.getVisibleBeats(node);
		while(_g < _g1.length) {
			var beat = _g1[_g];
			++_g;
			var tmp = insert;
			items.push({ label : beat.name, kind : 7, detail : "Beat", insertText : (tmp != null ? tmp : "") + beat.name, insertTextMode : 1, insertTextFormat : 1});
		}
		return items;
	}
	,getTagCompletions: function(lens) {
		var items = [];
		var _g = 0;
		var _g1 = lens.getAllTags();
		while(_g < _g1.length) {
			var tag = _g1[_g];
			++_g;
			items.push({ label : tag, kind : 13, detail : "Tag"});
		}
		return items;
	}
	,handleDefinition: function(params) {
		var result = [];
		var uri = params.textDocument.uri;
		var this1 = this.documents;
		var key = loreline_lsp_URI.toString(uri);
		var ast = this1.h[key];
		if(ast == null) {
			return result;
		}
		var this1 = this.documentContents;
		var key = loreline_lsp_URI.toString(uri);
		var content = this1.h[key];
		var lorelinePos = this.toLorelinePosition(params.position,content);
		var lens = new loreline_Lens(ast);
		var node = lens.getNodeAtPosition(lorelinePos);
		if(((node) instanceof loreline_NLiteral)) {
			var parent = node;
			_hx_loop1: do {
				parent = lens.getParentNode(parent);
				if(parent != null) {
					switch(js_Boot.getClass(parent)) {
					case loreline_NAccess:case loreline_NArrayAccess:
						node = parent;
						break _hx_loop1;
					default:
					}
				}
			} while(parent != null);
		}
		if(node != null) {
			switch(js_Boot.getClass(node)) {
			case loreline_NAccess:
				var access = node;
				var resolved = lens.resolveAccess(access);
				if(resolved != null) {
					var peekNode;
					if(js_Boot.getClass(resolved) == loreline_NObjectField) {
						var tmp = lens.getFirstParentOfType(resolved,loreline_NCharacterDecl);
						var tmp1 = tmp != null ? tmp : lens.getFirstParentOfType(resolved,loreline_NStateDecl);
						peekNode = tmp1 != null ? tmp1 : resolved;
					} else {
						peekNode = resolved;
					}
					result.push({ targetUri : uri, targetRange : this.rangeFromLorelinePosition(peekNode.pos,content), targetSelectionRange : this.rangeFromLorelinePosition(resolved.pos,content), originSelectionRange : this.rangeFromLorelinePosition(access.pos,content)});
				}
				break;
			case loreline_NArrayAccess:
				var access = node;
				var resolved = lens.resolveArrayAccess(access);
				if(resolved != null) {
					var peekNode;
					if(js_Boot.getClass(resolved) == loreline_NObjectField) {
						var tmp = lens.getFirstParentOfType(resolved,loreline_NCharacterDecl);
						var tmp1 = tmp != null ? tmp : lens.getFirstParentOfType(resolved,loreline_NStateDecl);
						peekNode = tmp1 != null ? tmp1 : resolved;
					} else {
						peekNode = resolved;
					}
					result.push({ targetUri : uri, targetRange : this.rangeFromLorelinePosition(peekNode.pos,content), targetSelectionRange : this.rangeFromLorelinePosition(resolved.pos,content), originSelectionRange : this.rangeFromLorelinePosition(access.pos,content)});
				}
				break;
			case loreline_NDialogueStatement:
				var dialogue = node;
				var characterDecl = lens.findCharacterFromDialogue(dialogue);
				if(characterDecl != null) {
					result.push({ targetUri : uri, targetRange : this.rangeFromLorelinePosition(characterDecl.pos,content), targetSelectionRange : this.firstLineRange(this.rangeFromLorelinePosition(characterDecl.pos,content),content), originSelectionRange : this.rangeFromLorelinePosition(dialogue.characterPos,content)});
				}
				break;
			case loreline_NTransition:
				var transition = node;
				var beatDecl = lens.findBeatFromTransition(transition);
				if(beatDecl != null) {
					result.push({ targetUri : uri, targetRange : this.rangeFromLorelinePosition(beatDecl.pos,content), targetSelectionRange : this.firstLineRange(this.rangeFromLorelinePosition(beatDecl.pos,content),content), originSelectionRange : this.rangeFromLorelinePosition(transition.targetPos,content)});
				}
				break;
			}
		}
		return result;
	}
	,makeHover: function(title,description,content,node,pos) {
		var value = [];
		if(title != null) {
			value.push(title);
		}
		if(description != null && description.length > 0) {
			if(title != null) {
				value.push("");
				value.push("---");
				value.push("");
			}
			value.push(description.join("\n"));
		}
		var tmp = pos;
		return { contents : { kind : "markdown", value : value.join("\n")}, range : this.rangeFromLorelinePosition(tmp != null ? tmp : node.pos,content)};
	}
	,handleHover: function(params) {
		var uri = params.textDocument.uri;
		var this1 = this.documents;
		var key = loreline_lsp_URI.toString(uri);
		var ast = this1.h[key];
		if(ast == null) {
			return null;
		}
		var this1 = this.documentContents;
		var key = loreline_lsp_URI.toString(uri);
		var content = this1.h[key];
		var lorelinePos = this.toLorelinePosition(params.position,content);
		var lens = new loreline_Lens(ast);
		var node = lens.getNodeAtPosition(lorelinePos);
		if(node != null) {
			return this.makeNodeHover(lens,loreline_lsp_URI.toString(uri),content,node);
		}
		return null;
	}
	,makeNodeHover: function(lens,uri,content,node) {
		this.onLog(JSON.stringify(node.pos.toJson()),{ fileName : "loreline/lsp/Server.hx", lineNumber : 912, className : "loreline.lsp.Server", methodName : "makeNodeHover"});
		switch(js_Boot.getClass(node)) {
		case loreline_NAccess:
			var access = node;
			var parent = lens.getParentNode(access);
			if(((parent) instanceof loreline_NCall)) {
				var resolved = lens.resolveAccess(access);
				if(((resolved) instanceof loreline_NBeatDecl)) {
					return this.makeBeatDeclHover(resolved,uri,content,lens,access);
				}
			}
			return this.makeAccessHover(access,content,lens);
		case loreline_NArrayAccess:
			var access = node;
			var parent = lens.getParentNode(access);
			return this.makeArrayAccessHover(access,content,lens);
		case loreline_NBeatDecl:
			return this.makeBeatDeclHover(node,uri,content,lens);
		case loreline_NAssign:case loreline_NBinary:case loreline_NExpr:case loreline_NUnary:
			return this.makeHover(this.hoverTitle("Expression"),this.hoverDescriptionForNode(node),content,node);
		case loreline_NCharacterDecl:
			return this.makeCharacterDeclHover(node,content);
		case loreline_NChoiceStatement:
			return this.makeChoiceHover(node,content);
		case loreline_NDialogueStatement:
			return this.makeDialogueStatementHover(node,content);
		case loreline_NIfStatement:
			return this.makeHover("**Condition**",null,content,node);
		case loreline_NLiteral:
			var literal = node;
			var _g = literal.type;
			switch(_g._hx_index) {
			case 0:
				return this.makeHover(this.hoverTitle("Number"),this.hoverDescriptionForNode(literal),content,literal);
			case 1:
				return this.makeHover(this.hoverTitle("Boolean"),this.hoverDescriptionForNode(literal),content,literal);
			case 2:
				return this.makeHover(this.hoverTitle("Null"),this.hoverDescriptionForNode(literal),content,literal);
			case 3:
				return this.makeHover(this.hoverTitle("Array"),this.hoverDescriptionForNode(literal),content,literal);
			case 4:
				var style = _g.style;
				return this.makeHover(this.hoverTitle("Object"),this.hoverDescriptionForNode(literal),content,literal);
			}
			break;
		case loreline_NObjectField:
			return this.makeObjectFieldHover(node,content);
		case loreline_NStateDecl:
			return this.makeStateDeclHover(node,content);
		case loreline_NStringPart:
			var parent = node;
			do parent = lens.getParentNode(parent); while(parent != null);
			var stringPart = node;
			var _g = stringPart.type;
			switch(_g._hx_index) {
			case 0:
				var text = _g.text;
				break;
			case 1:
				var expr = _g.expr;
				return this.makeNodeHover(lens,uri,content,expr);
			case 2:
				var closing = _g.closing;
				var expr = _g.expr;
				return this.makeHover(this.hoverTitle("Tag","&lt;" + this.printLoreline(expr) + "&gt;"),this.hoverDescriptionForNode(expr),content,stringPart);
			}
			var literal = lens.getFirstParentOfType(node,loreline_NStringLiteral);
			if(literal != null) {
				var literalParent = lens.getParentNode(literal);
				if(literalParent != null && ((literalParent) instanceof loreline_NStringPart)) {
					var parentStringPart = literalParent;
					var _g = parentStringPart.type;
					switch(_g._hx_index) {
					case 0:
						var text = _g.text;
						break;
					case 1:
						var expr = _g.expr;
						return this.makeNodeHover(lens,uri,content,expr);
					case 2:
						var closing = _g.closing;
						var expr = _g.expr;
						return this.makeHover(this.hoverTitle("Tag","&lt;" + this.printLoreline(expr) + "&gt;"),this.hoverDescriptionForNode(expr),content,parentStringPart);
					}
				}
				var partIndex = literal.parts.indexOf(stringPart);
				if(literal.quotes == 0) {
					if(partIndex > 0) {
						var keepWhitespace = true;
						var _g = 0;
						var _g1 = partIndex;
						_hx_loop2: while(_g < _g1) {
							var i = _g++;
							var _g2 = literal.parts[i].type;
							switch(_g2._hx_index) {
							case 0:
								var text = _g2.text;
								if(StringTools.trim(text).length > 0) {
									keepWhitespace = false;
									break _hx_loop2;
								}
								break;
							case 1:
								var expr = _g2.expr;
								keepWhitespace = false;
								break _hx_loop2;
							case 2:
								var closing = _g2.closing;
								var expr1 = _g2.expr;
								break;
							}
						}
						if(keepWhitespace) {
							var _g = literal.parts[partIndex].type;
							if(_g._hx_index == 0) {
								var text = _g.text;
								var spaces = text.length - StringTools.ltrim(text).length;
								if(spaces > 0) {
									return this.makeHover(this.hoverTitle("Text"),this.hoverDescriptionForNode(literal.parts[partIndex]),content,stringPart,stringPart.pos.withOffset(content,spaces,stringPart.pos.length - spaces));
								}
							}
						}
					}
				} else if(literal.quotes == 1) {
					if(literal.parts.length == 1) {
						var _g = literal.parts[0].type;
						switch(_g._hx_index) {
						case 0:
							var text = _g.text;
							return this.makeHover(this.hoverTitle("Text"),this.hoverDescriptionForNode(literal.parts[0]),content,stringPart,stringPart.pos.withOffset(content,-1,stringPart.pos.length + 2));
						case 1:
							var expr = _g.expr;
							break;
						case 2:
							var closing = _g.closing;
							var expr = _g.expr;
							break;
						}
					} else if(partIndex == 0) {
						var _g = literal.parts[0].type;
						switch(_g._hx_index) {
						case 0:
							var text = _g.text;
							return this.makeHover(this.hoverTitle("Text"),this.hoverDescriptionForNode(literal.parts[0]),content,stringPart,stringPart.pos.withOffset(content,-1,stringPart.pos.length + 1));
						case 1:
							var expr = _g.expr;
							break;
						case 2:
							var closing = _g.closing;
							var expr = _g.expr;
							break;
						}
					} else if(partIndex == literal.parts.length - 1) {
						var _g = literal.parts[literal.parts.length - 1].type;
						switch(_g._hx_index) {
						case 0:
							var text = _g.text;
							return this.makeHover(this.hoverTitle("Text"),this.hoverDescriptionForNode(literal.parts[literal.parts.length - 1]),content,stringPart,stringPart.pos.withOffset(content,0,stringPart.pos.length + 1));
						case 1:
							var expr = _g.expr;
							break;
						case 2:
							var closing = _g.closing;
							var expr = _g.expr;
							break;
						}
					}
				}
			}
			var _g = stringPart.type;
			switch(_g._hx_index) {
			case 0:
				var text = _g.text;
				return this.makeHover(this.hoverTitle("Text"),this.hoverDescriptionForNode(stringPart),content,stringPart);
			case 1:
				var expr = _g.expr;
				break;
			case 2:
				var closing = _g.closing;
				var expr = _g.expr;
				break;
			}
			break;
		case loreline_NStringLiteral:case loreline_NTextStatement:
			return this.makeHover(this.hoverTitle("Text"),this.hoverDescriptionForNode(node),content,node);
		case loreline_NTransition:
			var beat = lens.findBeatFromTransition(node);
			if(beat != null) {
				return this.makeBeatDeclHover(beat,uri,content,lens,node);
			} else {
				return this.makeHover(this.hoverTitle("Transition"),this.hoverDescriptionForNode(node),content,node);
			}
			break;
		default:
		}
		return null;
	}
	,hoverTitle: function(kind,name,origin) {
		var title = kind;
		if(name != null) {
			title += ": **" + name + "**";
		} else {
			title = "**" + title + "**";
		}
		if(origin != null) {
			title += " (" + origin + ")";
		}
		return title;
	}
	,hoverDescriptionForNode: function(node) {
		var description = [];
		if(node.leadingComments != null) {
			var _g = 0;
			var _g1 = node.leadingComments;
			while(_g < _g1.length) {
				var comment = _g1[_g];
				++_g;
				description.push("_" + StringTools.replace(StringTools.trim(comment.content),"_","\\_") + "_");
			}
		}
		if(node.trailingComments != null) {
			if(description.length > 0) {
				description.push("");
				description.push("---");
				description.push("");
			}
			var _g = 0;
			var _g1 = node.trailingComments;
			while(_g < _g1.length) {
				var comment = _g1[_g];
				++_g;
				description.push("_" + StringTools.replace(StringTools.trim(comment.content),"_","\\_") + "_");
			}
		}
		return description;
	}
	,makePositionLink: function(text,uri,node,extra) {
		return "[" + text + "](" + uri + "#" + node.pos.line + "," + node.pos.column + ")" + (extra != null ? " (" + extra + ")" : "");
	}
	,makeBeatDeclHover: function(beatDecl,uri,content,lens,origin) {
		var description = [];
		var comments = this.hoverDescriptionForNode(beatDecl);
		if(comments.length > 0) {
			var _g = 0;
			while(_g < comments.length) {
				var comment = comments[_g];
				++_g;
				description.push(comment);
			}
			description.push("");
			description.push("---");
			description.push("");
		}
		var characters = lens.findBeatCharacters(beatDecl);
		if(characters.length > 0) {
			var dialogs_h = Object.create(null);
			var accessed_h = Object.create(null);
			var dialogTargets = [];
			var otherTargets = [];
			var _g = 0;
			while(_g < characters.length) {
				var ref = characters[_g];
				++_g;
				if(js_Boot.getClass(ref.origin) == loreline_NDialogueStatement && !Object.prototype.hasOwnProperty.call(dialogs_h,ref.target.name)) {
					if(!Object.prototype.hasOwnProperty.call(dialogs_h,ref.target.name)) {
						dialogs_h[ref.target.name] = true;
						dialogTargets.push(this.makePositionLink("**" + this.characterName(ref.target) + "**",uri,ref.target));
					}
				}
				if(js_Boot.getClass(ref.origin) == loreline_NAccess && !Object.prototype.hasOwnProperty.call(accessed_h,ref.target.name)) {
					if(!Object.prototype.hasOwnProperty.call(dialogs_h,ref.target.name) && !Object.prototype.hasOwnProperty.call(accessed_h,ref.target.name)) {
						accessed_h[ref.target.name] = true;
						otherTargets.push(this.makePositionLink("" + this.characterName(ref.target) + "",uri,ref.target));
					}
				}
			}
			var targets = dialogTargets.concat(otherTargets);
			if(targets.length > 0) {
				description.push("- Characters: " + targets.join(", "));
			}
			description.push("");
			description.push("---");
			description.push("");
		}
		var readFields = lens.findReadStateFields(beatDecl);
		var modifiedFields = lens.findModifiedStateFields(beatDecl);
		var characterReadFields = lens.findReadCharacterFields(beatDecl);
		var characterModifiedFields = lens.findModifiedCharacterFields(beatDecl);
		if(readFields.length > 0 || modifiedFields.length > 0 || characterReadFields.length > 0 || characterModifiedFields.length > 0) {
			var stateTargets = [];
			var usedStateTargets_h = { };
			if(modifiedFields.length > 0) {
				var _g = 0;
				while(_g < modifiedFields.length) {
					var ref = modifiedFields[_g];
					++_g;
					if(!usedStateTargets_h.hasOwnProperty(ref.target.id)) {
						usedStateTargets_h[ref.target.id] = true;
						stateTargets.push("**" + this.makePositionLink(ref.target.name,uri,ref.target) + "**");
					}
				}
			}
			if(readFields.length > 0) {
				var _g = 0;
				while(_g < readFields.length) {
					var ref = readFields[_g];
					++_g;
					if(!usedStateTargets_h.hasOwnProperty(ref.target.id)) {
						usedStateTargets_h[ref.target.id] = true;
						stateTargets.push(this.makePositionLink(ref.target.name,uri,ref.target));
					}
				}
			}
			if(stateTargets.length > 0) {
				description.push("- State: " + stateTargets.join(", "));
			}
			var characters = [];
			var usedCharacters_h = { };
			if(characterModifiedFields.length > 0) {
				var _g = 0;
				while(_g < characterModifiedFields.length) {
					var ref = characterModifiedFields[_g];
					++_g;
					var refCharacter = lens.getFirstParentOfType(ref.target,loreline_NCharacterDecl);
					if(!usedCharacters_h.hasOwnProperty(refCharacter.id)) {
						usedCharacters_h[refCharacter.id] = true;
						characters.push(refCharacter);
					}
				}
			}
			if(characterReadFields.length > 0) {
				var _g = 0;
				while(_g < characterReadFields.length) {
					var ref = characterReadFields[_g];
					++_g;
					var refCharacter = lens.getFirstParentOfType(ref.target,loreline_NCharacterDecl);
					if(!usedCharacters_h.hasOwnProperty(refCharacter.id)) {
						usedCharacters_h[refCharacter.id] = true;
						characters.push(refCharacter);
					}
				}
			}
			var _g = 0;
			while(_g < characters.length) {
				var character = characters[_g];
				++_g;
				var characterTargets = [];
				var usedCharacterTargets_h = { };
				if(characterModifiedFields.length > 0) {
					var _g1 = 0;
					while(_g1 < characterModifiedFields.length) {
						var ref = characterModifiedFields[_g1];
						++_g1;
						var refCharacter = lens.getFirstParentOfType(ref.target,loreline_NCharacterDecl);
						if(refCharacter.id == character.id) {
							usedCharacterTargets_h[ref.target.id] = true;
							characterTargets.push("**" + this.makePositionLink(ref.target.name,uri,ref.target) + "**");
						}
					}
				}
				if(characterReadFields.length > 0) {
					var _g2 = 0;
					while(_g2 < characterReadFields.length) {
						var ref1 = characterReadFields[_g2];
						++_g2;
						if(!usedCharacterTargets_h.hasOwnProperty(ref1.target.id)) {
							var refCharacter1 = lens.getFirstParentOfType(ref1.target,loreline_NCharacterDecl);
							if(refCharacter1.id == character.id) {
								usedCharacterTargets_h[ref1.target.id] = true;
								characterTargets.push(this.makePositionLink(ref1.target.name,uri,ref1.target));
							}
						}
					}
				}
				description.push("- " + this.characterName(character) + ": " + characterTargets.join(", "));
			}
			description.push("");
			description.push("---");
			description.push("");
		}
		var incomingBeats = lens.findReferencesToBeat(beatDecl);
		var outgoingBeats = lens.findOutboundBeats(beatDecl);
		if(incomingBeats.length > 0 || outgoingBeats.length > 0) {
			if(incomingBeats.length > 0) {
				var targets = [];
				var _g = 0;
				while(_g < incomingBeats.length) {
					var ref = incomingBeats[_g];
					++_g;
					var incoming = lens.getFirstParentOfType(ref.origin,loreline_NBeatDecl);
					if(incoming != null) {
						targets.push(this.makePositionLink(incoming.name,uri,incoming));
					}
				}
				description.push("- From: " + targets.join(", "));
			}
			if(outgoingBeats.length > 0) {
				var callTargets = [];
				var transitionTargets = [];
				var _g = 0;
				while(_g < outgoingBeats.length) {
					var ref = outgoingBeats[_g];
					++_g;
					if(((ref.origin) instanceof loreline_NTransition)) {
						transitionTargets.push(this.makePositionLink(ref.target.name,uri,ref.target));
					} else {
						callTargets.push(this.makePositionLink(ref.target.name,uri,ref.target));
					}
				}
				if(transitionTargets.length > 0) {
					description.push("- To: " + transitionTargets.join(", "));
				}
				if(callTargets.length > 0) {
					description.push("- Calling: " + callTargets.join(", "));
				}
			}
			description.push("");
			description.push("---");
			description.push("");
		}
		while(description[description.length - 1] == "" || description[description.length - 1] == "---") description.pop();
		var tmp = origin;
		return this.makeHover(this.hoverTitle("Beat",beatDecl.name),description,content,tmp != null ? tmp : beatDecl);
	}
	,makeStateDeclHover: function(stateDecl,content) {
		return this.makeHover(this.hoverTitle("State"),this.hoverDescriptionForNode(stateDecl),content,stateDecl);
	}
	,makeCharacterDeclHover: function(characterDecl,content,pos) {
		return this.makeHover(this.hoverTitle("Character",this.characterName(characterDecl)),this.hoverDescriptionForNode(characterDecl),content,characterDecl,pos);
	}
	,makeChoiceHover: function(choice,content) {
		return this.makeHover(this.hoverTitle("Choice"),this.hoverDescriptionForNode(choice),content,choice);
	}
	,makeExprHover: function(expr,content) {
		return this.makeHover(this.printLoreline(expr),this.hoverDescriptionForNode(expr),content,expr);
	}
	,makeObjectFieldHover: function(field,content) {
		return this.makeHover(this.hoverTitle("Field",field.name),this.hoverDescriptionForNode(field),content,field);
	}
	,makeAccessHover: function(access,content,lens) {
		var resolved = lens.resolveAccess(access);
		if(resolved != null) {
			if(((resolved) instanceof loreline_NCharacterDecl)) {
				return this.makeCharacterDeclHover(resolved,content,access.pos);
			}
			var parentCharacter = lens.getFirstParentOfType(resolved,loreline_NCharacterDecl);
			var parentState = lens.getFirstParentOfType(resolved,loreline_NStateDecl);
			var key = "Field";
			if(parentCharacter != null) {
				key = this.characterName(parentCharacter);
				key = "Character field (" + key + ")";
			} else if(parentState != null) {
				key = "State field";
			}
			return this.makeHover(this.hoverTitle(key,access.name),this.hoverDescriptionForNode(access),content,access);
		} else {
			var parent = lens.getParentNode(access);
			if(((parent) instanceof loreline_NCall)) {
				return this.makeHover(this.hoverTitle("Function call",access.name + "()"),this.hoverDescriptionForNode(access),content,access);
			} else if(((parent) instanceof loreline_NArrayAccess)) {
				return this.makeHover(this.hoverTitle("Array access",access.name + "[]"),this.hoverDescriptionForNode(access),content,access);
			} else {
				return this.makeHover(this.hoverTitle("Access",access.name),this.hoverDescriptionForNode(access),content,access);
			}
		}
	}
	,makeArrayAccessHover: function(access,content,lens) {
		return this.makeHover(this.hoverTitle("Array access",this.printLoreline(access.target) + "[]"),this.hoverDescriptionForNode(access),content,access);
	}
	,makeDialogueStatementHover: function(expr,content) {
		return this.makeHover(this.hoverTitle("Dialogue"),this.hoverDescriptionForNode(expr),content,expr);
	}
	,printLoreline: function(node) {
		var printer = new loreline_Printer();
		printer.enableComments = false;
		return StringTools.trim(printer.print(node));
	}
	,characterName: function(character) {
		var nameExpr = character.get("name");
		if(nameExpr != null) {
			return this.printLoreline(nameExpr);
		} else {
			return character.name;
		}
	}
	,handleDocumentSymbol: function(params) {
		var this1 = this.documents;
		var key = loreline_lsp_URI.toString(params.textDocument.uri);
		var ast = this1.h[key];
		if(ast == null) {
			return [];
		}
		var this1 = this.documentContents;
		var key = loreline_lsp_URI.toString(params.textDocument.uri);
		var content = this1.h[key];
		if(content == null) {
			return [];
		}
		var printer = new loreline_lsp_SymbolPrinter(content);
		return printer.print(ast);
	}
	,handleDocumentFormatting: function(params) {
		var this1 = this.documents;
		var key = loreline_lsp_URI.toString(params.textDocument.uri);
		var ast = this1.h[key];
		if(ast == null) {
			return [];
		}
		return [];
	}
	,toLorelinePosition: function(protocolPos,content,length) {
		if(length == null) {
			length = 0;
		}
		var line = protocolPos.line + 1;
		var column = protocolPos.character + 1;
		var offset = this.computeLorelineOffset(line,column,content);
		return new loreline_Position(line,column,offset,length);
	}
	,computeLorelineOffset: function(line,column,content) {
		var offset = 0;
		if(content != null) {
			var currentLine = 1;
			var currentCol = 1;
			var i = 0;
			while(i < content.length) {
				if(currentLine == line && currentCol == column) {
					offset = i;
					break;
				}
				if(HxOverrides.cca(content,i) == 10) {
					++currentLine;
					currentCol = 1;
				} else {
					++currentCol;
				}
				++i;
			}
			if(currentLine == line && currentCol == column) {
				offset = i;
			}
		}
		return offset;
	}
	,fromLorelinePosition: function(lorelinePos) {
		return { line : lorelinePos.line - 1, character : lorelinePos.column - 1};
	}
	,rangeFromLorelinePosition: function(lorelinePos,content) {
		var start = this.fromLorelinePosition(lorelinePos);
		var end = this.fromLorelinePosition(lorelinePos.withOffset(content,lorelinePos.length));
		return { start : start, end : end};
	}
	,firstLineRange: function(range,content) {
		var lineStart = range.start.line;
		var lines = content.split("\n");
		while(lineStart < lines.length && StringTools.trim(lines[lineStart]).length == 0) ++lineStart;
		var lineEnd = lineStart;
		var charEnd = lines[lineEnd].length;
		return { start : { line : lineStart, character : range.start.character}, end : { line : lineEnd, character : charEnd}};
	}
	,__class__: loreline_lsp_Server
};
var LorelineServer = function() { };
LorelineServer.__name__ = "LorelineServer";
LorelineServer.main = function() {
	haxe_Log.trace("INITIALIZE LORELINE SERVER",{ fileName : "src/LorelineServer.hx", lineNumber : 47, className : "LorelineServer", methodName : "main"});
	try {
		var $require = Module.createRequire(__filename);
		var connection = $require("vscode-languageserver/node").createConnection();
		LorelineServer.logger = connection.console;
		LorelineServer.logger.info("Loreline Language Server starting...");
		LorelineServer.server.onLog = function(message,pos) {
			LorelineServer.logger.log(message);
		};
		haxe_Log.trace = ($_=LorelineServer.server,$bind($_,$_.onLog));
		LorelineServer.server.onNotification = function(message) {
			if(message.method == "textDocument/publishDiagnostics") {
				connection.sendDiagnostics(message.params);
			}
		};
		connection.onInitialize(function(params) {
			try {
				LorelineServer.logger.info("Initializing with params: " + JSON.stringify(params));
				var response = LorelineServer.server.handleMessage(LorelineServer.makeRequest("initialize",params));
				return response.result;
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onInitialize: " + Std.string(e));
				throw haxe_Exception.thrown(e);
			}
		});
		connection.onInitialized(function(params) {
			try {
				LorelineServer.logger.info("Server initialized");
				LorelineServer.server.handleMessage(LorelineServer.makeNotification("initialized",params));
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onInitialized: " + Std.string(e));
			}
		});
		connection.onDidOpenTextDocument(function(params) {
			try {
				LorelineServer.logger.info("Document opened: " + params.textDocument.uri);
				LorelineServer.server.handleMessage(LorelineServer.makeNotification("textDocument/didOpen",params));
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onDidOpenTextDocument: " + Std.string(e));
			}
		});
		connection.onDidChangeTextDocument(function(params) {
			try {
				LorelineServer.logger.info("Document changed: " + params.textDocument.uri);
				LorelineServer.server.handleMessage(LorelineServer.makeNotification("textDocument/didChange",params));
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onDidChangeTextDocument: " + Std.string(e));
			}
		});
		connection.onDidSaveTextDocument(function(params) {
			try {
				LorelineServer.logger.info("Document saved: " + params.textDocument.uri);
				LorelineServer.server.handleMessage(LorelineServer.makeNotification("textDocument/didSave",params));
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onDidSaveTextDocument: " + Std.string(e));
			}
		});
		connection.onDidCloseTextDocument(function(params) {
			try {
				LorelineServer.logger.info("Document closed: " + params.textDocument.uri);
				LorelineServer.server.handleMessage(LorelineServer.makeNotification("textDocument/didClose",params));
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onDidCloseTextDocument: " + Std.string(e));
			}
		});
		connection.onCompletion(function(params) {
			try {
				LorelineServer.logger.info("Completion requested");
				var response = LorelineServer.server.handleMessage(LorelineServer.makeRequest("textDocument/completion",params));
				return response.result;
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onCompletion: " + Std.string(e));
				throw haxe_Exception.thrown(e);
			}
		});
		connection.onDefinition(function(params) {
			try {
				LorelineServer.logger.info("Definition requested");
				var response = LorelineServer.server.handleMessage(LorelineServer.makeRequest("textDocument/definition",params));
				return response.result;
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onDefinition: " + Std.string(e));
				throw haxe_Exception.thrown(e);
			}
		});
		connection.onHover(function(params) {
			try {
				LorelineServer.logger.info("Hover requested");
				var response = LorelineServer.server.handleMessage(LorelineServer.makeRequest("textDocument/hover",params));
				return response.result;
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onHover: " + Std.string(e));
				throw haxe_Exception.thrown(e);
			}
		});
		connection.onDocumentSymbol(function(params) {
			try {
				LorelineServer.logger.info("Document symbols requested");
				var response = LorelineServer.server.handleMessage(LorelineServer.makeRequest("textDocument/documentSymbol",params));
				return response.result;
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onDocumentSymbol: " + Std.string(e));
				throw haxe_Exception.thrown(e);
			}
		});
		connection.onDocumentFormatting(function(params) {
			try {
				LorelineServer.logger.info("Document formatting requested");
				var response = LorelineServer.server.handleMessage(LorelineServer.makeRequest("textDocument/formatting",params));
				return response.result;
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onDocumentFormatting: " + Std.string(e));
				throw haxe_Exception.thrown(e);
			}
		});
		connection.onReferences(function(params) {
			try {
				LorelineServer.logger.info("References requested");
				var response = LorelineServer.server.handleMessage(LorelineServer.makeRequest("textDocument/references",params));
				return response.result;
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				LorelineServer.logger.error("Error in onReferences: " + Std.string(e));
				throw haxe_Exception.thrown(e);
			}
		});
		connection.onShutdown(function() {
			LorelineServer.logger.info("Server shutting down...");
		});
		connection.onExit(function() {
			LorelineServer.logger.info("Server exiting...");
			process.exit(0);
		});
		LorelineServer.logger.info("Server starting...");
		connection.listen();
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		haxe_Log.trace("Fatal server error: " + Std.string(e),{ fileName : "src/LorelineServer.hx", lineNumber : 225, className : "LorelineServer", methodName : "main"});
		if(e != null && e.stack != null) {
			haxe_Log.trace(e.stack,{ fileName : "src/LorelineServer.hx", lineNumber : 227, className : "LorelineServer", methodName : "main"});
		}
		process.exit(1);
	}
};
LorelineServer.makeRequest = function(method,params) {
	return { jsonrpc : "2.0", id : LorelineServer.nextRequestId++, method : method, params : params};
};
LorelineServer.makeNotification = function(method,params) {
	return { jsonrpc : "2.0", method : method, params : params};
};
Math.__name__ = "Math";
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = "haxe.io.Output";
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = "_Sys.FileOutput";
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = "haxe.io.Input";
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = "_Sys.FileInput";
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var Type = function() { };
Type.__name__ = "Type";
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var loreline_Error = function(message,pos) {
	this.message = message;
	this.pos = pos;
	this.stack = haxe_CallStack.callStack();
};
loreline_Error.__name__ = "loreline.Error";
loreline_Error.prototype = {
	toString: function() {
		return "" + this.message + " at " + this.pos.toString();
	}
	,__class__: loreline_Error
};
var loreline_Reference = function(target,origin) {
	this.target = target;
	this.origin = origin;
};
loreline_Reference.__name__ = "loreline.Reference";
loreline_Reference.prototype = {
	__class__: loreline_Reference
};
var loreline_Lens = function(script) {
	this.childNodes = new haxe_ds_IntMap();
	this.parentNodes = new haxe_ds_IntMap();
	this.nodesById = new haxe_ds_IntMap();
	this.script = script;
	this.initialize();
};
loreline_Lens.__name__ = "loreline.Lens";
loreline_Lens.prototype = {
	initialize: function() {
		var _gthis = this;
		this.script.each(function(node,parent) {
			_gthis.nodesById.h[node.id] = node;
			if(parent != null) {
				_gthis.parentNodes.h[node.id] = parent;
				var children = _gthis.childNodes.h[parent.id];
				if(children == null) {
					children = [];
					_gthis.childNodes.h[parent.id] = children;
				}
				children.push(node);
			}
		});
	}
	,getNodeAtPosition: function(pos) {
		var bestMatch = null;
		this.script.each(function(node,parent) {
			var nodePos = node.pos;
			if(nodePos.length > 0 && nodePos.offset <= pos.offset && nodePos.offset + nodePos.length >= pos.offset) {
				bestMatch = node;
			}
		});
		return bestMatch;
	}
	,getClosestNodeAtOrBeforePosition: function(pos) {
		var bestMatch = null;
		var bestDistance = 999999999;
		this.script.each(function(node,parent) {
			var nodePos = node.pos;
			var distance = pos.offset - nodePos.offset;
			if(distance >= 0 && distance < bestDistance) {
				bestDistance = distance;
				bestMatch = node;
			}
		});
		return bestMatch;
	}
	,getNodesOfType: function(nodeType) {
		var matches = [];
		this.script.each(function(node,_) {
			if(js_Boot.__instanceof(node,nodeType)) {
				matches.push(node);
			}
		});
		return matches;
	}
	,getParentNode: function(node) {
		return this.parentNodes.h[node.id];
	}
	,getFirstParentOfType: function(node,type) {
		var current = node;
		while(current != null) {
			current = this.getParentNode(current);
			if(current != null && js_Boot.getClass(current) == type) {
				return current;
			}
		}
		return null;
	}
	,getAncestors: function(node) {
		var ancestors = [];
		var current = node;
		while(current != null) {
			current = this.parentNodes.h[current.id];
			if(current != null) {
				ancestors.push(current);
			}
		}
		return ancestors;
	}
	,findNodes: function(predicate) {
		var matches = [];
		this.script.each(function(node,_) {
			if(predicate(node)) {
				matches.push(node);
			}
		});
		return matches;
	}
	,resolveArrayAccess: function(access) {
		var targetNode = null;
		if(((access.target) instanceof loreline_NAccess)) {
			targetNode = this.resolveAccess(access.target);
		} else if(((access.target) instanceof loreline_NArrayAccess)) {
			targetNode = this.resolveArrayAccess(access.target);
		}
		if(targetNode == null) {
			return null;
		}
		switch(js_Boot.getClass(targetNode)) {
		case loreline_NLiteral:
			var literal = targetNode;
			if(literal.type == loreline_LiteralType.Array) {
				var elements = literal.value;
				if(((access.index) instanceof loreline_NLiteral)) {
					var indexLit = access.index;
					if(indexLit.type == loreline_LiteralType.Number) {
						var index = indexLit.value | 0;
						if(index >= 0 && index < elements.length) {
							var element = elements[index];
							if(((element) instanceof loreline_Node)) {
								return element;
							}
						}
					}
				}
			}
			break;
		case loreline_NObjectField:
			var field = targetNode;
			if(((field.value) instanceof loreline_NLiteral)) {
				var literal = field.value;
				if(literal.type == loreline_LiteralType.Array) {
					var elements = literal.value;
					if(((access.index) instanceof loreline_NLiteral)) {
						var indexLit = access.index;
						if(indexLit.type == loreline_LiteralType.Number) {
							var index = indexLit.value | 0;
							if(index >= 0 && index < elements.length) {
								var element = elements[index];
								if(((element) instanceof loreline_Node)) {
									return element;
								}
							}
						}
					}
				}
			}
			break;
		default:
		}
		return null;
	}
	,resolveAccess: function(access) {
		if(access.target != null) {
			var targetNode = ((access.target) instanceof loreline_NAccess) ? this.resolveAccess(access.target) : ((access.target) instanceof loreline_NArrayAccess) ? this.resolveArrayAccess(access.target) : null;
			if(targetNode != null) {
				if(((targetNode) instanceof loreline_NObjectField)) {
					targetNode = targetNode.value;
				}
				switch(js_Boot.getClass(targetNode)) {
				case loreline_NCharacterDecl:
					var characterDecl = targetNode;
					var _g = 0;
					var _g1 = characterDecl.fields;
					while(_g < _g1.length) {
						var prop = _g1[_g];
						++_g;
						if(prop.name == access.name) {
							return prop;
						}
					}
					break;
				case loreline_NLiteral:
					var literal = targetNode;
					var _g = literal.type;
					if(_g._hx_index == 4) {
						var style = _g.style;
						var fields = literal.value;
						var _g = 0;
						while(_g < fields.length) {
							var field = fields[_g];
							++_g;
							if(field.name == access.name) {
								return field;
							}
						}
					}
					break;
				default:
				}
			}
			return null;
		}
		var name = access.name;
		if(name == null) {
			return null;
		}
		var currentBeat = this.getFirstParentOfType(access,loreline_NBeatDecl);
		while(currentBeat != null) {
			var result = [null];
			this.traverse(currentBeat,(function(result) {
				return function(node,parent) {
					if(result[0] != null) {
						return false;
					}
					if(((node) instanceof loreline_NStateDecl)) {
						var stateDecl = node;
						var _g = 0;
						var _g1 = stateDecl.fields;
						while(_g < _g1.length) {
							var field = _g1[_g];
							++_g;
							if(field.name == name) {
								result[0] = field;
								return false;
							}
						}
					}
					return true;
				};
			})(result));
			if(result[0] != null) {
				return result[0];
			}
			currentBeat = this.getFirstParentOfType(currentBeat,loreline_NBeatDecl);
		}
		var stateField = null;
		this.traverse(this.script,function(node,parent) {
			if(stateField != null) {
				return false;
			}
			if(((node) instanceof loreline_NStateDecl)) {
				var stateDecl = node;
				var _g = 0;
				var _g1 = stateDecl.fields;
				while(_g < _g1.length) {
					var field = _g1[_g];
					++_g;
					if(field.name == name) {
						stateField = field;
						return false;
					}
				}
			}
			return false;
		});
		if(stateField != null) {
			return stateField;
		}
		var characterDecl = this.findCharacterByNameFromNode(name,access);
		if(characterDecl != null) {
			return characterDecl;
		}
		var beatDecl = this.findBeatByNameFromNode(name,access);
		if(beatDecl != null) {
			return beatDecl;
		}
		return null;
	}
	,findBeatFromAccess: function(access) {
		if(access.target == null && access.name != null) {
			return this.findBeatByNameFromNode(access.name,access);
		}
		return null;
	}
	,findBeatFromTransition: function(transition) {
		return this.findBeatByNameFromNode(transition.target,transition);
	}
	,findBeatByNameFromNode: function(name,node) {
		var result = null;
		var parentBeat = this.getFirstParentOfType(node,loreline_NBeatDecl);
		while(parentBeat != null) {
			this.traverse(parentBeat,function(child,parent) {
				if(result != null || child == node) {
					return false;
				} else if(((child) instanceof loreline_NBeatDecl)) {
					var beatDecl = child;
					if(beatDecl.name == name) {
						result = beatDecl;
					}
					return false;
				}
				return true;
			});
			parentBeat = this.getFirstParentOfType(parentBeat,loreline_NBeatDecl);
		}
		if(result == null) {
			this.traverse(this.script,function(child,parent) {
				if(result == null && ((child) instanceof loreline_NBeatDecl)) {
					var beatDecl = child;
					if(beatDecl.name == name) {
						result = beatDecl;
					}
				}
				return false;
			});
		}
		return result;
	}
	,findCharacterFromDialogue: function(dialogue) {
		return this.findCharacterByNameFromNode(dialogue.character,dialogue);
	}
	,findCharacterByNameFromNode: function(name,node) {
		var result = null;
		this.traverse(this.script,function(child,parent) {
			if(result == null && ((child) instanceof loreline_NCharacterDecl)) {
				var characterDecl = child;
				if(characterDecl.name == name) {
					result = characterDecl;
				}
			}
			return false;
		});
		return result;
	}
	,getVisibleCharacters: function() {
		var result = [];
		var _g = 0;
		var _g1 = this.script.declarations;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(((node) instanceof loreline_NCharacterDecl)) {
				result.push(node);
			}
		}
		return result;
	}
	,getVisibleStateFields: function(fromNode) {
		var _gthis = this;
		var fields = [];
		var seenFields_h = { };
		var current = fromNode;
		while(current != null) {
			if(js_Boot.getClass(current) == loreline_NStateDecl) {
				var state = current;
				var _g = 0;
				var _g1 = state.fields;
				while(_g < _g1.length) {
					var field = _g1[_g];
					++_g;
					if(!seenFields_h.hasOwnProperty(field.id)) {
						seenFields_h[field.id] = true;
						fields.push(field);
					}
				}
			}
			current = this.parentNodes.h[current.id];
		}
		this.script.each(function(node,parent) {
			if(js_Boot.getClass(node) == loreline_NStateDecl) {
				var state = node;
				if(parent == _gthis.script) {
					var _g = 0;
					var _g1 = state.fields;
					while(_g < _g1.length) {
						var field = _g1[_g];
						++_g;
						if(!seenFields_h.hasOwnProperty(field.id)) {
							seenFields_h[field.id] = true;
							fields.push(field);
						}
					}
				}
			}
		});
		return fields;
	}
	,getVisibleBeats: function(fromNode) {
		var _gthis = this;
		var beats = [];
		var seenBeats_h = Object.create(null);
		var current = this.getParentNode(fromNode);
		while(current != null) {
			if(js_Boot.getClass(current) == loreline_NBeatDecl) {
				var parent = this.getParentNode(current);
				if(parent != null) {
					var _g = 0;
					var _g1 = this.getNodesOfType(loreline_NBeatDecl);
					while(_g < _g1.length) {
						var child = _g1[_g];
						++_g;
						if(!Object.prototype.hasOwnProperty.call(seenBeats_h,child.name)) {
							seenBeats_h[child.name] = true;
							beats.push(child);
						}
					}
				}
			}
			current = this.getParentNode(current);
		}
		this.script.each(function(node,parent) {
			if(js_Boot.getClass(node) == loreline_NBeatDecl) {
				if(parent == _gthis.script) {
					var beat = node;
					if(!Object.prototype.hasOwnProperty.call(seenBeats_h,beat.name)) {
						seenBeats_h[beat.name] = true;
						beats.push(beat);
					}
				}
			}
		});
		return beats;
	}
	,getAllTags: function() {
		var tags_h = Object.create(null);
		var processStringLiteral = function(str) {
			var _g = 0;
			var _g1 = str.parts;
			while(_g < _g1.length) {
				var part = _g1[_g];
				++_g;
				var _g2 = part.type;
				if(_g2._hx_index == 2) {
					var _g3 = _g2.closing;
					var content = _g2.expr;
					if(content.parts.length == 1) {
						var _g4 = content.parts[0].type;
						if(_g4._hx_index == 0) {
							var text = _g4.text;
							var key = StringTools.trim(text);
							tags_h[key] = true;
						}
					}
				}
			}
		};
		this.script.each(function(node,parent) {
			if(js_Boot.getClass(node) == loreline_NStringLiteral) {
				processStringLiteral(node);
			}
		});
		var _g = [];
		var h = tags_h;
		var tag_h = h;
		var tag_keys = Object.keys(h);
		var tag_length = tag_keys.length;
		var tag_current = 0;
		while(tag_current < tag_length) {
			var tag = tag_keys[tag_current++];
			_g.push(tag);
		}
		return _g;
	}
	,findStateField: function(access) {
		if(access.target != null) {
			return null;
		}
		var stateFields = this.getVisibleStateFields(access);
		var _g = 0;
		while(_g < stateFields.length) {
			var field = stateFields[_g];
			++_g;
			if(field.name == access.name) {
				return field;
			}
		}
		return null;
	}
	,findOutboundBeats: function(beatDecl) {
		var _gthis = this;
		var targetBeats = new haxe_ds_IntMap();
		this.traverse(beatDecl,function(node,parent) {
			switch(js_Boot.getClass(node)) {
			case loreline_NCall:
				var call = node;
				if(((call.target) instanceof loreline_NAccess)) {
					var access = call.target;
					if(access.target == null) {
						var targetBeat = _gthis.findBeatFromAccess(access);
						if(targetBeat != null) {
							var key = targetBeat.id;
							var value = new loreline_Reference(targetBeat,call);
							targetBeats.h[key] = value;
						}
					}
				}
				break;
			case loreline_NTransition:
				var transition = node;
				var targetBeat = _gthis.findBeatByNameFromNode(transition.target,transition);
				if(targetBeat != null) {
					var key = targetBeat.id;
					var value = new loreline_Reference(targetBeat,transition);
					targetBeats.h[key] = value;
				}
				break;
			default:
			}
			return true;
		});
		var _g = [];
		var ref = targetBeats.iterator();
		while(ref.hasNext()) {
			var ref1 = ref.next();
			_g.push(ref1);
		}
		return _g;
	}
	,findReferencesToBeat: function(beatDecl) {
		var _gthis = this;
		var references = [];
		this.script.each(function(node,parent) {
			switch(js_Boot.getClass(node)) {
			case loreline_NCall:
				var call = node;
				if(((call.target) instanceof loreline_NAccess)) {
					var access = call.target;
					if(access.target == null && access.name == beatDecl.name) {
						var foundBeat = _gthis.findBeatFromAccess(access);
						if(foundBeat != null && foundBeat.id == beatDecl.id) {
							references.push(new loreline_Reference(beatDecl,call));
						}
					}
				}
				break;
			case loreline_NTransition:
				var transition = node;
				if(transition.target == beatDecl.name) {
					references.push(new loreline_Reference(beatDecl,transition));
				}
				break;
			default:
			}
		});
		return references;
	}
	,findModifiedStateFields: function(beatDecl) {
		var _gthis = this;
		var modifiedFields_h = Object.create(null);
		this.traverse(beatDecl,function(node,parent) {
			if(js_Boot.getClass(node) == loreline_NAssign) {
				var assign = node;
				if(((assign.target) instanceof loreline_NAccess)) {
					var access = assign.target;
					var field = _gthis.findStateField(access);
					if(field != null) {
						var key = field.name;
						var value = new loreline_Reference(field,assign);
						modifiedFields_h[key] = value;
					}
				}
			}
			return true;
		});
		var _g = [];
		var h = modifiedFields_h;
		var ref_h = h;
		var ref_keys = Object.keys(h);
		var ref_length = ref_keys.length;
		var ref_current = 0;
		while(ref_current < ref_length) {
			var ref = ref_h[ref_keys[ref_current++]];
			_g.push(ref);
		}
		var refs = _g;
		refs.sort(function(a,b) {
			var aName = a.target.name.toLowerCase();
			var bName = b.target.name.toLowerCase();
			if(aName < bName) {
				return -1;
			} else if(aName > bName) {
				return 1;
			} else {
				return 0;
			}
		});
		return refs;
	}
	,findReadStateFields: function(beatDecl) {
		var _gthis = this;
		var readFields_h = Object.create(null);
		this.traverse(beatDecl,function(node,parent) {
			if(js_Boot.getClass(node) == loreline_NAccess) {
				var access = node;
				if(((parent) instanceof loreline_NAssign)) {
					var assign = parent;
					if(assign.target == node) {
						return true;
					}
				}
				var field = _gthis.findStateField(access);
				if(field != null) {
					var key = field.name;
					var value = new loreline_Reference(field,access);
					readFields_h[key] = value;
				}
			}
			return true;
		});
		var _g = [];
		var h = readFields_h;
		var ref_h = h;
		var ref_keys = Object.keys(h);
		var ref_length = ref_keys.length;
		var ref_current = 0;
		while(ref_current < ref_length) {
			var ref = ref_h[ref_keys[ref_current++]];
			_g.push(ref);
		}
		var refs = _g;
		refs.sort(function(a,b) {
			var aName = a.target.name.toLowerCase();
			var bName = b.target.name.toLowerCase();
			if(aName < bName) {
				return -1;
			} else if(aName > bName) {
				return 1;
			} else {
				return 0;
			}
		});
		return refs;
	}
	,findBeatCharacters: function(beatDecl) {
		var _gthis = this;
		var characters = new haxe_ds_IntMap();
		this.traverse(beatDecl,function(node,parent) {
			switch(js_Boot.getClass(node)) {
			case loreline_NAccess:
				var access = node;
				if(access.target == null) {
					var character = _gthis.findCharacterByNameFromNode(access.name,access);
					if(character != null) {
						var key = character.id;
						var value = new loreline_Reference(character,access);
						characters.h[key] = value;
					}
				}
				break;
			case loreline_NDialogueStatement:
				var dialogue = node;
				var character = _gthis.findCharacterFromDialogue(dialogue);
				if(character != null) {
					var key = character.id;
					var value = new loreline_Reference(character,dialogue);
					characters.h[key] = value;
				}
				break;
			default:
			}
			return true;
		});
		var _g = [];
		var ref = characters.iterator();
		while(ref.hasNext()) {
			var ref1 = ref.next();
			_g.push(ref1);
		}
		var refs = _g;
		refs.sort(function(a,b) {
			var aName = a.target.name.toLowerCase();
			var bName = b.target.name.toLowerCase();
			if(aName < bName) {
				return -1;
			} else if(aName > bName) {
				return 1;
			} else {
				return 0;
			}
		});
		return refs;
	}
	,findModifiedCharacterFields: function(beatDecl) {
		var _gthis = this;
		var used_h = { };
		var refs = [];
		this.traverse(beatDecl,function(node,parent) {
			if(js_Boot.getClass(node) == loreline_NAssign) {
				var assign = node;
				if(((assign.target) instanceof loreline_NAccess)) {
					var access = assign.target;
					var resolved = _gthis.resolveAccess(access);
					if(((resolved) instanceof loreline_NObjectField)) {
						if(!used_h.hasOwnProperty(resolved.id)) {
							var parent = _gthis.getParentNode(resolved);
							if(((parent) instanceof loreline_NCharacterDecl)) {
								used_h[resolved.id] = true;
								refs.push(new loreline_Reference(resolved,node));
							}
						}
					}
				}
			}
			return true;
		});
		return refs;
	}
	,findReadCharacterFields: function(beatDecl) {
		var _gthis = this;
		var used_h = { };
		var refs = [];
		this.traverse(beatDecl,function(node,parent) {
			if(js_Boot.getClass(node) == loreline_NAccess) {
				var access = node;
				var parent = _gthis.getParentNode(access);
				if(((parent) instanceof loreline_NAssign)) {
					var assign = parent;
					if(assign.target == access) {
						return true;
					}
				}
				var resolved = _gthis.resolveAccess(access);
				if(((resolved) instanceof loreline_NObjectField)) {
					if(!used_h.hasOwnProperty(resolved.id)) {
						var parent = _gthis.getParentNode(resolved);
						if(((parent) instanceof loreline_NCharacterDecl)) {
							used_h[resolved.id] = true;
							refs.push(new loreline_Reference(resolved,node));
						}
					}
				}
			}
			return true;
		});
		return refs;
	}
	,traverse: function(node,callback) {
		var children = this.childNodes.h[node.id];
		if(children != null) {
			var _g = 0;
			var _g1 = children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = children[i];
				if(callback(child,node)) {
					this.traverse(child,callback);
				}
			}
		}
	}
	,__class__: loreline_Lens
};
var loreline_LexerError = function(message,pos) {
	loreline_Error.call(this,message,pos);
};
loreline_LexerError.__name__ = "loreline.LexerError";
loreline_LexerError.__super__ = loreline_Error;
loreline_LexerError.prototype = $extend(loreline_Error.prototype,{
	__class__: loreline_LexerError
});
var loreline_LStringAttachment = $hxEnums["loreline.LStringAttachment"] = { __ename__:true,__constructs__:null
	,Interpolation: ($_=function(braces,inTag,expr,start,length) { return {_hx_index:0,braces:braces,inTag:inTag,expr:expr,start:start,length:length,__enum__:"loreline.LStringAttachment",toString:$estr}; },$_._hx_name="Interpolation",$_.__params__ = ["braces","inTag","expr","start","length"],$_)
	,Tag: ($_=function(closing,start,length) { return {_hx_index:1,closing:closing,start:start,length:length,__enum__:"loreline.LStringAttachment",toString:$estr}; },$_._hx_name="Tag",$_.__params__ = ["closing","start","length"],$_)
};
loreline_LStringAttachment.__constructs__ = [loreline_LStringAttachment.Interpolation,loreline_LStringAttachment.Tag];
var loreline_TokenStackType = {};
loreline_TokenStackType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "ChoiceBrace";
	case 1:
		return "ChoiceIndent";
	case 2:
		return "StateBrace";
	case 3:
		return "StateIndent";
	case 4:
		return "CharacterBrace";
	case 5:
		return "CharacterIndent";
	case 6:
		return "BeatBrace";
	case 7:
		return "BeatIndent";
	case 8:
		return "Brace";
	case 9:
		return "Indent";
	case 10:
		return "Bracket";
	}
};
var loreline_TokenType = $hxEnums["loreline.TokenType"] = { __ename__:true,__constructs__:null
	,KwImport: {_hx_name:"KwImport",_hx_index:0,__enum__:"loreline.TokenType",toString:$estr}
	,KwState: {_hx_name:"KwState",_hx_index:1,__enum__:"loreline.TokenType",toString:$estr}
	,KwBeat: {_hx_name:"KwBeat",_hx_index:2,__enum__:"loreline.TokenType",toString:$estr}
	,KwCharacter: {_hx_name:"KwCharacter",_hx_index:3,__enum__:"loreline.TokenType",toString:$estr}
	,KwChoice: {_hx_name:"KwChoice",_hx_index:4,__enum__:"loreline.TokenType",toString:$estr}
	,KwIf: {_hx_name:"KwIf",_hx_index:5,__enum__:"loreline.TokenType",toString:$estr}
	,KwElse: {_hx_name:"KwElse",_hx_index:6,__enum__:"loreline.TokenType",toString:$estr}
	,KwNew: {_hx_name:"KwNew",_hx_index:7,__enum__:"loreline.TokenType",toString:$estr}
	,LString: ($_=function(quotes,s,attachments) { return {_hx_index:8,quotes:quotes,s:s,attachments:attachments,__enum__:"loreline.TokenType",toString:$estr}; },$_._hx_name="LString",$_.__params__ = ["quotes","s","attachments"],$_)
	,LNumber: ($_=function(n) { return {_hx_index:9,n:n,__enum__:"loreline.TokenType",toString:$estr}; },$_._hx_name="LNumber",$_.__params__ = ["n"],$_)
	,LBoolean: ($_=function(b) { return {_hx_index:10,b:b,__enum__:"loreline.TokenType",toString:$estr}; },$_._hx_name="LBoolean",$_.__params__ = ["b"],$_)
	,LNull: {_hx_name:"LNull",_hx_index:11,__enum__:"loreline.TokenType",toString:$estr}
	,Identifier: ($_=function(name) { return {_hx_index:12,name:name,__enum__:"loreline.TokenType",toString:$estr}; },$_._hx_name="Identifier",$_.__params__ = ["name"],$_)
	,OpAssign: {_hx_name:"OpAssign",_hx_index:13,__enum__:"loreline.TokenType",toString:$estr}
	,OpPlusAssign: {_hx_name:"OpPlusAssign",_hx_index:14,__enum__:"loreline.TokenType",toString:$estr}
	,OpMinusAssign: {_hx_name:"OpMinusAssign",_hx_index:15,__enum__:"loreline.TokenType",toString:$estr}
	,OpMultiplyAssign: {_hx_name:"OpMultiplyAssign",_hx_index:16,__enum__:"loreline.TokenType",toString:$estr}
	,OpDivideAssign: {_hx_name:"OpDivideAssign",_hx_index:17,__enum__:"loreline.TokenType",toString:$estr}
	,OpPlus: {_hx_name:"OpPlus",_hx_index:18,__enum__:"loreline.TokenType",toString:$estr}
	,OpMinus: {_hx_name:"OpMinus",_hx_index:19,__enum__:"loreline.TokenType",toString:$estr}
	,OpMultiply: {_hx_name:"OpMultiply",_hx_index:20,__enum__:"loreline.TokenType",toString:$estr}
	,OpDivide: {_hx_name:"OpDivide",_hx_index:21,__enum__:"loreline.TokenType",toString:$estr}
	,OpModulo: {_hx_name:"OpModulo",_hx_index:22,__enum__:"loreline.TokenType",toString:$estr}
	,OpEquals: {_hx_name:"OpEquals",_hx_index:23,__enum__:"loreline.TokenType",toString:$estr}
	,OpNotEquals: {_hx_name:"OpNotEquals",_hx_index:24,__enum__:"loreline.TokenType",toString:$estr}
	,OpGreater: {_hx_name:"OpGreater",_hx_index:25,__enum__:"loreline.TokenType",toString:$estr}
	,OpLess: {_hx_name:"OpLess",_hx_index:26,__enum__:"loreline.TokenType",toString:$estr}
	,OpGreaterEq: {_hx_name:"OpGreaterEq",_hx_index:27,__enum__:"loreline.TokenType",toString:$estr}
	,OpLessEq: {_hx_name:"OpLessEq",_hx_index:28,__enum__:"loreline.TokenType",toString:$estr}
	,OpAnd: ($_=function(word) { return {_hx_index:29,word:word,__enum__:"loreline.TokenType",toString:$estr}; },$_._hx_name="OpAnd",$_.__params__ = ["word"],$_)
	,OpOr: ($_=function(word) { return {_hx_index:30,word:word,__enum__:"loreline.TokenType",toString:$estr}; },$_._hx_name="OpOr",$_.__params__ = ["word"],$_)
	,OpNot: {_hx_name:"OpNot",_hx_index:31,__enum__:"loreline.TokenType",toString:$estr}
	,Arrow: {_hx_name:"Arrow",_hx_index:32,__enum__:"loreline.TokenType",toString:$estr}
	,Colon: {_hx_name:"Colon",_hx_index:33,__enum__:"loreline.TokenType",toString:$estr}
	,Comma: {_hx_name:"Comma",_hx_index:34,__enum__:"loreline.TokenType",toString:$estr}
	,Dot: {_hx_name:"Dot",_hx_index:35,__enum__:"loreline.TokenType",toString:$estr}
	,LBrace: {_hx_name:"LBrace",_hx_index:36,__enum__:"loreline.TokenType",toString:$estr}
	,RBrace: {_hx_name:"RBrace",_hx_index:37,__enum__:"loreline.TokenType",toString:$estr}
	,LParen: {_hx_name:"LParen",_hx_index:38,__enum__:"loreline.TokenType",toString:$estr}
	,RParen: {_hx_name:"RParen",_hx_index:39,__enum__:"loreline.TokenType",toString:$estr}
	,LBracket: {_hx_name:"LBracket",_hx_index:40,__enum__:"loreline.TokenType",toString:$estr}
	,RBracket: {_hx_name:"RBracket",_hx_index:41,__enum__:"loreline.TokenType",toString:$estr}
	,CommentLine: ($_=function(content) { return {_hx_index:42,content:content,__enum__:"loreline.TokenType",toString:$estr}; },$_._hx_name="CommentLine",$_.__params__ = ["content"],$_)
	,CommentMultiLine: ($_=function(content) { return {_hx_index:43,content:content,__enum__:"loreline.TokenType",toString:$estr}; },$_._hx_name="CommentMultiLine",$_.__params__ = ["content"],$_)
	,Indent: {_hx_name:"Indent",_hx_index:44,__enum__:"loreline.TokenType",toString:$estr}
	,Unindent: {_hx_name:"Unindent",_hx_index:45,__enum__:"loreline.TokenType",toString:$estr}
	,LineBreak: {_hx_name:"LineBreak",_hx_index:46,__enum__:"loreline.TokenType",toString:$estr}
	,Eof: {_hx_name:"Eof",_hx_index:47,__enum__:"loreline.TokenType",toString:$estr}
};
loreline_TokenType.__constructs__ = [loreline_TokenType.KwImport,loreline_TokenType.KwState,loreline_TokenType.KwBeat,loreline_TokenType.KwCharacter,loreline_TokenType.KwChoice,loreline_TokenType.KwIf,loreline_TokenType.KwElse,loreline_TokenType.KwNew,loreline_TokenType.LString,loreline_TokenType.LNumber,loreline_TokenType.LBoolean,loreline_TokenType.LNull,loreline_TokenType.Identifier,loreline_TokenType.OpAssign,loreline_TokenType.OpPlusAssign,loreline_TokenType.OpMinusAssign,loreline_TokenType.OpMultiplyAssign,loreline_TokenType.OpDivideAssign,loreline_TokenType.OpPlus,loreline_TokenType.OpMinus,loreline_TokenType.OpMultiply,loreline_TokenType.OpDivide,loreline_TokenType.OpModulo,loreline_TokenType.OpEquals,loreline_TokenType.OpNotEquals,loreline_TokenType.OpGreater,loreline_TokenType.OpLess,loreline_TokenType.OpGreaterEq,loreline_TokenType.OpLessEq,loreline_TokenType.OpAnd,loreline_TokenType.OpOr,loreline_TokenType.OpNot,loreline_TokenType.Arrow,loreline_TokenType.Colon,loreline_TokenType.Comma,loreline_TokenType.Dot,loreline_TokenType.LBrace,loreline_TokenType.RBrace,loreline_TokenType.LParen,loreline_TokenType.RParen,loreline_TokenType.LBracket,loreline_TokenType.RBracket,loreline_TokenType.CommentLine,loreline_TokenType.CommentMultiLine,loreline_TokenType.Indent,loreline_TokenType.Unindent,loreline_TokenType.LineBreak,loreline_TokenType.Eof];
var loreline_TokenTypeHelpers = function() { };
loreline_TokenTypeHelpers.__name__ = "loreline.TokenTypeHelpers";
loreline_TokenTypeHelpers.equals = function(a,b) {
	switch(a._hx_index) {
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 2:
		if(b._hx_index == 2) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 3:
		if(b._hx_index == 3) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 4:
		if(b._hx_index == 4) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 5:
		if(b._hx_index == 5) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 6:
		if(b._hx_index == 6) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 7:
		if(b._hx_index == 7) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 8:
		var _g = a.s;
		var _g = a.attachments;
		if(b._hx_index == 8) {
			var _g = b.s;
			var _g = b.attachments;
			var s2 = b.quotes;
			var s1 = a.quotes;
			return s1 == s2;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 9:
		if(b._hx_index == 9) {
			var n2 = b.n;
			var n1 = a.n;
			return n1 == n2;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 10:
		if(b._hx_index == 10) {
			var b2 = b.b;
			var b1 = a.b;
			return b1 == b2;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 11:
		if(b._hx_index == 11) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 12:
		if(b._hx_index == 12) {
			var n2 = b.name;
			var n1 = a.name;
			return n1 == n2;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 13:
		if(b._hx_index == 13) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 14:
		if(b._hx_index == 14) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 15:
		if(b._hx_index == 15) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 16:
		if(b._hx_index == 16) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 17:
		if(b._hx_index == 17) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 18:
		if(b._hx_index == 18) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 19:
		if(b._hx_index == 19) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 20:
		if(b._hx_index == 20) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 21:
		if(b._hx_index == 21) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 22:
		if(b._hx_index == 22) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 23:
		if(b._hx_index == 23) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 24:
		if(b._hx_index == 24) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 25:
		if(b._hx_index == 25) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 26:
		if(b._hx_index == 26) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 27:
		if(b._hx_index == 27) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 28:
		if(b._hx_index == 28) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 29:
		var _g = a.word;
		if(b._hx_index == 29) {
			var _g = b.word;
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 30:
		var _g = a.word;
		if(b._hx_index == 30) {
			var _g = b.word;
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 31:
		if(b._hx_index == 31) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 32:
		if(b._hx_index == 32) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 33:
		if(b._hx_index == 33) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 35:
		if(b._hx_index == 35) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 36:
		if(b._hx_index == 36) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 37:
		if(b._hx_index == 37) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 38:
		if(b._hx_index == 38) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 39:
		if(b._hx_index == 39) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 40:
		if(b._hx_index == 40) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 41:
		if(b._hx_index == 41) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 42:
		if(b._hx_index == 42) {
			var c2 = b.content;
			var c1 = a.content;
			return c1 == c2;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 43:
		if(b._hx_index == 43) {
			var c2 = b.content;
			var c1 = a.content;
			return c1 == c2;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 44:
		if(b._hx_index == 44) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 45:
		if(b._hx_index == 45) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 46:
		if(b._hx_index == 46) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	case 47:
		if(b._hx_index == 47) {
			return true;
		} else {
			return Type.enumEq(a,b);
		}
		break;
	default:
		return Type.enumEq(a,b);
	}
};
loreline_TokenTypeHelpers.isComment = function(a) {
	switch(a._hx_index) {
	case 42:
		var _g = a.content;
		return true;
	case 43:
		var _g = a.content;
		return true;
	default:
		return false;
	}
};
loreline_TokenTypeHelpers.isAssignOp = function(a) {
	switch(a._hx_index) {
	case 13:case 14:case 15:case 16:case 17:
		return true;
	default:
		return false;
	}
};
loreline_TokenTypeHelpers.isIdentifier = function(a) {
	if(a._hx_index == 12) {
		var _g = a.name;
		return true;
	} else {
		return false;
	}
};
loreline_TokenTypeHelpers.isBlockStart = function(a) {
	switch(a._hx_index) {
	case 1:case 2:case 3:case 4:case 5:
		return true;
	default:
		return false;
	}
};
var loreline_Token = function(type,pos) {
	this.type = type;
	this.pos = pos;
};
loreline_Token.__name__ = "loreline.Token";
loreline_Token.prototype = {
	toString: function() {
		return "" + Std.string(this.type) + " at " + this.pos.toString();
	}
	,__class__: loreline_Token
};
var loreline_Lexer = function(input) {
	this.errors = null;
	this.allowTabs = true;
	this.indentSize = 4;
	this.indentTokens = [];
	this.indentStack = [];
	this.indentLevel = 0;
	this.input = input;
	this.length = input.length;
	this.reset();
};
loreline_Lexer.__name__ = "loreline.Lexer";
loreline_Lexer.compareAttachments = function(l,r) {
	var lStart;
	switch(l._hx_index) {
	case 0:
		var _g = l.braces;
		var _g = l.inTag;
		var _g = l.expr;
		var _g = l.length;
		var start = l.start;
		lStart = start;
		break;
	case 1:
		var _g = l.closing;
		var _g = l.length;
		var start = l.start;
		lStart = start;
		break;
	}
	var rStart;
	switch(r._hx_index) {
	case 0:
		var _g = r.braces;
		var _g = r.inTag;
		var _g = r.expr;
		var _g = r.length;
		var start = r.start;
		rStart = start;
		break;
	case 1:
		var _g = r.closing;
		var _g = r.length;
		var start = r.start;
		rStart = start;
		break;
	}
	return lStart - rStart;
};
loreline_Lexer.prototype = {
	reset: function() {
		this.pos = 0;
		this.line = 1;
		this.column = 1;
		this.startLine = 1;
		this.startColumn = 1;
		this.previous = null;
		this.stack = [];
		this.nextBlock = 8;
		this.tokenized = null;
		this.strictExprs = [];
		this.indentLevel = 0;
		this.indentStack = [0];
		this.indentTokens = [];
	}
	,tokenize: function() {
		var tokens = [];
		this.tokenized = tokens;
		while(true) {
			var token = this.nextToken();
			if(token.type == loreline_TokenType.Eof) {
				if(this.indentStack.length > 1) {
					var count = this.indentStack.length - 1;
					var _g = 0;
					var _g1 = count;
					while(_g < _g1) {
						var _ = _g++;
						var position = null;
						if(position == null) {
							position = new loreline_Position(this.startLine,this.startColumn,this.pos);
						}
						position.length = this.pos - position.offset;
						var token1 = new loreline_Token(loreline_TokenType.Unindent,position);
						this.previous = token1;
						tokens.push(token1);
					}
				}
				break;
			}
			tokens.push(token);
			switch(token.type._hx_index) {
			case 1:
				this.nextBlock = 3;
				break;
			case 2:
				this.nextBlock = 7;
				break;
			case 3:
				this.nextBlock = 5;
				break;
			case 4:
				this.nextBlock = 1;
				break;
			case 36:
				var tmp;
				switch(this.nextBlock) {
				case 0:case 1:
					tmp = 0;
					break;
				case 2:case 3:
					tmp = 2;
					break;
				case 4:case 5:
					tmp = 4;
					break;
				case 6:case 7:
					tmp = 7;
					break;
				case 8:case 9:case 10:
					tmp = 8;
					break;
				}
				this.stack.push(tmp);
				this.nextBlock = 8;
				break;
			case 40:
				this.stack.push(10);
				this.nextBlock = 8;
				break;
			case 37:case 41:case 45:
				this.stack.pop();
				this.nextBlock = 8;
				break;
			case 44:
				var tmp1;
				switch(this.nextBlock) {
				case 0:case 1:
					tmp1 = 1;
					break;
				case 2:case 3:
					tmp1 = 3;
					break;
				case 4:case 5:
					tmp1 = 5;
					break;
				case 6:case 7:
					tmp1 = 7;
					break;
				case 8:case 9:case 10:
					tmp1 = 9;
					break;
				}
				this.stack.push(tmp1);
				this.nextBlock = 8;
				break;
			default:
			}
		}
		return tokens;
	}
	,nextToken: function() {
		if(this.indentTokens.length > 0) {
			return this.indentTokens.shift();
		}
		this.skipWhitespace();
		if(this.pos >= this.length) {
			var position = null;
			if(position == null) {
				position = new loreline_Position(this.startLine,this.startColumn,this.pos);
			}
			position.length = this.pos - position.offset;
			var token = new loreline_Token(loreline_TokenType.Eof,position);
			this.previous = token;
			return token;
		}
		this.startLine = this.line;
		this.startColumn = this.column;
		var c = HxOverrides.cca(this.input,this.pos);
		if(c == 10 || c == 13) {
			var lineBreakToken = this.readLineBreak();
			var currentIndent = this.countIndentation();
			if(currentIndent > this.indentStack[this.indentStack.length - 1]) {
				this.indentStack.push(currentIndent);
				var tmp = this.indentTokens;
				var position = null;
				if(position == null) {
					position = new loreline_Position(this.startLine,this.startColumn,this.pos);
				}
				position.length = this.pos - position.offset;
				var token = new loreline_Token(loreline_TokenType.Indent,position);
				this.previous = token;
				tmp.push(token);
			} else if(currentIndent < this.indentStack[this.indentStack.length - 1]) {
				while(this.indentStack.length > 0 && currentIndent < this.indentStack[this.indentStack.length - 1]) {
					this.indentStack.pop();
					var tmp = this.indentTokens;
					var position = null;
					if(position == null) {
						position = new loreline_Position(this.startLine,this.startColumn,this.pos);
					}
					position.length = this.pos - position.offset;
					var token = new loreline_Token(loreline_TokenType.Unindent,position);
					this.previous = token;
					tmp.push(token);
				}
			}
			return lineBreakToken;
		}
		var startPos = new loreline_Position(this.startLine,this.startColumn,this.pos);
		if(c == null) {
			var tmp = this.tryReadUnquotedString();
			if(tmp != null) {
				return tmp;
			} else if(c == null) {
				var c1 = c;
				if(c1 >= 48 && c1 <= 57) {
					return this.readNumber();
				} else {
					var c1 = c;
					if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
						return this.readIdentifier();
					} else {
						this.error("Unexpected character: " + String.fromCodePoint(c),true);
						return null;
					}
				}
			} else {
				switch(c) {
				case 33:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpNotEquals,position);
							this.previous = token;
							return token;
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpNot,position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 37:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpModulo,position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 38:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 38) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpAnd(false),position);
							this.previous = token;
							return token;
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							this.error("Expected &",false);
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpAnd(false),position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 40:
					var count = 1;
					while(count-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					this.makeStrictIfFollowingCallable();
					var position = startPos;
					if(position == null) {
						position = new loreline_Position(this.startLine,this.startColumn,this.pos);
					}
					position.length = this.pos - position.offset;
					var token = new loreline_Token(loreline_TokenType.LParen,position);
					this.previous = token;
					return token;
				case 41:
					var count = 1;
					while(count-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					this.strictExprs.pop();
					var position = startPos;
					if(position == null) {
						position = new loreline_Position(this.startLine,this.startColumn,this.pos);
					}
					position.length = this.pos - position.offset;
					var token = new loreline_Token(loreline_TokenType.RParen,position);
					this.previous = token;
					return token;
				case 42:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpMultiplyAssign,position);
							this.previous = token;
							return token;
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpMultiply,position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 43:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpPlusAssign,position);
							this.previous = token;
							return token;
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpPlus,position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 44:
					var count = 1;
					while(count-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					var position = startPos;
					if(position == null) {
						position = new loreline_Position(this.startLine,this.startColumn,this.pos);
					}
					position.length = this.pos - position.offset;
					var token = new loreline_Token(loreline_TokenType.Comma,position);
					this.previous = token;
					return token;
				case 45:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 62) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.Arrow,position);
							this.previous = token;
							return token;
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpMinusAssign,position);
							this.previous = token;
							return token;
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpMinus,position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 46:
					var count = 1;
					while(count-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					var position = startPos;
					if(position == null) {
						position = new loreline_Position(this.startLine,this.startColumn,this.pos);
					}
					position.length = this.pos - position.offset;
					var token = new loreline_Token(loreline_TokenType.Dot,position);
					this.previous = token;
					return token;
				case 47:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpDivideAssign,position);
							this.previous = token;
							return token;
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 47) {
							return this.readLineComment();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 42) {
							return this.readMultiLineComment();
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpDivide,position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 58:
					var count = 1;
					while(count-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					var position = startPos;
					if(position == null) {
						position = new loreline_Position(this.startLine,this.startColumn,this.pos);
					}
					position.length = this.pos - position.offset;
					var token = new loreline_Token(loreline_TokenType.Colon,position);
					this.previous = token;
					return token;
				case 60:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpLessEq,position);
							this.previous = token;
							return token;
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpLess,position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 61:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpEquals,position);
							this.previous = token;
							return token;
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpAssign,position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 62:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpGreaterEq,position);
							this.previous = token;
							return token;
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpGreater,position);
							this.previous = token;
							return token;
						}
					}
					break;
				case 93:
					var count = 1;
					while(count-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					this.strictExprs.pop();
					var position = startPos;
					if(position == null) {
						position = new loreline_Position(this.startLine,this.startColumn,this.pos);
					}
					position.length = this.pos - position.offset;
					var token = new loreline_Token(loreline_TokenType.RBracket,position);
					this.previous = token;
					return token;
				case 124:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 124) {
							var count = 2;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpOr(false),position);
							this.previous = token;
							return token;
						} else {
							var count = 1;
							while(count-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
							this.error("Expected |",false);
							var position = startPos;
							if(position == null) {
								position = new loreline_Position(this.startLine,this.startColumn,this.pos);
							}
							position.length = this.pos - position.offset;
							var token = new loreline_Token(loreline_TokenType.OpOr(false),position);
							this.previous = token;
							return token;
						}
					}
					break;
				default:
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else {
							this.error("Unexpected character: " + String.fromCodePoint(c),true);
							return null;
						}
					}
				}
			}
		} else {
			switch(c) {
			case 34:
				return this.readString(startPos);
			case 91:
				var count = 1;
				while(count-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				this.makeLooseOrStrictAfterBracket();
				var position = startPos;
				if(position == null) {
					position = new loreline_Position(this.startLine,this.startColumn,this.pos);
				}
				position.length = this.pos - position.offset;
				var token = new loreline_Token(loreline_TokenType.LBracket,position);
				this.previous = token;
				return token;
			case 123:
				var count = 1;
				while(count-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				var position = startPos;
				if(position == null) {
					position = new loreline_Position(this.startLine,this.startColumn,this.pos);
				}
				position.length = this.pos - position.offset;
				var token = new loreline_Token(loreline_TokenType.LBrace,position);
				this.previous = token;
				return token;
			case 125:
				var count = 1;
				while(count-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				var position = startPos;
				if(position == null) {
					position = new loreline_Position(this.startLine,this.startColumn,this.pos);
				}
				position.length = this.pos - position.offset;
				var token = new loreline_Token(loreline_TokenType.RBrace,position);
				this.previous = token;
				return token;
			default:
				var tmp = this.tryReadUnquotedString();
				if(tmp != null) {
					return tmp;
				} else if(c == null) {
					var c1 = c;
					if(c1 >= 48 && c1 <= 57) {
						return this.readNumber();
					} else {
						var c1 = c;
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							return this.readIdentifier();
						} else {
							this.error("Unexpected character: " + String.fromCodePoint(c),true);
							return null;
						}
					}
				} else {
					switch(c) {
					case 33:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpNotEquals,position);
								this.previous = token;
								return token;
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpNot,position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 37:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpModulo,position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 38:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 38) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpAnd(false),position);
								this.previous = token;
								return token;
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								this.error("Expected &",false);
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpAnd(false),position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 40:
						var count = 1;
						while(count-- > 0 && this.pos < this.length) {
							if(HxOverrides.cca(this.input,this.pos) == 10) {
								this.line++;
								this.column = 1;
							} else {
								this.column++;
							}
							this.pos++;
						}
						this.makeStrictIfFollowingCallable();
						var position = startPos;
						if(position == null) {
							position = new loreline_Position(this.startLine,this.startColumn,this.pos);
						}
						position.length = this.pos - position.offset;
						var token = new loreline_Token(loreline_TokenType.LParen,position);
						this.previous = token;
						return token;
					case 41:
						var count = 1;
						while(count-- > 0 && this.pos < this.length) {
							if(HxOverrides.cca(this.input,this.pos) == 10) {
								this.line++;
								this.column = 1;
							} else {
								this.column++;
							}
							this.pos++;
						}
						this.strictExprs.pop();
						var position = startPos;
						if(position == null) {
							position = new loreline_Position(this.startLine,this.startColumn,this.pos);
						}
						position.length = this.pos - position.offset;
						var token = new loreline_Token(loreline_TokenType.RParen,position);
						this.previous = token;
						return token;
					case 42:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpMultiplyAssign,position);
								this.previous = token;
								return token;
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpMultiply,position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 43:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpPlusAssign,position);
								this.previous = token;
								return token;
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpPlus,position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 44:
						var count = 1;
						while(count-- > 0 && this.pos < this.length) {
							if(HxOverrides.cca(this.input,this.pos) == 10) {
								this.line++;
								this.column = 1;
							} else {
								this.column++;
							}
							this.pos++;
						}
						var position = startPos;
						if(position == null) {
							position = new loreline_Position(this.startLine,this.startColumn,this.pos);
						}
						position.length = this.pos - position.offset;
						var token = new loreline_Token(loreline_TokenType.Comma,position);
						this.previous = token;
						return token;
					case 45:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 62) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.Arrow,position);
								this.previous = token;
								return token;
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpMinusAssign,position);
								this.previous = token;
								return token;
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpMinus,position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 46:
						var count = 1;
						while(count-- > 0 && this.pos < this.length) {
							if(HxOverrides.cca(this.input,this.pos) == 10) {
								this.line++;
								this.column = 1;
							} else {
								this.column++;
							}
							this.pos++;
						}
						var position = startPos;
						if(position == null) {
							position = new loreline_Position(this.startLine,this.startColumn,this.pos);
						}
						position.length = this.pos - position.offset;
						var token = new loreline_Token(loreline_TokenType.Dot,position);
						this.previous = token;
						return token;
					case 47:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpDivideAssign,position);
								this.previous = token;
								return token;
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 47) {
								return this.readLineComment();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 42) {
								return this.readMultiLineComment();
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpDivide,position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 58:
						var count = 1;
						while(count-- > 0 && this.pos < this.length) {
							if(HxOverrides.cca(this.input,this.pos) == 10) {
								this.line++;
								this.column = 1;
							} else {
								this.column++;
							}
							this.pos++;
						}
						var position = startPos;
						if(position == null) {
							position = new loreline_Position(this.startLine,this.startColumn,this.pos);
						}
						position.length = this.pos - position.offset;
						var token = new loreline_Token(loreline_TokenType.Colon,position);
						this.previous = token;
						return token;
					case 60:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpLessEq,position);
								this.previous = token;
								return token;
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpLess,position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 61:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpEquals,position);
								this.previous = token;
								return token;
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpAssign,position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 62:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 61) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpGreaterEq,position);
								this.previous = token;
								return token;
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpGreater,position);
								this.previous = token;
								return token;
							}
						}
						break;
					case 93:
						var count = 1;
						while(count-- > 0 && this.pos < this.length) {
							if(HxOverrides.cca(this.input,this.pos) == 10) {
								this.line++;
								this.column = 1;
							} else {
								this.column++;
							}
							this.pos++;
						}
						this.strictExprs.pop();
						var position = startPos;
						if(position == null) {
							position = new loreline_Position(this.startLine,this.startColumn,this.pos);
						}
						position.length = this.pos - position.offset;
						var token = new loreline_Token(loreline_TokenType.RBracket,position);
						this.previous = token;
						return token;
					case 124:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else if((this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 124) {
								var count = 2;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpOr(false),position);
								this.previous = token;
								return token;
							} else {
								var count = 1;
								while(count-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								this.error("Expected |",false);
								var position = startPos;
								if(position == null) {
									position = new loreline_Position(this.startLine,this.startColumn,this.pos);
								}
								position.length = this.pos - position.offset;
								var token = new loreline_Token(loreline_TokenType.OpOr(false),position);
								this.previous = token;
								return token;
							}
						}
						break;
					default:
						var c1 = c;
						if(c1 >= 48 && c1 <= 57) {
							return this.readNumber();
						} else {
							var c1 = c;
							if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
								return this.readIdentifier();
							} else {
								this.error("Unexpected character: " + String.fromCodePoint(c),true);
								return null;
							}
						}
					}
				}
			}
		}
	}
	,countIndentation: function() {
		var pos = this.pos;
		var spaces = 0;
		while(pos < this.length) {
			var c = HxOverrides.cca(this.input,pos);
			if(c == 32) {
				++spaces;
			} else if(c == 9) {
				spaces += 4;
			} else {
				break;
			}
			++pos;
		}
		if(pos >= this.length || HxOverrides.cca(this.input,pos) == 10 || HxOverrides.cca(this.input,pos) == 13) {
			return this.indentStack[this.indentStack.length - 1];
		}
		return spaces;
	}
	,parentBlockType: function() {
		var i = this.stack.length - 1;
		while(i >= 0) {
			if(this.stack[i] != 8 && this.stack[i] != 9 && this.stack[i] != 10) {
				switch(this.stack[i]) {
				case 0:case 1:
					return loreline_TokenType.KwBeat;
				case 2:case 3:
					return loreline_TokenType.KwState;
				case 4:case 5:
					return loreline_TokenType.KwCharacter;
				case 6:case 7:
					return loreline_TokenType.KwBeat;
				case 8:
					return loreline_TokenType.LBrace;
				case 9:
					return loreline_TokenType.Indent;
				case 10:
					return loreline_TokenType.LBracket;
				}
			}
			--i;
		}
		return loreline_TokenType.KwBeat;
	}
	,inBeat: function() {
		return this.parentBlockType() == loreline_TokenType.KwBeat;
	}
	,inStateOrCharacter: function() {
		var parent = this.parentBlockType();
		if(parent != loreline_TokenType.KwState) {
			return parent == loreline_TokenType.KwCharacter;
		} else {
			return true;
		}
	}
	,readLineBreak: function() {
		var start = new loreline_Position(this.startLine,this.startColumn,this.pos);
		if(HxOverrides.cca(this.input,this.pos) == 13) {
			var count = 1;
			while(count-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
			if(this.pos < this.length && HxOverrides.cca(this.input,this.pos) == 10) {
				var count = 1;
				while(count-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
			}
		} else {
			var count = 1;
			while(count-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
		}
		var position = start;
		if(position == null) {
			position = new loreline_Position(this.startLine,this.startColumn,this.pos);
		}
		position.length = this.pos - position.offset;
		var token = new loreline_Token(loreline_TokenType.LineBreak,position);
		this.previous = token;
		return token;
	}
	,isWhitespace: function(c) {
		if(c != 32) {
			return c == 9;
		} else {
			return true;
		}
	}
	,matchIdentifier: function(pos) {
		if(this.length == 0) {
			return null;
		}
		var firstChar = HxOverrides.cca(this.input,pos);
		if(!(firstChar >= 97 && firstChar <= 122 || firstChar >= 65 && firstChar <= 90 || firstChar == 95)) {
			return null;
		}
		var identifierLength = 1;
		while(identifierLength < this.length) {
			var c = HxOverrides.cca(this.input,pos + identifierLength);
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95 || c >= 48 && c <= 57)) {
				break;
			}
			++identifierLength;
		}
		return HxOverrides.substr(this.input,pos,identifierLength);
	}
	,skipWhitespaceAndComments: function(pos) {
		var startPos = pos;
		var foundContent = false;
		while(pos < this.length) {
			while(pos < this.length && (HxOverrides.cca(this.input,pos) == 32 || HxOverrides.cca(this.input,pos) == 9)) {
				++pos;
				foundContent = true;
			}
			if(pos < this.length - 1) {
				if(HxOverrides.cca(this.input,pos) == 47) {
					if(HxOverrides.cca(this.input,pos + 1) == 47) {
						pos = startPos;
						return pos;
					} else if(HxOverrides.cca(this.input,pos + 1) == 42) {
						pos += 2;
						foundContent = true;
						var commentClosed = false;
						while(pos < this.length - 1) {
							if(HxOverrides.cca(this.input,pos) == 42 && HxOverrides.cca(this.input,pos + 1) == 47) {
								pos += 2;
								commentClosed = true;
								break;
							}
							++pos;
						}
						if(!commentClosed) {
							pos = startPos;
							return pos;
						}
						continue;
					}
				}
			}
			break;
		}
		if(foundContent) {
			return pos;
		} else {
			return startPos;
		}
	}
	,isIfStart: function(pos) {
		var _gthis = this;
		pos = this.skipWhitespaceAndComments(pos);
		if(HxOverrides.cca(this.input,pos) != 105) {
			return false;
		}
		++pos;
		if(HxOverrides.cca(this.input,pos) != 102) {
			return false;
		}
		var startPos = ++pos;
		pos = this.skipWhitespaceAndComments(pos);
		if(pos < this.length && HxOverrides.cca(this.input,pos) == 33) {
			++pos;
			pos = this.skipWhitespaceAndComments(pos);
		}
		if(HxOverrides.cca(this.input,pos) == 40) {
			return true;
		}
		var tmp;
		if(pos == startPos) {
			var c = HxOverrides.cca(this.input,startPos);
			tmp = c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95;
		} else {
			tmp = false;
		}
		if(tmp) {
			return false;
		}
		var tmp;
		if(pos < this.length) {
			var c = HxOverrides.cca(this.input,pos);
			tmp = !(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95);
		} else {
			tmp = true;
		}
		if(tmp) {
			return false;
		}
		while(pos < this.length) {
			if(HxOverrides.cca(this.input,pos) == 40) {
				return true;
			} else {
				var result = true;
				var len = _gthis.length;
				if(pos >= len) {
					result = false;
				} else {
					var tmp;
					if(pos + 1 < len && HxOverrides.cca(_gthis.input,pos) == 111 && HxOverrides.cca(_gthis.input,pos + 1) == 114) {
						var c = HxOverrides.cca(_gthis.input,pos + 2);
						tmp = !(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95);
					} else {
						tmp = false;
					}
					if(tmp) {
						result = false;
					} else {
						var tmp1;
						if(pos + 2 < len && HxOverrides.cca(_gthis.input,pos) == 97 && HxOverrides.cca(_gthis.input,pos + 1) == 110 && HxOverrides.cca(_gthis.input,pos + 2) == 100) {
							var c1 = HxOverrides.cca(_gthis.input,pos + 3);
							tmp1 = !(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95);
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							result = false;
						} else {
							var c2 = HxOverrides.cca(_gthis.input,pos);
							if(!(c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90 || c2 == 95)) {
								result = false;
							} else {
								++pos;
								while(pos < _gthis.length) {
									c2 = HxOverrides.cca(_gthis.input,pos);
									if(!(c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90 || c2 == 95 || c2 >= 48 && c2 <= 57)) {
										break;
									}
									++pos;
								}
							}
						}
					}
				}
				if(!result) {
					return false;
				}
			}
			pos = this.skipWhitespaceAndComments(pos);
			if(pos >= this.length) {
				return true;
			}
			var c3 = HxOverrides.cca(this.input,pos);
			if(c3 == 46) {
				++pos;
				pos = this.skipWhitespaceAndComments(pos);
				var result1 = true;
				var len1 = _gthis.length;
				if(pos >= len1) {
					result1 = false;
				} else {
					var tmp2;
					if(pos + 1 < len1 && HxOverrides.cca(_gthis.input,pos) == 111 && HxOverrides.cca(_gthis.input,pos + 1) == 114) {
						var c4 = HxOverrides.cca(_gthis.input,pos + 2);
						tmp2 = !(c4 >= 97 && c4 <= 122 || c4 >= 65 && c4 <= 90 || c4 == 95);
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						result1 = false;
					} else {
						var tmp3;
						if(pos + 2 < len1 && HxOverrides.cca(_gthis.input,pos) == 97 && HxOverrides.cca(_gthis.input,pos + 1) == 110 && HxOverrides.cca(_gthis.input,pos + 2) == 100) {
							var c5 = HxOverrides.cca(_gthis.input,pos + 3);
							tmp3 = !(c5 >= 97 && c5 <= 122 || c5 >= 65 && c5 <= 90 || c5 == 95);
						} else {
							tmp3 = false;
						}
						if(tmp3) {
							result1 = false;
						} else {
							var c6 = HxOverrides.cca(_gthis.input,pos);
							if(!(c6 >= 97 && c6 <= 122 || c6 >= 65 && c6 <= 90 || c6 == 95)) {
								result1 = false;
							} else {
								++pos;
								while(pos < _gthis.length) {
									c6 = HxOverrides.cca(_gthis.input,pos);
									if(!(c6 >= 97 && c6 <= 122 || c6 >= 65 && c6 <= 90 || c6 == 95 || c6 >= 48 && c6 <= 57)) {
										break;
									}
									++pos;
								}
							}
						}
					}
				}
				if(!result1) {
					return true;
				}
				pos = this.skipWhitespaceAndComments(pos);
				if(pos >= this.length) {
					return true;
				}
				c3 = HxOverrides.cca(this.input,pos);
			}
			if(c3 == 91) {
				++pos;
				var bracketLevel = 1;
				while(pos < this.length && bracketLevel > 0) {
					c3 = HxOverrides.cca(this.input,pos);
					if(c3 == 91) {
						++bracketLevel;
					}
					if(c3 == 93) {
						--bracketLevel;
					}
					++pos;
				}
				pos = this.skipWhitespaceAndComments(pos);
				if(pos >= this.length) {
					return true;
				}
				c3 = HxOverrides.cca(this.input,pos);
			}
			var tmp4;
			if(c3 == 97 && HxOverrides.cca(this.input,pos + 1) == 110 && HxOverrides.cca(this.input,pos + 2) == 100) {
				var c7 = HxOverrides.cca(this.input,pos + 3);
				tmp4 = !(c7 >= 97 && c7 <= 122 || c7 >= 65 && c7 <= 90 || c7 == 95);
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				return true;
			}
			var tmp5;
			if(c3 == 111 && HxOverrides.cca(this.input,pos + 1) == 114) {
				var c8 = HxOverrides.cca(this.input,pos + 2);
				tmp5 = !(c8 >= 97 && c8 <= 122 || c8 >= 65 && c8 <= 90 || c8 == 95);
			} else {
				tmp5 = false;
			}
			if(tmp5) {
				return true;
			}
			if(c3 == 40 || c3 == 38 || c3 == 124 || HxOverrides.cca(this.input,pos + 1) == 61 && c3 == 61 || c3 == 62 || c3 == 60 || HxOverrides.cca(this.input,pos + 1) != 61 && (c3 == 43 || c3 == 45 || c3 == 42 || c3 == 47 || c3 == 123)) {
				return true;
			}
			if(c3 == 10 || c3 == 13 || pos >= this.length) {
				pos = startPos;
				return true;
			}
			return false;
		}
		return true;
	}
	,isIdentifierExpressionStart: function(pos) {
		var _gthis = this;
		pos = this.skipWhitespaceAndComments(pos);
		pos = this.skipWhitespaceAndComments(pos);
		if(pos >= this.length) {
			return false;
		}
		if(HxOverrides.cca(this.input,pos) == 40) {
			return true;
		}
		var result = true;
		if(pos >= _gthis.length) {
			result = false;
		} else {
			var c = HxOverrides.cca(_gthis.input,pos);
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95)) {
				result = false;
			} else {
				++pos;
				while(pos < _gthis.length) {
					c = HxOverrides.cca(_gthis.input,pos);
					if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95 || c >= 48 && c <= 57)) {
						break;
					}
					++pos;
				}
			}
		}
		if(!result) {
			return false;
		}
		while(pos < this.length) {
			pos = this.skipWhitespaceAndComments(pos);
			if(pos >= this.length) {
				return true;
			}
			var c = HxOverrides.cca(this.input,pos);
			if(!(c == 32 || c == 9) && c != 46 && c != 91 && c != 10 && c != 13 && c != 47) {
				return false;
			}
			if(c == 10 || c == 13 || c == 47 && pos + 1 < this.length && (HxOverrides.cca(this.input,pos + 1) == 47 || HxOverrides.cca(this.input,pos + 1) == 42)) {
				return true;
			}
			if(c == 46) {
				++pos;
				pos = this.skipWhitespaceAndComments(pos);
				if(pos >= this.length) {
					return true;
				}
				var result = true;
				if(pos >= _gthis.length) {
					result = false;
				} else {
					var c1 = HxOverrides.cca(_gthis.input,pos);
					if(!(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95)) {
						result = false;
					} else {
						++pos;
						while(pos < _gthis.length) {
							c1 = HxOverrides.cca(_gthis.input,pos);
							if(!(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95 || c1 >= 48 && c1 <= 57)) {
								break;
							}
							++pos;
						}
					}
				}
				if(!result) {
					return true;
				}
				continue;
			}
			if(c == 91) {
				++pos;
				var bracketLevel = 1;
				while(pos < this.length && bracketLevel > 0) {
					c = HxOverrides.cca(this.input,pos);
					if(c == 91) {
						++bracketLevel;
					}
					if(c == 93) {
						--bracketLevel;
					}
					++pos;
				}
				continue;
			}
			if(c == 32 || c == 9) {
				++pos;
				continue;
			}
			break;
		}
		return true;
	}
	,isTransitionStart: function(pos) {
		var startPos = pos;
		if(HxOverrides.cca(this.input,pos) != 45 || pos >= this.length - 1 || HxOverrides.cca(this.input,pos + 1) != 62) {
			return false;
		}
		pos += 2;
		pos = this.skipWhitespaceAndComments(pos);
		var tmp;
		if(pos < this.length) {
			var c = HxOverrides.cca(this.input,pos);
			tmp = !(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95);
		} else {
			tmp = true;
		}
		if(tmp) {
			pos = startPos;
			return false;
		}
		++pos;
		while(true) {
			var tmp;
			if(pos < this.length) {
				var c = HxOverrides.cca(this.input,pos);
				tmp = c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95 || c >= 48 && c <= 57;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			++pos;
		}
		pos = this.skipWhitespaceAndComments(pos);
		if(pos < this.length) {
			var c = HxOverrides.cca(this.input,pos);
			if(c != 10 && c != 13 && c != 32 && c != 9 && c != 47) {
				pos = startPos;
				return false;
			}
		}
		pos = startPos;
		return true;
	}
	,isCallStart: function(pos) {
		var _gthis = this;
		var startPos = pos;
		var result = true;
		if(pos >= _gthis.length) {
			result = false;
		} else {
			var c = HxOverrides.cca(_gthis.input,pos);
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95)) {
				result = false;
			} else {
				++pos;
				while(pos < _gthis.length) {
					c = HxOverrides.cca(_gthis.input,pos);
					if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95 || c >= 48 && c <= 57)) {
						break;
					}
					++pos;
				}
			}
		}
		if(!result) {
			pos = startPos;
			return false;
		}
		while(pos < this.length) {
			pos = this.skipWhitespaceAndComments(pos);
			if(pos >= this.length) {
				pos = startPos;
				return false;
			}
			var c = HxOverrides.cca(this.input,pos);
			if(c == 40) {
				pos = startPos;
				return true;
			}
			if(c == 46) {
				++pos;
				pos = this.skipWhitespaceAndComments(pos);
				var result = true;
				if(pos >= _gthis.length) {
					result = false;
				} else {
					var c1 = HxOverrides.cca(_gthis.input,pos);
					if(!(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95)) {
						result = false;
					} else {
						++pos;
						while(pos < _gthis.length) {
							c1 = HxOverrides.cca(_gthis.input,pos);
							if(!(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95 || c1 >= 48 && c1 <= 57)) {
								break;
							}
							++pos;
						}
					}
				}
				if(!result) {
					pos = startPos;
					return false;
				}
				continue;
			}
			if(c == 91) {
				++pos;
				while(pos < this.length) {
					if(HxOverrides.cca(this.input,pos) == 93) {
						++pos;
						break;
					}
					++pos;
				}
				continue;
			}
			pos = startPos;
			return false;
		}
		pos = startPos;
		return false;
	}
	,isAssignStart: function(pos) {
		var _gthis = this;
		var startPos = pos;
		var result = true;
		if(pos >= _gthis.length) {
			result = false;
		} else {
			var c = HxOverrides.cca(_gthis.input,pos);
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95)) {
				result = false;
			} else {
				++pos;
				while(pos < _gthis.length) {
					c = HxOverrides.cca(_gthis.input,pos);
					if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95 || c >= 48 && c <= 57)) {
						break;
					}
					++pos;
				}
			}
		}
		if(!result) {
			pos = startPos;
			return false;
		}
		while(pos < this.length) {
			pos = this.skipWhitespaceAndComments(pos);
			if(pos >= this.length) {
				pos = startPos;
				return false;
			}
			var c = HxOverrides.cca(this.input,pos);
			if(c == 61 || HxOverrides.cca(this.input,pos + 1) == 61 && (c == 43 || c == 45 || c == 42 || c == 47)) {
				pos = startPos;
				return true;
			}
			if(c == 46) {
				++pos;
				pos = this.skipWhitespaceAndComments(pos);
				var result = true;
				if(pos >= _gthis.length) {
					result = false;
				} else {
					var c1 = HxOverrides.cca(_gthis.input,pos);
					if(!(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95)) {
						result = false;
					} else {
						++pos;
						while(pos < _gthis.length) {
							c1 = HxOverrides.cca(_gthis.input,pos);
							if(!(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95 || c1 >= 48 && c1 <= 57)) {
								break;
							}
							++pos;
						}
					}
				}
				if(!result) {
					pos = startPos;
					return false;
				}
				continue;
			}
			if(c == 91) {
				++pos;
				while(pos < this.length) {
					if(HxOverrides.cca(this.input,pos) == 93) {
						++pos;
						break;
					}
					++pos;
				}
				continue;
			}
			pos = startPos;
			return false;
		}
		pos = startPos;
		return false;
	}
	,isColon: function(pos,skipWhitespaces) {
		if(skipWhitespaces == null) {
			skipWhitespaces = true;
		}
		if(skipWhitespaces) {
			while(pos < this.length && (HxOverrides.cca(this.input,pos) == 32 || HxOverrides.cca(this.input,pos) == 9)) ++pos;
		}
		if(pos < this.length) {
			return HxOverrides.cca(this.input,pos) == 58;
		} else {
			return false;
		}
	}
	,isAfterLabel: function(inSameLine) {
		if(inSameLine == null) {
			inSameLine = true;
		}
		var i = this.tokenized.length - 1;
		while(i >= 0) {
			var token = this.tokenized[i];
			if(!loreline_TokenTypeHelpers.isComment(token.type) && (inSameLine || token.type != loreline_TokenType.LineBreak && token.type != loreline_TokenType.Indent && token.type != loreline_TokenType.Unindent)) {
				if(token.type == loreline_TokenType.Colon && i > 0) {
					return loreline_TokenTypeHelpers.isIdentifier(this.tokenized[i - 1].type);
				} else {
					return false;
				}
			}
			--i;
		}
		return false;
	}
	,isAfterComma: function() {
		var i = this.tokenized.length - 1;
		while(i >= 0) {
			var token = this.tokenized[i];
			if(!loreline_TokenTypeHelpers.isComment(token.type) && token.type != loreline_TokenType.LineBreak && token.type != loreline_TokenType.Indent && token.type != loreline_TokenType.Unindent) {
				return token.type == loreline_TokenType.Comma;
			}
			--i;
		}
		return false;
	}
	,isAfterLBracket: function() {
		var i = this.tokenized.length - 1;
		while(i >= 0) {
			var token = this.tokenized[i];
			if(!loreline_TokenTypeHelpers.isComment(token.type) && token.type != loreline_TokenType.LineBreak && token.type != loreline_TokenType.Indent && token.type != loreline_TokenType.Unindent) {
				return token.type == loreline_TokenType.LBracket;
			}
			--i;
		}
		return false;
	}
	,isInsideBrackets: function() {
		var i = this.stack.length - 1;
		while(i >= 0 && this.stack[i] == 9) --i;
		if(i >= 0) {
			return this.stack[i] == 10;
		} else {
			return false;
		}
	}
	,followsAssignStart: function() {
		var i = this.tokenized.length - 1;
		while(i >= 0) {
			var token = this.tokenized[i];
			if(loreline_TokenTypeHelpers.isComment(token.type) || token.type == loreline_TokenType.Indent || token.type == loreline_TokenType.Unindent) {
				--i;
			} else if(loreline_TokenTypeHelpers.isAssignOp(token.type)) {
				return true;
			} else {
				return false;
			}
		}
		return false;
	}
	,followsOnlyLabelOrCommentsInLine: function() {
		var foundLabel = false;
		var i = this.tokenized.length - 1;
		while(i >= 0) {
			var token = this.tokenized[i];
			if(loreline_TokenTypeHelpers.isComment(token.type) || token.type == loreline_TokenType.Indent || token.type == loreline_TokenType.Unindent) {
				--i;
			} else if(!foundLabel && token.type == loreline_TokenType.Colon) {
				--i;
				if(i >= 0) {
					if(loreline_TokenTypeHelpers.isIdentifier(this.tokenized[i].type)) {
						foundLabel = true;
						--i;
					}
				} else {
					return false;
				}
			} else if(token.type == loreline_TokenType.LineBreak) {
				return true;
			} else {
				return false;
			}
		}
		return true;
	}
	,followsOnlyWhitespacesOrCommentsInLine: function() {
		var i = this.tokenized.length - 1;
		while(i >= 0) {
			var token = this.tokenized[i];
			if(loreline_TokenTypeHelpers.isComment(token.type) || token.type == loreline_TokenType.Indent || token.type == loreline_TokenType.Unindent) {
				--i;
			} else if(token.type == loreline_TokenType.LineBreak) {
				return true;
			} else {
				return false;
			}
		}
		return true;
	}
	,hasNonSpecialChar: function(str) {
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			var found = false;
			var code = HxOverrides.cca(str,i);
			var _g2 = 0;
			var _g3 = loreline_Lexer.hasNonSpecialChar_specialChars.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(code == HxOverrides.cca(loreline_Lexer.hasNonSpecialChar_specialChars,j)) {
					found = true;
					break;
				}
			}
			if(!found) {
				return true;
			}
		}
		return false;
	}
	,isNumber: function(value) {
		var pos = 0;
		var length = value.length;
		while(true) {
			var tmp;
			if(pos < length) {
				var c = HxOverrides.cca(value,pos);
				tmp = c >= 48 && c <= 57;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			++pos;
		}
		var tmp;
		if(pos < length && HxOverrides.cca(value,pos) == 46 && pos + 1 < length) {
			var c = HxOverrides.cca(value,pos + 1);
			tmp = c >= 48 && c <= 57;
		} else {
			tmp = false;
		}
		if(tmp) {
			++pos;
			while(true) {
				var tmp;
				if(pos < length) {
					var c = HxOverrides.cca(value,pos);
					tmp = c >= 48 && c <= 57;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				++pos;
			}
		}
		return pos == length;
	}
	,makeLooseOrStrictAfterBracket: function() {
		var i = this.tokenized.length - 1;
		while(i >= 0) {
			var token = this.tokenized[i];
			var _g = token.type;
			switch(_g._hx_index) {
			case 12:
				var _g1 = _g.name;
				this.strictExprs.push(1);
				return;
			case 39:case 41:
				this.strictExprs.push(1);
				return;
			case 42:
				var _g2 = _g.content;
				break;
			case 43:
				var _g3 = _g.content;
				break;
			case 44:case 45:case 46:
				break;
			default:
				this.strictExprs.push(0);
				return;
			}
			--i;
		}
		this.strictExprs.push(2);
	}
	,makeStrictIfFollowingCallable: function() {
		if(this.followsCallableOrIndexable()) {
			this.strictExprs.push(1);
		} else {
			this.strictExprs.push(2);
		}
	}
	,followsCallableOrIndexable: function() {
		var i = this.tokenized.length - 1;
		while(i >= 0) {
			var token = this.tokenized[i];
			var _g = token.type;
			switch(_g._hx_index) {
			case 12:
				var _g1 = _g.name;
				return true;
			case 39:case 41:
				return true;
			case 42:
				var _g2 = _g.content;
				break;
			case 43:
				var _g3 = _g.content;
				break;
			case 44:case 45:case 46:
				break;
			default:
				return false;
			}
			--i;
		}
		return false;
	}
	,isStrict: function() {
		var i = this.strictExprs.length - 1;
		while(i >= 0 && this.strictExprs[i] == 2) --i;
		if(i >= 0) {
			return this.strictExprs[i] == 1;
		} else {
			return false;
		}
	}
	,tryReadUnquotedString: function() {
		if(this.isStrict()) {
			return null;
		}
		var c = HxOverrides.cca(this.input,this.pos);
		var cc = this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0;
		if(c == 47 && this.pos < this.length - 1) {
			var next = HxOverrides.cca(this.input,this.pos + 1);
			if(next == 47 || next == 42) {
				return null;
			}
		}
		if(c == 123 || c == 125 || c == 91 || c == 93 || c == 34 || c == 58 || (c == 32 || c == 9)) {
			return null;
		}
		var parent = this.parentBlockType();
		if(parent != loreline_TokenType.KwBeat && parent != loreline_TokenType.KwState && parent != loreline_TokenType.KwCharacter) {
			return null;
		}
		var inBrackets = this.isInsideBrackets();
		var isAssignValue = this.followsAssignStart();
		var isValue = parent == loreline_TokenType.KwState || parent == loreline_TokenType.KwCharacter || inBrackets || isAssignValue;
		if(isValue) {
			if(this.isCallStart(this.pos)) {
				return null;
			}
		} else if(this.isIdentifierExpressionStart(this.pos) || this.isIfStart(this.pos) || this.isCallStart(this.pos) || this.isAssignStart(this.pos)) {
			return null;
		}
		if(!isValue) {
			if(c == 61 || cc == 61 && (c == 43 || c == 45 || c == 42 || c == 47)) {
				return null;
			}
		}
		var identifier = this.matchIdentifier(this.pos);
		if(identifier != null) {
			if(!isValue) {
				if(identifier != "if" && identifier != "null" && identifier != "true" && identifier != "false" && Object.prototype.hasOwnProperty.call(loreline_Lexer.KEYWORDS.h,identifier)) {
					return null;
				}
				if(this.isColon(this.pos + identifier.length)) {
					return null;
				}
			}
		}
		var allowTags = !isValue;
		var isDialogue = false;
		if(isValue) {
			if(inBrackets) {
				if(!this.followsOnlyWhitespacesOrCommentsInLine() && !this.isAfterComma() && !this.isAfterLBracket()) {
					return null;
				}
			} else if(!isAssignValue && !this.isAfterLabel() && !this.isAfterComma()) {
				return null;
			}
		} else {
			isDialogue = this.followsOnlyLabelOrCommentsInLine();
			if(!isDialogue && !this.followsOnlyWhitespacesOrCommentsInLine()) {
				return null;
			}
			if(!isDialogue) {
				if(cc == 62 && c == 45) {
					return null;
				}
			}
		}
		var start = new loreline_Position(this.startLine,this.startColumn,this.pos);
		var buf_b = "";
		var attachments = [];
		var startLine = this.line;
		var startColumn = this.column;
		var startPos = this.pos;
		var escaped = false;
		var tagStart = -1;
		var tagIsClosing = false;
		var currentColumn = this.column;
		var currentLine = this.line;
		var valid = true;
		var hasContent = false;
		while(this.pos < this.length) {
			var c = HxOverrides.cca(this.input,this.pos);
			var isSpace = c == 32 || c == 9;
			if(!hasContent) {
				if(!isSpace && tagStart == -1 && (c != 60 || !allowTags)) {
					hasContent = true;
				}
			}
			if(escaped) {
				buf_b += String.fromCodePoint(92);
				buf_b += String.fromCodePoint(c);
				escaped = false;
				var count = 1;
				while(count-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				currentColumn += 2;
			} else if(c == 92) {
				escaped = true;
				var count1 = 1;
				while(count1-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
			} else if(tagStart == -1 && isSpace && !hasContent && attachments.length == 0) {
				var count2 = 1;
				while(count2-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
			} else if(tagStart == -1 && (c == 10 || c == 13 || c == 123)) {
				break;
			} else if(tagStart == -1 && !isValue && this.isIfStart(this.pos)) {
				break;
			} else if(tagStart == -1 && (c == 47 && this.pos < this.length - 1 && (HxOverrides.cca(this.input,this.pos + 1) == 47 || HxOverrides.cca(this.input,this.pos + 1) == 42))) {
				break;
			} else if(tagStart == -1 && c == 45 && this.pos < this.length - 1 && HxOverrides.cca(this.input,this.pos + 1) == 62 && this.isTransitionStart(this.pos)) {
				break;
			} else if(tagStart == -1 && isValue && (c == 44 || c == 93 || c == 125)) {
				break;
			} else if(allowTags && c == 60) {
				if(tagStart != -1) {
					this.error("Unexpected < inside tag",true);
				}
				var nextChar = this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0;
				tagIsClosing = nextChar == 47;
				var checkPos = this.pos + (tagIsClosing ? 2 : 1);
				if(checkPos < this.length) {
					var nameStart = HxOverrides.cca(this.input,checkPos);
					if(nameStart >= 97 && nameStart <= 122 || nameStart >= 65 && nameStart <= 90 || nameStart == 95 || nameStart == 95 || nameStart == 36 || tagIsClosing && nameStart == 62) {
						tagStart = buf_b.length;
					}
				}
				buf_b += String.fromCodePoint(c);
				var count3 = 1;
				while(count3-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				++currentColumn;
			} else if(allowTags && c == 62) {
				buf_b += String.fromCodePoint(c);
				var count4 = 1;
				while(count4-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				++currentColumn;
				if(tagStart != -1) {
					attachments.push(loreline_LStringAttachment.Tag(tagIsClosing,tagStart,buf_b.length - tagStart));
					tagStart = -1;
				}
			} else if(c == 36 && !escaped) {
				var interpStart = buf_b.length;
				var interpLine = currentLine;
				var interpColumn = currentColumn;
				var tokenStartPos = this.pos;
				try {
					var count5 = 1;
					while(count5-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					++currentColumn;
					if(HxOverrides.cca(this.input,this.pos) == 123) {
						var count6 = 1;
						while(count6-- > 0 && this.pos < this.length) {
							if(HxOverrides.cca(this.input,this.pos) == 10) {
								this.line++;
								this.column = 1;
							} else {
								this.column++;
							}
							this.pos++;
						}
						++currentColumn;
						var interpPos = new loreline_Position(interpLine,interpColumn + 2,this.pos);
						var tokens = this.readComplexInterpolation(interpPos);
						var interpLength = this.pos - tokenStartPos;
						attachments.push(loreline_LStringAttachment.Interpolation(true,tagStart != -1,tokens,interpStart,interpLength));
						buf_b += Std.string(HxOverrides.substr(this.input,tokenStartPos,interpLength));
					} else {
						var c1 = HxOverrides.cca(this.input,this.pos);
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							var interpPos1 = new loreline_Position(interpLine,interpColumn + 1,this.pos);
							var tokens1 = this.readFieldAccessInterpolation(interpPos1);
							var interpLength1 = this.pos - tokenStartPos;
							attachments.push(loreline_LStringAttachment.Interpolation(false,tagStart != -1,tokens1,interpStart,interpLength1));
							buf_b += Std.string(HxOverrides.substr(this.input,tokenStartPos,interpLength1));
						} else {
							this.error("Expected identifier or { after $",false);
							var interpLength2 = this.pos - tokenStartPos;
							attachments.push(loreline_LStringAttachment.Interpolation(false,tagStart != -1,[],interpStart,interpLength2));
							buf_b += Std.string(HxOverrides.substr(this.input,tokenStartPos,interpLength2));
						}
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g).unwrap();
					if(((_g1) instanceof loreline_LexerError)) {
						var e = _g1;
						if(e.pos == null) {
							e.pos = new loreline_Position(interpLine,interpColumn,this.pos);
						}
						throw haxe_Exception.thrown(e);
					} else {
						throw _g;
					}
				}
				currentColumn = interpColumn + (this.pos - tokenStartPos);
			} else {
				if(c == 10) {
					++currentLine;
					currentColumn = 1;
				} else {
					++currentColumn;
				}
				buf_b += String.fromCodePoint(c);
				var count7 = 1;
				while(count7-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
			}
		}
		if(valid) {
			var content = buf_b;
			var rawContentLength = content.length;
			content = StringTools.rtrim(content);
			var contentLength = content.length;
			if(contentLength > 0 && this.hasNonSpecialChar(content) && !this.isNumber(content) && content != "null" && content != "true" && content != "false") {
				attachments.sort(loreline_Lexer.compareAttachments);
				var type = attachments.length > 0 ? attachments : null;
				var position = start;
				if(position == null) {
					position = new loreline_Position(this.startLine,this.startColumn,this.pos);
				}
				position.length = this.pos - position.offset;
				var token = new loreline_Token(loreline_TokenType.LString(0,content,type),position);
				this.previous = token;
				var token1 = token;
				token1.pos.length += contentLength - rawContentLength;
				return token1;
			}
		}
		this.line = startLine;
		this.column = startColumn;
		this.pos = startPos;
		return null;
	}
	,readString: function(stringStart) {
		var count = 1;
		while(count-- > 0 && this.pos < this.length) {
			if(HxOverrides.cca(this.input,this.pos) == 10) {
				this.line++;
				this.column = 1;
			} else {
				this.column++;
			}
			this.pos++;
		}
		var buf_b = "";
		var attachments = [];
		var escaped = false;
		var tagStart = -1;
		var tagIsClosing = false;
		var currentColumn = stringStart.column + 1;
		var currentLine = stringStart.line;
		var allowTags = this.parentBlockType() == loreline_TokenType.KwBeat;
		while(this.pos < this.length) {
			var c = HxOverrides.cca(this.input,this.pos);
			if(escaped) {
				buf_b += String.fromCodePoint(92);
				buf_b += String.fromCodePoint(c);
				escaped = false;
				var count = 1;
				while(count-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				currentColumn += 2;
			} else if(c == 92) {
				escaped = true;
				var count1 = 1;
				while(count1-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
			} else if(c == 34 && tagStart == -1) {
				var count2 = 1;
				while(count2-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				attachments.sort(loreline_Lexer.compareAttachments);
				var type = attachments.length > 0 ? attachments : null;
				var position = stringStart;
				if(position == null) {
					position = new loreline_Position(this.startLine,this.startColumn,this.pos);
				}
				position.length = this.pos - position.offset;
				var token = new loreline_Token(loreline_TokenType.LString(1,buf_b,type),position);
				this.previous = token;
				return token;
			} else if(allowTags && c == 60) {
				if(tagStart != -1) {
					this.error("Unexpected < inside tag",true);
				}
				var nextChar = this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0;
				tagIsClosing = nextChar == 47;
				var checkPos = this.pos + (tagIsClosing ? 2 : 1);
				if(checkPos < this.length) {
					var nameStart = HxOverrides.cca(this.input,checkPos);
					if(nameStart >= 97 && nameStart <= 122 || nameStart >= 65 && nameStart <= 90 || nameStart == 95 || nameStart == 95 || nameStart == 36 || tagIsClosing && nameStart == 62) {
						tagStart = buf_b.length;
					}
				}
				buf_b += String.fromCodePoint(c);
				var count3 = 1;
				while(count3-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				++currentColumn;
			} else if(c == 62) {
				buf_b += String.fromCodePoint(c);
				var count4 = 1;
				while(count4-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				++currentColumn;
				if(tagStart != -1) {
					attachments.push(loreline_LStringAttachment.Tag(tagIsClosing,tagStart,buf_b.length - tagStart));
					tagStart = -1;
				}
			} else if(c == 36 && !escaped) {
				var interpStart = buf_b.length;
				var interpLine = currentLine;
				var interpColumn = currentColumn;
				var tokenStartPos = this.pos;
				try {
					var count5 = 1;
					while(count5-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					++currentColumn;
					if(HxOverrides.cca(this.input,this.pos) == 123) {
						var count6 = 1;
						while(count6-- > 0 && this.pos < this.length) {
							if(HxOverrides.cca(this.input,this.pos) == 10) {
								this.line++;
								this.column = 1;
							} else {
								this.column++;
							}
							this.pos++;
						}
						++currentColumn;
						var interpPos = new loreline_Position(interpLine,interpColumn + 2,this.pos);
						var tokens = this.readComplexInterpolation(interpPos);
						var interpLength = this.pos - tokenStartPos;
						attachments.push(loreline_LStringAttachment.Interpolation(true,tagStart != -1,tokens,interpStart,interpLength));
						buf_b += Std.string(HxOverrides.substr(this.input,tokenStartPos,interpLength));
					} else {
						var c1 = HxOverrides.cca(this.input,this.pos);
						if(c1 >= 97 && c1 <= 122 || c1 >= 65 && c1 <= 90 || c1 == 95) {
							var interpPos1 = new loreline_Position(interpLine,interpColumn + 1,this.pos);
							var tokens1 = this.readFieldAccessInterpolation(interpPos1);
							var interpLength1 = this.pos - tokenStartPos;
							attachments.push(loreline_LStringAttachment.Interpolation(false,tagStart != -1,tokens1,interpStart,interpLength1));
							buf_b += Std.string(HxOverrides.substr(this.input,tokenStartPos,interpLength1));
						} else {
							this.error("Expected identifier or { after $",false);
							var interpLength2 = this.pos - tokenStartPos;
							attachments.push(loreline_LStringAttachment.Interpolation(false,tagStart != -1,[],interpStart,interpLength2));
							buf_b += Std.string(HxOverrides.substr(this.input,tokenStartPos,interpLength2));
						}
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g).unwrap();
					if(((_g1) instanceof loreline_LexerError)) {
						var e = _g1;
						if(e.pos == null) {
							e.pos = new loreline_Position(interpLine,interpColumn,this.pos);
						}
						throw haxe_Exception.thrown(e);
					} else {
						throw _g;
					}
				}
				currentColumn = interpColumn + (this.pos - tokenStartPos);
			} else {
				if(c == 10) {
					++currentLine;
					currentColumn = 1;
				} else {
					++currentColumn;
				}
				buf_b += String.fromCodePoint(c);
				var count7 = 1;
				while(count7-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
			}
		}
		this.error("Unterminated string",true);
		return null;
	}
	,readComplexInterpolation: function(interpStart) {
		this.strictExprs.push(1);
		var tokens = [];
		var braceLevel = 1;
		var currentColumn = interpStart.column;
		var currentLine = interpStart.line;
		while(this.pos < this.length && braceLevel > 0) {
			if(HxOverrides.cca(this.input,this.pos) == 34) {
				var stringPos = new loreline_Position(currentLine,currentColumn,this.pos);
				tokens.push(this.readString(stringPos));
				currentColumn += this.pos - stringPos.offset;
				continue;
			}
			var token = this.nextToken();
			tokens.push(token);
			if(token.type == loreline_TokenType.LineBreak) {
				++currentLine;
				currentColumn = 1;
			} else if(!(token.type == loreline_TokenType.Indent || token.type == loreline_TokenType.Unindent)) {
				var tokenLength;
				var _g = token.type;
				switch(_g._hx_index) {
				case 8:
					var _g1 = _g.attachments;
					var q = _g.quotes;
					var s = _g.s;
					tokenLength = s.length + (q != 0 ? 2 : 0);
					break;
				case 9:
					var n = _g.n;
					tokenLength = (n == null ? "null" : "" + n).length;
					break;
				case 12:
					var name = _g.name;
					tokenLength = name.length;
					break;
				default:
					tokenLength = 1;
				}
				currentColumn += tokenLength;
			}
			switch(token.type._hx_index) {
			case 36:
				++braceLevel;
				break;
			case 37:
				--braceLevel;
				break;
			default:
			}
			if(token.type == loreline_TokenType.Eof) {
				this.error("Unterminated interpolation expression",true);
			}
		}
		tokens.pop();
		this.strictExprs.pop();
		return tokens;
	}
	,nextTokenWithPosition: function(startPos) {
		var savedLine = this.line;
		var savedColumn = this.column;
		var savedPos = this.pos;
		var token = this.nextToken();
		var len = token.pos.length;
		var tokenOffset = this.pos - savedPos;
		token.pos = new loreline_Position(startPos.line,startPos.column + tokenOffset,startPos.offset + tokenOffset,len);
		this.line = savedLine;
		this.column = savedColumn;
		return token;
	}
	,readFieldAccessInterpolation: function(stringStart) {
		var tokens = [];
		var c = HxOverrides.cca(this.input,this.pos);
		if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95)) {
			this.error("Expected identifier in field access",true);
		}
		tokens.push(this.readIdentifierTokenInInterpolation(stringStart));
		_hx_loop1: while(this.pos < this.length) {
			var _g = HxOverrides.cca(this.input,this.pos);
			if(_g == null) {
				break;
			} else {
				switch(_g) {
				case 40:
					var parenPos = this.makePositionRelativeTo(stringStart);
					tokens.push(new loreline_Token(loreline_TokenType.LParen,parenPos));
					var count = 1;
					while(count-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					this.stack.push(8);
					this.strictExprs.push(1);
					var parenLevel = 1;
					while(this.pos < this.length && parenLevel > 0) {
						if(HxOverrides.cca(this.input,this.pos) == 41) {
							--parenLevel;
							if(parenLevel == 0) {
								var closeParenPos = this.makePositionRelativeTo(stringStart);
								tokens.push(new loreline_Token(loreline_TokenType.RParen,closeParenPos));
								var count1 = 1;
								while(count1-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								this.stack.pop();
								this.strictExprs.pop();
								break;
							}
						} else if(HxOverrides.cca(this.input,this.pos) == 40) {
							++parenLevel;
						}
						if(HxOverrides.cca(this.input,this.pos) == 44) {
							var commaPos = this.makePositionRelativeTo(stringStart);
							tokens.push(new loreline_Token(loreline_TokenType.Comma,commaPos));
							var count2 = 1;
							while(count2-- > 0 && this.pos < this.length) {
								if(HxOverrides.cca(this.input,this.pos) == 10) {
									this.line++;
									this.column = 1;
								} else {
									this.column++;
								}
								this.pos++;
							}
						} else {
							tokens.push(this.nextTokenWithPosition(stringStart));
						}
					}
					if(parenLevel > 0) {
						this.error("Unterminated function call in interpolation",true);
					}
					break;
				case 46:
					var tmp;
					if(this.pos + 1 < this.length) {
						var c = HxOverrides.cca(this.input,this.pos + 1);
						tmp = c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95;
					} else {
						tmp = false;
					}
					if(tmp) {
						var dotPos = this.makePositionRelativeTo(stringStart);
						var count3 = 1;
						while(count3-- > 0 && this.pos < this.length) {
							if(HxOverrides.cca(this.input,this.pos) == 10) {
								this.line++;
								this.column = 1;
							} else {
								this.column++;
							}
							this.pos++;
						}
						tokens.push(new loreline_Token(loreline_TokenType.Dot,dotPos));
						tokens.push(this.readIdentifierTokenInInterpolation(stringStart));
					} else {
						break _hx_loop1;
					}
					break;
				case 91:
					var bracketPos = this.makePositionRelativeTo(stringStart);
					tokens.push(new loreline_Token(loreline_TokenType.LBracket,bracketPos));
					var count4 = 1;
					while(count4-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					this.stack.push(10);
					this.strictExprs.push(1);
					var bracketLevel = 1;
					while(this.pos < this.length && bracketLevel > 0) {
						if(HxOverrides.cca(this.input,this.pos) == 93) {
							--bracketLevel;
							if(bracketLevel == 0) {
								var closeBracketPos = this.makePositionRelativeTo(stringStart);
								tokens.push(new loreline_Token(loreline_TokenType.RBracket,closeBracketPos));
								var count5 = 1;
								while(count5-- > 0 && this.pos < this.length) {
									if(HxOverrides.cca(this.input,this.pos) == 10) {
										this.line++;
										this.column = 1;
									} else {
										this.column++;
									}
									this.pos++;
								}
								this.stack.pop();
								this.strictExprs.pop();
								break;
							}
						} else if(HxOverrides.cca(this.input,this.pos) == 91) {
							++bracketLevel;
						}
						tokens.push(this.nextTokenWithPosition(stringStart));
					}
					if(bracketLevel > 0) {
						this.error("Unterminated array access in interpolation",true);
					}
					break;
				default:
					break _hx_loop1;
				}
			}
		}
		return tokens;
	}
	,readIdentifierTokenInInterpolation: function(stringStart) {
		var startPos = this.makePositionRelativeTo(stringStart);
		var startOffset = this.pos;
		while(this.pos < this.length) {
			var c = HxOverrides.cca(this.input,this.pos);
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95 || c >= 48 && c <= 57)) {
				break;
			}
			var count = 1;
			while(count-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
		}
		var name = HxOverrides.substr(this.input,startOffset,this.pos - startOffset);
		var tokenType = Object.prototype.hasOwnProperty.call(loreline_Lexer.KEYWORDS.h,name) ? loreline_Lexer.KEYWORDS.h[name] : loreline_TokenType.Identifier(name);
		return new loreline_Token(tokenType,startPos);
	}
	,makePositionRelativeTo: function(stringStart) {
		var line = stringStart.line;
		var column = stringStart.column;
		var i = stringStart.offset;
		while(i < this.pos) {
			if(HxOverrides.cca(this.input,i) == 10) {
				++line;
				column = 1;
			} else {
				++column;
			}
			++i;
		}
		return new loreline_Position(line,column,this.pos,stringStart.length);
	}
	,readLineComment: function() {
		var start = new loreline_Position(this.startLine,this.startColumn,this.pos);
		var count = 2;
		while(count-- > 0 && this.pos < this.length) {
			if(HxOverrides.cca(this.input,this.pos) == 10) {
				this.line++;
				this.column = 1;
			} else {
				this.column++;
			}
			this.pos++;
		}
		var contentStart = this.pos;
		while(this.pos < this.length) {
			var c = HxOverrides.cca(this.input,this.pos);
			if(c == 10 || c == 13) {
				break;
			}
			var count = 1;
			while(count-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
		}
		var type = loreline_TokenType.CommentLine(HxOverrides.substr(this.input,contentStart,this.pos - contentStart));
		var position = start;
		if(position == null) {
			position = new loreline_Position(this.startLine,this.startColumn,this.pos);
		}
		position.length = this.pos - position.offset;
		var token = new loreline_Token(type,position);
		this.previous = token;
		return token;
	}
	,readMultiLineComment: function() {
		var start = new loreline_Position(this.startLine,this.startColumn,this.pos);
		var count = 2;
		while(count-- > 0 && this.pos < this.length) {
			if(HxOverrides.cca(this.input,this.pos) == 10) {
				this.line++;
				this.column = 1;
			} else {
				this.column++;
			}
			this.pos++;
		}
		var contentStart = this.pos;
		var nestLevel = 1;
		while(this.pos < this.length && nestLevel > 0) if(HxOverrides.cca(this.input,this.pos) == 42 && (this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 47) {
			--nestLevel;
			if(nestLevel == 0) {
				var content = HxOverrides.substr(this.input,contentStart,this.pos - contentStart);
				var count = 2;
				while(count-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
				var position = start;
				if(position == null) {
					position = new loreline_Position(this.startLine,this.startColumn,this.pos);
				}
				position.length = this.pos - position.offset;
				var token = new loreline_Token(loreline_TokenType.CommentMultiLine(content),position);
				this.previous = token;
				return token;
			}
			var count1 = 2;
			while(count1-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
		} else if(HxOverrides.cca(this.input,this.pos) == 47 && (this.pos + 1 < this.length ? HxOverrides.cca(this.input,this.pos + 1) : 0) == 42) {
			++nestLevel;
			var count2 = 2;
			while(count2-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
		} else {
			var count3 = 1;
			while(count3-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
		}
		this.error("Unterminated multi-line comment",true);
		return null;
	}
	,readNumber: function() {
		var start = new loreline_Position(this.startLine,this.startColumn,this.pos);
		var startPos = this.pos;
		while(true) {
			var tmp;
			if(this.pos < this.length) {
				var c = HxOverrides.cca(this.input,this.pos);
				tmp = c >= 48 && c <= 57;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			var count = 1;
			while(count-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
		}
		var tmp;
		if(this.pos < this.length && HxOverrides.cca(this.input,this.pos) == 46 && this.pos + 1 < this.length) {
			var c = HxOverrides.cca(this.input,this.pos + 1);
			tmp = c >= 48 && c <= 57;
		} else {
			tmp = false;
		}
		if(tmp) {
			var count = 1;
			while(count-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
			while(true) {
				var tmp;
				if(this.pos < this.length) {
					var c = HxOverrides.cca(this.input,this.pos);
					tmp = c >= 48 && c <= 57;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				var count = 1;
				while(count-- > 0 && this.pos < this.length) {
					if(HxOverrides.cca(this.input,this.pos) == 10) {
						this.line++;
						this.column = 1;
					} else {
						this.column++;
					}
					this.pos++;
				}
			}
		}
		var type = loreline_TokenType.LNumber(parseFloat(HxOverrides.substr(this.input,startPos,this.pos - startPos)));
		var position = start;
		if(position == null) {
			position = new loreline_Position(this.startLine,this.startColumn,this.pos);
		}
		position.length = this.pos - position.offset;
		var token = new loreline_Token(type,position);
		this.previous = token;
		var token1 = token;
		return token1;
	}
	,readIdentifier: function() {
		var start = new loreline_Position(this.startLine,this.startColumn,this.pos);
		var startPos = this.pos;
		while(this.pos < this.length) {
			var c = HxOverrides.cca(this.input,this.pos);
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95 || c >= 48 && c <= 57)) {
				break;
			}
			var count = 1;
			while(count-- > 0 && this.pos < this.length) {
				if(HxOverrides.cca(this.input,this.pos) == 10) {
					this.line++;
					this.column = 1;
				} else {
					this.column++;
				}
				this.pos++;
			}
		}
		var word = HxOverrides.substr(this.input,startPos,this.pos - startPos);
		var tokenType = Object.prototype.hasOwnProperty.call(loreline_Lexer.KEYWORDS.h,word) ? loreline_Lexer.KEYWORDS.h[word] : loreline_TokenType.Identifier(word);
		var position = start;
		if(position == null) {
			position = new loreline_Position(this.startLine,this.startColumn,this.pos);
		}
		position.length = this.pos - position.offset;
		var token = new loreline_Token(tokenType,position);
		this.previous = token;
		return token;
	}
	,makePosition: function() {
		return new loreline_Position(this.startLine,this.startColumn,this.pos);
	}
	,makeToken: function(type,position) {
		if(position == null) {
			position = new loreline_Position(this.startLine,this.startColumn,this.pos);
		}
		position.length = this.pos - position.offset;
		var token = new loreline_Token(type,position);
		this.previous = token;
		return token;
	}
	,advance: function(count) {
		if(count == null) {
			count = 1;
		}
		while(count-- > 0 && this.pos < this.length) {
			if(HxOverrides.cca(this.input,this.pos) == 10) {
				this.line++;
				this.column = 1;
			} else {
				this.column++;
			}
			this.pos++;
		}
	}
	,peek: function(offset) {
		if(offset == null) {
			offset = 1;
		}
		if(this.pos + offset < this.length) {
			return HxOverrides.cca(this.input,this.pos + offset);
		} else {
			return 0;
		}
	}
	,error: function(message,fatal) {
		var err = new loreline_LexerError(message,new loreline_Position(this.startLine,this.startColumn,this.pos));
		if(this.errors == null) {
			this.errors = [];
		}
		this.errors.push(err);
		if(fatal) {
			throw haxe_Exception.thrown(err);
		}
		return err;
	}
	,getErrors: function() {
		if(this.errors == null) {
			this.errors = [];
		}
		return this.errors;
	}
	,skipWhitespace: function() {
		while(this.pos < this.length) {
			var _g = HxOverrides.cca(this.input,this.pos);
			if(_g == null) {
				return;
			} else {
				switch(_g) {
				case 9:case 32:
					var count = 1;
					while(count-- > 0 && this.pos < this.length) {
						if(HxOverrides.cca(this.input,this.pos) == 10) {
							this.line++;
							this.column = 1;
						} else {
							this.column++;
						}
						this.pos++;
					}
					break;
				default:
					return;
				}
			}
		}
	}
	,isDigit: function(c) {
		if(c >= 48) {
			return c <= 57;
		} else {
			return false;
		}
	}
	,isIdentifierStart: function(c) {
		if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90)) {
			return c == 95;
		} else {
			return true;
		}
	}
	,isIdentifierPart: function(c) {
		if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95)) {
			if(c >= 48) {
				return c <= 57;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: loreline_Lexer
};
var loreline_Node = function(id,pos) {
	this.id = -1;
	this.id = id;
	this.pos = pos;
};
loreline_Node.__name__ = "loreline.Node";
loreline_Node.prototype = {
	toJson: function() {
		var c = js_Boot.getClass(this);
		return { id : this.id, type : c.__name__.split(".").pop(), pos : this.pos.toJson()};
	}
	,each: function(handleNode) {
	}
	,__class__: loreline_Node
};
var loreline_Comment = function(id,pos,content,multiline) {
	loreline_Node.call(this,id,pos);
	this.content = content;
	this.multiline = multiline;
};
loreline_Comment.__name__ = "loreline.Comment";
loreline_Comment.__super__ = loreline_Node;
loreline_Comment.prototype = $extend(loreline_Node.prototype,{
	toJson: function() {
		var json = loreline_Node.prototype.toJson.call(this);
		json.content = this.content;
		json.multiline = this.multiline;
		return json;
	}
	,__class__: loreline_Comment
});
var loreline_AstNode = function(id,pos,leadingComments,trailingComments) {
	loreline_Node.call(this,id,pos);
	this.leadingComments = leadingComments;
	this.trailingComments = trailingComments;
};
loreline_AstNode.__name__ = "loreline.AstNode";
loreline_AstNode.__super__ = loreline_Node;
loreline_AstNode.prototype = $extend(loreline_Node.prototype,{
	each: function(handleNode) {
		loreline_Node.prototype.each.call(this,handleNode);
		if(this.leadingComments != null) {
			var _g = 0;
			var _g1 = this.leadingComments;
			while(_g < _g1.length) {
				var comment = _g1[_g];
				++_g;
				handleNode(comment,this);
				comment.each(handleNode);
			}
		}
		if(this.trailingComments != null) {
			var _g = 0;
			var _g1 = this.trailingComments;
			while(_g < _g1.length) {
				var comment = _g1[_g];
				++_g;
				handleNode(comment,this);
				comment.each(handleNode);
			}
		}
	}
	,toJson: function() {
		var json = loreline_Node.prototype.toJson.call(this);
		if(this.leadingComments != null && this.leadingComments.length > 0 || this.trailingComments != null && this.trailingComments.length > 0) {
			var comments = { };
			if(this.leadingComments != null && this.leadingComments.length > 0) {
				var _g = [];
				var _g1 = 0;
				var _g2 = this.leadingComments;
				while(_g1 < _g2.length) {
					var c = _g2[_g1];
					++_g1;
					_g.push(c.toJson());
				}
				comments.leading = _g;
			}
			if(this.trailingComments != null && this.trailingComments.length > 0) {
				var _g = [];
				var _g1 = 0;
				var _g2 = this.trailingComments;
				while(_g1 < _g2.length) {
					var c = _g2[_g1];
					++_g1;
					_g.push(c.toJson());
				}
				comments.trailing = _g;
			}
			json.comments = comments;
		}
		return json;
	}
	,__class__: loreline_AstNode
});
var loreline_NExpr = function(id,pos,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
};
loreline_NExpr.__name__ = "loreline.NExpr";
loreline_NExpr.__super__ = loreline_AstNode;
loreline_NExpr.prototype = $extend(loreline_AstNode.prototype,{
	toJson: function() {
		return loreline_AstNode.prototype.toJson.call(this);
	}
	,__class__: loreline_NExpr
});
var loreline_NStateDecl = function(id,pos,temporary,fields,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.temporary = temporary;
	this.fields = fields;
	this.style = 0;
};
loreline_NStateDecl.__name__ = "loreline.NStateDecl";
loreline_NStateDecl.__super__ = loreline_AstNode;
loreline_NStateDecl.prototype = $extend(loreline_AstNode.prototype,{
	get: function(name) {
		var _g = 0;
		var _g1 = this.fields;
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(field.name == name) {
				return field.value;
			}
		}
		return null;
	}
	,each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.fields != null) {
			var _g = 0;
			var _g1 = this.fields.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.fields[i];
				handleNode(child,this);
				child.each(handleNode);
			}
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.temporary = this.temporary;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var prop = _g2[_g1];
			++_g1;
			_g.push(prop.toJson());
		}
		json.fields = _g;
		json.style = loreline_BlockStyle.toString(this.style);
		return json;
	}
	,__class__: loreline_NStateDecl
});
var loreline_NObjectField = function(id,pos,name,value,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.name = name;
	this.value = value;
};
loreline_NObjectField.__name__ = "loreline.NObjectField";
loreline_NObjectField.__super__ = loreline_AstNode;
loreline_NObjectField.prototype = $extend(loreline_AstNode.prototype,{
	each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.value != null) {
			handleNode(this.value,this);
			this.value.each(handleNode);
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.name = this.name;
		json.value = this.value.toJson();
		return json;
	}
	,__class__: loreline_NObjectField
});
var loreline_NCharacterDecl = function(id,pos,name,namePos,fields,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.name = name;
	this.namePos = namePos;
	this.fields = fields;
	this.style = 0;
};
loreline_NCharacterDecl.__name__ = "loreline.NCharacterDecl";
loreline_NCharacterDecl.__super__ = loreline_AstNode;
loreline_NCharacterDecl.prototype = $extend(loreline_AstNode.prototype,{
	get: function(name) {
		var _g = 0;
		var _g1 = this.fields;
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(field.name == name) {
				return field.value;
			}
		}
		return null;
	}
	,each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.fields != null) {
			var _g = 0;
			var _g1 = this.fields.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.fields[i];
				handleNode(child,this);
				child.each(handleNode);
			}
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.name = this.name;
		json.namePos = this.namePos.toJson();
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var prop = _g2[_g1];
			++_g1;
			_g.push(prop.toJson());
		}
		json.fields = _g;
		json.style = loreline_BlockStyle.toString(this.style);
		return json;
	}
	,__class__: loreline_NCharacterDecl
});
var loreline_NBeatDecl = function(id,pos,name,body,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.name = name;
	this.body = body;
	this.style = 0;
};
loreline_NBeatDecl.__name__ = "loreline.NBeatDecl";
loreline_NBeatDecl.__super__ = loreline_AstNode;
loreline_NBeatDecl.prototype = $extend(loreline_AstNode.prototype,{
	each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.body != null) {
			var _g = 0;
			var _g1 = this.body.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.body[i];
				handleNode(child,this);
				child.each(handleNode);
			}
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.name = this.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.body;
		while(_g1 < _g2.length) {
			var node = _g2[_g1];
			++_g1;
			_g.push(node.toJson());
		}
		json.body = _g;
		json.style = loreline_BlockStyle.toString(this.style);
		return json;
	}
	,__class__: loreline_NBeatDecl
});
var loreline_StringPartType = $hxEnums["loreline.StringPartType"] = { __ename__:true,__constructs__:null
	,Raw: ($_=function(text) { return {_hx_index:0,text:text,__enum__:"loreline.StringPartType",toString:$estr}; },$_._hx_name="Raw",$_.__params__ = ["text"],$_)
	,Expr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"loreline.StringPartType",toString:$estr}; },$_._hx_name="Expr",$_.__params__ = ["expr"],$_)
	,Tag: ($_=function(closing,expr) { return {_hx_index:2,closing:closing,expr:expr,__enum__:"loreline.StringPartType",toString:$estr}; },$_._hx_name="Tag",$_.__params__ = ["closing","expr"],$_)
};
loreline_StringPartType.__constructs__ = [loreline_StringPartType.Raw,loreline_StringPartType.Expr,loreline_StringPartType.Tag];
var loreline_BlockStyle = {};
loreline_BlockStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Plain";
	case 1:
		return "Braces";
	}
};
var loreline_NStringPart = function(id,pos,type,leadingComments,trailingComments) {
	loreline_NExpr.call(this,id,pos,leadingComments,trailingComments);
	this.type = type;
};
loreline_NStringPart.__name__ = "loreline.NStringPart";
loreline_NStringPart.__super__ = loreline_NExpr;
loreline_NStringPart.prototype = $extend(loreline_NExpr.prototype,{
	each: function(handleNode) {
		loreline_NExpr.prototype.each.call(this,handleNode);
		var _g = this.type;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.text;
			break;
		case 1:
			var expr = _g.expr;
			handleNode(expr,this);
			expr.each(handleNode);
			break;
		case 2:
			var _g1 = _g.closing;
			var expr = _g.expr;
			handleNode(expr,this);
			expr.each(handleNode);
			break;
		}
	}
	,toJson: function() {
		var json = loreline_NExpr.prototype.toJson.call(this);
		var _g = this.type;
		switch(_g._hx_index) {
		case 0:
			var text = _g.text;
			json.type = "Raw";
			json.text = text;
			break;
		case 1:
			var expr = _g.expr;
			json.type = "Expr";
			json.expression = expr.toJson();
			break;
		case 2:
			var closing = _g.closing;
			var expr = _g.expr;
			json.type = "Tag";
			json.closing = closing;
			json.content = expr.toJson();
			break;
		}
		return json;
	}
	,__class__: loreline_NStringPart
});
var loreline_NStringLiteral = function(id,pos,quotes,parts,leadingComments,trailingComments) {
	loreline_NExpr.call(this,id,pos,leadingComments,trailingComments);
	this.parts = parts;
	this.quotes = quotes;
};
loreline_NStringLiteral.__name__ = "loreline.NStringLiteral";
loreline_NStringLiteral.__super__ = loreline_NExpr;
loreline_NStringLiteral.prototype = $extend(loreline_NExpr.prototype,{
	each: function(handleNode) {
		loreline_NExpr.prototype.each.call(this,handleNode);
		if(this.parts != null) {
			var _g = 0;
			var _g1 = this.parts.length;
			while(_g < _g1) {
				var i = _g++;
				var part = this.parts[i];
				handleNode(part,this);
				part.each(handleNode);
			}
		}
	}
	,toJson: function() {
		var json = loreline_NExpr.prototype.toJson.call(this);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.parts;
		while(_g1 < _g2.length) {
			var part = _g2[_g1];
			++_g1;
			_g.push(part.toJson());
		}
		var parts = _g;
		json.parts = parts;
		json.quotes = loreline_Quotes.toString(this.quotes);
		return json;
	}
	,__class__: loreline_NStringLiteral
});
var loreline_NTextStatement = function(id,pos,content,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.content = content;
};
loreline_NTextStatement.__name__ = "loreline.NTextStatement";
loreline_NTextStatement.__super__ = loreline_AstNode;
loreline_NTextStatement.prototype = $extend(loreline_AstNode.prototype,{
	each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.content != null) {
			handleNode(this.content,this);
			this.content.each(handleNode);
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.content = this.content.toJson();
		return json;
	}
	,__class__: loreline_NTextStatement
});
var loreline_NDialogueStatement = function(id,pos,character,characterPos,content,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.character = character;
	this.characterPos = characterPos;
	this.content = content;
};
loreline_NDialogueStatement.__name__ = "loreline.NDialogueStatement";
loreline_NDialogueStatement.__super__ = loreline_AstNode;
loreline_NDialogueStatement.prototype = $extend(loreline_AstNode.prototype,{
	each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.content != null) {
			handleNode(this.content,this);
			this.content.each(handleNode);
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.character = this.character;
		json.characterPos = this.characterPos.toJson();
		json.content = this.content.toJson();
		return json;
	}
	,__class__: loreline_NDialogueStatement
});
var loreline_NChoiceStatement = function(id,pos,options,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.options = options;
	this.style = 0;
};
loreline_NChoiceStatement.__name__ = "loreline.NChoiceStatement";
loreline_NChoiceStatement.__super__ = loreline_AstNode;
loreline_NChoiceStatement.prototype = $extend(loreline_AstNode.prototype,{
	each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.options != null) {
			var _g = 0;
			var _g1 = this.options.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.options[i];
				handleNode(child,this);
				child.each(handleNode);
			}
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.options;
		while(_g1 < _g2.length) {
			var option = _g2[_g1];
			++_g1;
			_g.push(option.toJson());
		}
		json.options = _g;
		json.style = loreline_BlockStyle.toString(this.style);
		return json;
	}
	,__class__: loreline_NChoiceStatement
});
var loreline_NChoiceOption = function(id,pos,text,condition,body,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.text = text;
	this.condition = condition;
	this.body = body;
	this.style = 0;
};
loreline_NChoiceOption.__name__ = "loreline.NChoiceOption";
loreline_NChoiceOption.__super__ = loreline_AstNode;
loreline_NChoiceOption.prototype = $extend(loreline_AstNode.prototype,{
	each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.body != null) {
			var _g = 0;
			var _g1 = this.body.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.body[i];
				handleNode(child,this);
				child.each(handleNode);
			}
		}
		if(this.text != null) {
			handleNode(this.text,this);
			this.text.each(handleNode);
		}
		if(this.condition != null) {
			handleNode(this.condition,this);
			this.condition.each(handleNode);
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.text = this.text.toJson();
		if(this.condition != null) {
			json.condition = this.condition.toJson();
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.body;
		while(_g1 < _g2.length) {
			var node = _g2[_g1];
			++_g1;
			_g.push(node.toJson());
		}
		json.body = _g;
		json.style = loreline_BlockStyle.toString(this.style);
		return json;
	}
	,__class__: loreline_NChoiceOption
});
var loreline_NBlock = function(id,pos,body,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.body = body;
	this.style = 0;
};
loreline_NBlock.__name__ = "loreline.NBlock";
loreline_NBlock.__super__ = loreline_AstNode;
loreline_NBlock.prototype = $extend(loreline_AstNode.prototype,{
	each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.body != null) {
			var _g = 0;
			var _g1 = this.body.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.body[i];
				handleNode(child,this);
				child.each(handleNode);
			}
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.body;
		while(_g1 < _g2.length) {
			var node = _g2[_g1];
			++_g1;
			_g.push(node.toJson());
		}
		json.body = _g;
		json.style = loreline_BlockStyle.toString(this.style);
		return json;
	}
	,__class__: loreline_NBlock
});
var loreline_NIfStatement = function(id,pos,condition,thenBranch,elseBranch,leadingComments,trailingComments,elseLeadingComments,elseTrailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.condition = condition;
	this.thenBranch = thenBranch;
	this.elseBranch = elseBranch;
	this.elseLeadingComments = elseLeadingComments;
	this.elseTrailingComments = elseTrailingComments;
};
loreline_NIfStatement.__name__ = "loreline.NIfStatement";
loreline_NIfStatement.__super__ = loreline_AstNode;
loreline_NIfStatement.prototype = $extend(loreline_AstNode.prototype,{
	each: function(handleNode) {
		loreline_AstNode.prototype.each.call(this,handleNode);
		if(this.condition != null) {
			handleNode(this.condition,this);
			this.condition.each(handleNode);
		}
		if(this.thenBranch != null) {
			handleNode(this.thenBranch,this);
			this.thenBranch.each(handleNode);
		}
		if(this.elseBranch != null) {
			handleNode(this.elseBranch,this);
			this.elseBranch.each(handleNode);
		}
		if(this.elseLeadingComments != null) {
			var _g = 0;
			var _g1 = this.elseLeadingComments;
			while(_g < _g1.length) {
				var comment = _g1[_g];
				++_g;
				handleNode(comment,this);
				comment.each(handleNode);
			}
		}
		if(this.elseTrailingComments != null) {
			var _g = 0;
			var _g1 = this.elseTrailingComments;
			while(_g < _g1.length) {
				var comment = _g1[_g];
				++_g;
				handleNode(comment,this);
				comment.each(handleNode);
			}
		}
	}
	,toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.condition = this.condition.toJson();
		var _g = [];
		var _g1 = 0;
		var _g2 = this.thenBranch.body;
		while(_g1 < _g2.length) {
			var node = _g2[_g1];
			++_g1;
			_g.push(node.toJson());
		}
		json.thenBranch = _g;
		json.thenStyle = loreline_BlockStyle.toString(this.thenBranch.style);
		if(this.elseBranch != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = this.elseBranch.body;
			while(_g1 < _g2.length) {
				var node = _g2[_g1];
				++_g1;
				_g.push(node.toJson());
			}
			json.elseBranch = _g;
			json.elseStyle = loreline_BlockStyle.toString(this.elseBranch.style);
			if(this.elseLeadingComments != null && this.elseLeadingComments.length > 0 || this.elseTrailingComments != null && this.elseTrailingComments.length > 0) {
				var tmp = json.comments;
				var comments = tmp != null ? tmp : { };
				if(this.elseLeadingComments != null && this.elseLeadingComments.length > 0) {
					var _g = [];
					var _g1 = 0;
					var _g2 = this.elseLeadingComments;
					while(_g1 < _g2.length) {
						var c = _g2[_g1];
						++_g1;
						_g.push(c.toJson());
					}
					comments.elseLeading = _g;
				}
				if(this.elseTrailingComments != null && this.elseTrailingComments.length > 0) {
					var _g = [];
					var _g1 = 0;
					var _g2 = this.elseTrailingComments;
					while(_g1 < _g2.length) {
						var c = _g2[_g1];
						++_g1;
						_g.push(c.toJson());
					}
					comments.elseTrailing = _g;
				}
				json.comments = comments;
			}
		}
		return json;
	}
	,__class__: loreline_NIfStatement
});
var loreline_NCall = function(id,pos,target,args,leadingComments,trailingComments) {
	loreline_NExpr.call(this,id,pos,leadingComments,trailingComments);
	this.target = target;
	this.args = args;
};
loreline_NCall.__name__ = "loreline.NCall";
loreline_NCall.__super__ = loreline_NExpr;
loreline_NCall.prototype = $extend(loreline_NExpr.prototype,{
	each: function(handleNode) {
		loreline_NExpr.prototype.each.call(this,handleNode);
		if(this.target != null) {
			handleNode(this.target,this);
			this.target.each(handleNode);
		}
		if(this.args != null) {
			var _g = 0;
			var _g1 = this.args;
			while(_g < _g1.length) {
				var arg = _g1[_g];
				++_g;
				handleNode(arg,this);
				arg.each(handleNode);
			}
		}
	}
	,toJson: function() {
		var json = loreline_NExpr.prototype.toJson.call(this);
		json.target = this.target.toJson();
		var _g = [];
		var _g1 = 0;
		var _g2 = this.args;
		while(_g1 < _g2.length) {
			var arg = _g2[_g1];
			++_g1;
			_g.push(arg.toJson());
		}
		json.args = _g;
		return json;
	}
	,__class__: loreline_NCall
});
var loreline_NTransition = function(id,pos,target,targetPos,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.target = target;
	this.targetPos = targetPos;
};
loreline_NTransition.__name__ = "loreline.NTransition";
loreline_NTransition.__super__ = loreline_AstNode;
loreline_NTransition.prototype = $extend(loreline_AstNode.prototype,{
	toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.target = this.target;
		json.targetPos = this.targetPos.toJson();
		return json;
	}
	,__class__: loreline_NTransition
});
var loreline_NLiteral = function(id,pos,value,type,leadingComments,trailingComments) {
	loreline_NExpr.call(this,id,pos,leadingComments,trailingComments);
	this.value = value;
	this.type = type;
};
loreline_NLiteral.__name__ = "loreline.NLiteral";
loreline_NLiteral.__super__ = loreline_NExpr;
loreline_NLiteral.prototype = $extend(loreline_NExpr.prototype,{
	each: function(handleNode) {
		loreline_NExpr.prototype.each.call(this,handleNode);
		var _g = this.type;
		switch(_g._hx_index) {
		case 0:case 1:case 2:
			break;
		case 3:
			var _g1 = 0;
			var _g2 = this.value;
			while(_g1 < _g2.length) {
				var elem = _g2[_g1];
				++_g1;
				if(((elem) instanceof loreline_Node)) {
					var node = elem;
					handleNode(node,this);
					node.each(handleNode);
				}
			}
			break;
		case 4:
			var style = _g.style;
			if(this.value != null) {
				var _g = 0;
				var _g1 = this.value;
				while(_g < _g1.length) {
					var field = _g1[_g];
					++_g;
					if(((field.value) instanceof loreline_Node)) {
						var node = field.value;
						handleNode(node,this);
						node.each(handleNode);
					}
				}
			}
			break;
		}
	}
	,toJson: function() {
		var json = loreline_NExpr.prototype.toJson.call(this);
		var e = this.type;
		json.literalType = $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name;
		var _g = this.type;
		switch(_g._hx_index) {
		case 0:case 1:case 2:
			json.value = this.value;
			break;
		case 3:
			var _g1 = [];
			var _g2 = 0;
			var _g3 = this.value;
			while(_g2 < _g3.length) {
				var elem = _g3[_g2];
				++_g2;
				if(((elem) instanceof loreline_Node)) {
					_g1.push(elem.toJson());
				} else {
					_g1.push(elem);
				}
			}
			json.value = _g1;
			break;
		case 4:
			var style = _g.style;
			if(this.value != null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = this.value;
				while(_g1 < _g2.length) {
					var field = _g2[_g1];
					++_g1;
					_g.push(field.toJson());
				}
				json.value = _g;
			} else {
				json.value = [];
			}
			json.style = loreline_BlockStyle.toString(style);
			break;
		}
		return json;
	}
	,__class__: loreline_NLiteral
});
var loreline_LiteralType = $hxEnums["loreline.LiteralType"] = { __ename__:true,__constructs__:null
	,Number: {_hx_name:"Number",_hx_index:0,__enum__:"loreline.LiteralType",toString:$estr}
	,Boolean: {_hx_name:"Boolean",_hx_index:1,__enum__:"loreline.LiteralType",toString:$estr}
	,Null: {_hx_name:"Null",_hx_index:2,__enum__:"loreline.LiteralType",toString:$estr}
	,Array: {_hx_name:"Array",_hx_index:3,__enum__:"loreline.LiteralType",toString:$estr}
	,Object: ($_=function(style) { return {_hx_index:4,style:style,__enum__:"loreline.LiteralType",toString:$estr}; },$_._hx_name="Object",$_.__params__ = ["style"],$_)
};
loreline_LiteralType.__constructs__ = [loreline_LiteralType.Number,loreline_LiteralType.Boolean,loreline_LiteralType.Null,loreline_LiteralType.Array,loreline_LiteralType.Object];
var loreline_NAccess = function(id,pos,target,name,leadingComments,trailingComments) {
	loreline_NExpr.call(this,id,pos,leadingComments,trailingComments);
	this.target = target;
	this.name = name;
};
loreline_NAccess.__name__ = "loreline.NAccess";
loreline_NAccess.__super__ = loreline_NExpr;
loreline_NAccess.prototype = $extend(loreline_NExpr.prototype,{
	each: function(handleNode) {
		loreline_NExpr.prototype.each.call(this,handleNode);
		if(this.target != null) {
			handleNode(this.target,this);
			this.target.each(handleNode);
		}
	}
	,toJson: function() {
		var json = loreline_NExpr.prototype.toJson.call(this);
		if(this.target != null) {
			json.target = this.target.toJson();
		}
		json.name = this.name;
		return json;
	}
	,__class__: loreline_NAccess
});
var loreline_NAssign = function(id,pos,target,op,value,leadingComments,trailingComments) {
	loreline_NExpr.call(this,id,pos,leadingComments,trailingComments);
	this.target = target;
	this.op = op;
	this.value = value;
};
loreline_NAssign.__name__ = "loreline.NAssign";
loreline_NAssign.__super__ = loreline_NExpr;
loreline_NAssign.prototype = $extend(loreline_NExpr.prototype,{
	each: function(handleNode) {
		loreline_NExpr.prototype.each.call(this,handleNode);
		if(this.target != null) {
			handleNode(this.target,this);
			this.target.each(handleNode);
		}
		if(this.value != null) {
			handleNode(this.value,this);
			this.value.each(handleNode);
		}
	}
	,toJson: function() {
		var json = loreline_NExpr.prototype.toJson.call(this);
		json.target = this.target.toJson();
		json.op = Std.string(this.op);
		json.value = this.value.toJson();
		return json;
	}
	,__class__: loreline_NAssign
});
var loreline_NArrayAccess = function(id,pos,target,index,leadingComments,trailingComments) {
	loreline_NExpr.call(this,id,pos,leadingComments,trailingComments);
	this.target = target;
	this.index = index;
};
loreline_NArrayAccess.__name__ = "loreline.NArrayAccess";
loreline_NArrayAccess.__super__ = loreline_NExpr;
loreline_NArrayAccess.prototype = $extend(loreline_NExpr.prototype,{
	each: function(handleNode) {
		loreline_NExpr.prototype.each.call(this,handleNode);
		if(this.target != null) {
			handleNode(this.target,this);
			this.target.each(handleNode);
		}
		if(this.index != null) {
			handleNode(this.index,this);
			this.index.each(handleNode);
		}
	}
	,toJson: function() {
		var json = loreline_NExpr.prototype.toJson.call(this);
		json.target = this.target.toJson();
		json.index = this.index.toJson();
		return json;
	}
	,__class__: loreline_NArrayAccess
});
var loreline_NBinary = function(id,pos,left,op,right,leadingComments,trailingComments) {
	loreline_NExpr.call(this,id,pos,leadingComments,trailingComments);
	this.left = left;
	this.op = op;
	this.right = right;
};
loreline_NBinary.__name__ = "loreline.NBinary";
loreline_NBinary.__super__ = loreline_NExpr;
loreline_NBinary.prototype = $extend(loreline_NExpr.prototype,{
	each: function(handleNode) {
		loreline_NExpr.prototype.each.call(this,handleNode);
		if(this.left != null) {
			handleNode(this.left,this);
			this.left.each(handleNode);
		}
		if(this.right != null) {
			handleNode(this.right,this);
			this.right.each(handleNode);
		}
	}
	,toJson: function() {
		var json = loreline_NExpr.prototype.toJson.call(this);
		json.left = this.left.toJson();
		json.op = Std.string(this.op);
		json.right = this.right.toJson();
		return json;
	}
	,__class__: loreline_NBinary
});
var loreline_NUnary = function(id,pos,op,operand,leadingComments,trailingComments) {
	loreline_NExpr.call(this,id,pos,leadingComments,trailingComments);
	this.op = op;
	this.operand = operand;
};
loreline_NUnary.__name__ = "loreline.NUnary";
loreline_NUnary.__super__ = loreline_NExpr;
loreline_NUnary.prototype = $extend(loreline_NExpr.prototype,{
	each: function(handleNode) {
		loreline_NExpr.prototype.each.call(this,handleNode);
		if(this.operand != null) {
			handleNode(this.operand,this);
			this.operand.each(handleNode);
		}
	}
	,toJson: function() {
		var json = loreline_NExpr.prototype.toJson.call(this);
		json.op = Std.string(this.op);
		json.operand = this.operand.toJson();
		return json;
	}
	,__class__: loreline_NUnary
});
var loreline_NImport = function(id,pos,path,leadingComments,trailingComments) {
	loreline_AstNode.call(this,id,pos,leadingComments,trailingComments);
	this.path = path;
};
loreline_NImport.__name__ = "loreline.NImport";
loreline_NImport.__super__ = loreline_AstNode;
loreline_NImport.prototype = $extend(loreline_AstNode.prototype,{
	toJson: function() {
		var json = loreline_AstNode.prototype.toJson.call(this);
		json.path = this.path;
		return json;
	}
	,__class__: loreline_NImport
});
var loreline_ParseError = function(message,pos) {
	loreline_Error.call(this,message,pos);
};
loreline_ParseError.__name__ = "loreline.ParseError";
loreline_ParseError.__super__ = loreline_Error;
loreline_ParseError.prototype = $extend(loreline_Error.prototype,{
	__class__: loreline_ParseError
});
var loreline_Parser = function(tokens) {
	this.tokens = tokens;
	this.current = 0;
	this.errors = null;
	this.pendingComments = null;
	this.lastTokenEnd = new loreline_Position(1,1,0);
	this.lastLineBreak = null;
	this.lineBreakAfterToken = false;
	this.nextNodeId = 0;
	this.rootBeat = null;
};
loreline_Parser.__name__ = "loreline.Parser";
loreline_Parser.prototype = {
	peek: function() {
		if(this.current + 1 >= this.tokens.length) {
			return this.tokens[this.tokens.length - 1];
		}
		return this.tokens[this.current + 1];
	}
	,peekNext: function() {
		return this.tokens[this.current + 2];
	}
	,peekType: function() {
		return this.peek().type;
	}
	,advance: function() {
		var prev = this.tokens[this.current];
		if(!this.isAtEnd()) {
			this.lastTokenEnd = prev.pos;
			this.lineBreakAfterToken = false;
			while(!this.isAtEnd() && this.tokens[this.current + 1] != null && (this.isComment(this.tokens[this.current + 1].type) || this.tokens[this.current + 1].type == loreline_TokenType.LineBreak)) {
				this.current++;
				var _g = this.tokens[this.current].type;
				switch(_g._hx_index) {
				case 42:
					var content = _g.content;
					if(this.pendingComments == null) {
						this.pendingComments = [];
					}
					this.pendingComments.push(new loreline_Comment(this.nextNodeId++,this.currentPos(),content,false));
					break;
				case 43:
					var content1 = _g.content;
					if(this.pendingComments == null) {
						this.pendingComments = [];
					}
					this.pendingComments.push(new loreline_Comment(this.nextNodeId++,this.currentPos(),content1,true));
					break;
				case 46:
					this.lastLineBreak = this.currentPos();
					this.lineBreakAfterToken = true;
					break;
				default:
				}
			}
			this.current++;
		}
		return prev;
	}
	,previous: function() {
		return this.tokens[this.current - 1];
	}
	,prevWithType: function(type) {
		var n = this.current - 1;
		while(n >= 0) {
			if(loreline_TokenTypeHelpers.equals(this.tokens[n].type,type)) {
				return this.tokens[n];
			}
			--n;
		}
		return null;
	}
	,prevIdentifier: function() {
		var n = this.current - 1;
		while(n >= 0) {
			var _g = this.tokens[n].type;
			if(_g._hx_index == 12) {
				var _g1 = _g.name;
				return this.tokens[n];
			}
			--n;
		}
		return null;
	}
	,prevNonWhitespaceOrComment: function() {
		var n = this.current - 1;
		while(n >= 0) {
			var _g = this.tokens[n].type;
			switch(_g._hx_index) {
			case 42:
				var _g1 = _g.content;
				break;
			case 43:
				var _g2 = _g.content;
				break;
			case 44:case 45:case 46:
				break;
			default:
				return this.tokens[n];
			}
			--n;
		}
		return null;
	}
	,nextNonWhitespaceOrComment: function() {
		var n = this.current;
		while(n < this.tokens.length) {
			var _g = this.tokens[n].type;
			switch(_g._hx_index) {
			case 42:
				var _g1 = _g.content;
				break;
			case 43:
				var _g2 = _g.content;
				break;
			case 44:case 45:case 46:
				break;
			default:
				return this.tokens[n];
			}
			++n;
		}
		return null;
	}
	,nextNonLineBreakOrComment: function() {
		var n = this.current;
		while(n < this.tokens.length) {
			var _g = this.tokens[n].type;
			switch(_g._hx_index) {
			case 42:
				var _g1 = _g.content;
				break;
			case 43:
				var _g2 = _g.content;
				break;
			case 46:
				break;
			default:
				return this.tokens[n];
			}
			++n;
		}
		return null;
	}
	,currentPos: function() {
		var tmp = this.tokens[this.current];
		var tmp1 = tmp != null ? tmp.pos : null;
		if(tmp1 != null) {
			return tmp1;
		} else {
			return new loreline_Position(1,1,0,0);
		}
	}
	,check: function(type) {
		if(this.isAtEnd()) {
			return false;
		}
		if(type._hx_index == 33) {
			return this.tokens[this.current].type == loreline_TokenType.Colon;
		} else {
			return loreline_TokenTypeHelpers.equals(this.tokens[this.current].type,type);
		}
	}
	,checkString: function() {
		var _g = this.tokens[this.current].type;
		if(_g._hx_index == 8) {
			var _g1 = _g.attachments;
			var s = _g.quotes;
			var attachments = _g.s;
			return true;
		} else {
			return false;
		}
	}
	,isAtEnd: function() {
		if(this.current < this.tokens.length) {
			return this.tokens[this.current].type == loreline_TokenType.Eof;
		} else {
			return true;
		}
	}
	,isComment: function(type) {
		switch(type._hx_index) {
		case 42:
			var _g = type.content;
			return true;
		case 43:
			var _g = type.content;
			return true;
		default:
			return false;
		}
	}
	,parse: function() {
		var rootParsing = !loreline_Parser.parse_parsing;
		if(rootParsing) {
			loreline_Parser.parse_parsing = true;
			this.nextNodeId = 1;
		}
		var startPos = this.currentPos();
		var nodes = [];
		var script = new loreline_Script(this.nextNodeId++,startPos,nodes);
		while(!this.isAtEnd()) try {
			var node = this.parseNode(true);
			if(node != null) {
				nodes.push(node);
			}
			while(this.match(loreline_TokenType.LineBreak)) {
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof loreline_ParseError)) {
				var e = _g1;
				this.addError(e);
				this.synchronize();
			} else {
				throw _g;
			}
		}
		if(rootParsing) {
			loreline_Parser.parse_parsing = false;
		}
		return script;
	}
	,parseNode: function(topLevel) {
		if(topLevel == null) {
			topLevel = false;
		}
		var _gthis = this;
		while(this.isComment(this.tokens[this.current].type) || this.tokens[this.current].type == loreline_TokenType.LineBreak) {
			if(this.isComment(this.tokens[this.current].type)) {
				var tmp = this.pendingComments;
				var tmp1 = this.nextNodeId++;
				var tmp2 = this.currentPos();
				var _g = this.tokens[this.current].type;
				var tmp3;
				switch(_g._hx_index) {
				case 42:
					var content = _g.content;
					tmp3 = content;
					break;
				case 43:
					var content1 = _g.content;
					tmp3 = content1;
					break;
				default:
					tmp3 = "";
				}
				var _g1 = this.tokens[this.current].type;
				var tmp4;
				if(_g1._hx_index == 43) {
					var _g2 = _g1.content;
					tmp4 = true;
				} else {
					tmp4 = false;
				}
				tmp.push(new loreline_Comment(tmp1,tmp2,tmp3,tmp4));
			}
			this.advance();
			if(this.isAtEnd()) {
				throw haxe_Exception.thrown(new loreline_ParseError("Unexpected end of file",this.currentPos()));
			}
		}
		if(this.isAtEnd()) {
			throw haxe_Exception.thrown(new loreline_ParseError("Unexpected end of file",this.currentPos()));
		}
		var _g = this.tokens[this.current].type;
		switch(_g._hx_index) {
		case 0:
			return this.parseImport();
		case 1:
			return this.parseStateDecl(false);
		case 2:
			return this.parseBeatDecl();
		case 3:
			if(topLevel) {
				return this.parseCharacterDecl();
			} else {
				throw haxe_Exception.thrown(new loreline_ParseError("Unexpected token: " + Std.string(this.tokens[this.current].type),this.currentPos()));
			}
			break;
		case 4:
			var node = this.parseChoiceStatement();
			if(topLevel) {
				return _gthis.wrapInRootBeat(node);
			} else {
				return node;
			}
			break;
		case 5:
			var node = this.parseIfStatement();
			if(topLevel) {
				return _gthis.wrapInRootBeat(node);
			} else {
				return node;
			}
			break;
		case 7:
			this.advance();
			if(!this.check(loreline_TokenType.KwState)) {
				throw haxe_Exception.thrown(new loreline_ParseError("Expected 'state' after 'new'",this.currentPos()));
			}
			var node = this.parseStateDecl(true);
			if(topLevel) {
				return _gthis.wrapInRootBeat(node);
			} else {
				return node;
			}
			break;
		case 8:
			var _g1 = _g.quotes;
			var _g1 = _g.s;
			var _g1 = _g.attachments;
			var node = this.parseTextStatement();
			if(topLevel) {
				return _gthis.wrapInRootBeat(node);
			} else {
				return node;
			}
			break;
		case 9:
			var _g1 = _g.n;
			return this.parseExpressionStatement();
		case 10:
			var _g1 = _g.b;
			return this.parseExpressionStatement();
		case 12:
			var _g1 = _g.name;
			if(this.peek().type == loreline_TokenType.Colon) {
				var node = this.parseDialogueStatement();
				if(topLevel) {
					return _gthis.wrapInRootBeat(node);
				} else {
					return node;
				}
			} else {
				return this.parseExpressionStatement();
			}
			break;
		case 11:case 19:case 31:case 36:case 38:case 40:
			return this.parseExpressionStatement();
		case 32:
			var node = this.parseTransition();
			if(topLevel) {
				return _gthis.wrapInRootBeat(node);
			} else {
				return node;
			}
			break;
		default:
			throw haxe_Exception.thrown(new loreline_ParseError("Unexpected token: " + Std.string(this.tokens[this.current].type),this.currentPos()));
		}
	}
	,wrapInRootBeat: function(node) {
		var body;
		var result = null;
		if(this.rootBeat == null) {
			var startPos = this.currentPos();
			body = [];
			this.rootBeat = new loreline_NBeatDecl(this.nextNodeId++,startPos,"_",body);
			result = this.rootBeat;
		} else {
			body = this.rootBeat.body;
		}
		body.push(node);
		return result;
	}
	,parseImport: function() {
		var startPos = this.currentPos();
		var imp = new loreline_NImport(this.nextNodeId++,startPos,null);
		this.expect(loreline_TokenType.KwImport);
		var path;
		var _g = this.tokens[this.current].type;
		if(_g._hx_index == 8) {
			var _g1 = _g.s;
			var _g1 = _g.attachments;
			var s = _g.quotes;
			path = s;
		} else {
			throw haxe_Exception.thrown(new loreline_ParseError("Expected string literal for import path",this.currentPos()));
		}
		this.advance();
		this.attachComments(imp);
		return imp;
	}
	,parseDialogueStatement: function() {
		var startPos = this.currentPos();
		var dialogue = new loreline_NDialogueStatement(this.nextNodeId++,startPos,null,null,null);
		var _g = this.tokens[this.current].type;
		var tmp;
		if(_g._hx_index == 12) {
			var name = _g.name;
			tmp = name;
		} else {
			throw haxe_Exception.thrown(new loreline_ParseError("Expected character name",this.currentPos()));
		}
		dialogue.character = tmp;
		dialogue.characterPos = this.tokens[this.current].pos;
		this.advance();
		this.expect(loreline_TokenType.Colon);
		this.attachComments(dialogue);
		dialogue.content = this.parseStringLiteral();
		dialogue.pos = dialogue.pos.extendedTo(dialogue.content.pos);
		return dialogue;
	}
	,parseStatementBlock: function(statements) {
		var blockEnd = this.parseBlockStart().type == loreline_TokenType.Indent ? loreline_TokenType.Unindent : loreline_TokenType.RBrace;
		while(!this.check(blockEnd) && !this.isAtEnd()) {
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
			if(this.check(blockEnd)) {
				break;
			}
			try {
				statements.push(this.parseNode());
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(((_g1) instanceof loreline_ParseError)) {
					var e = _g1;
					if(this.errors == null) {
						this.errors = [];
					}
					this.errors.push(e);
					this.synchronize();
					if(this.check(blockEnd)) {
						break;
					}
				} else {
					throw _g;
				}
			}
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
		}
		this.expect(blockEnd);
		if(blockEnd == loreline_TokenType.RBrace) {
			return 1;
		} else {
			return 0;
		}
	}
	,parseStateDecl: function(temporary) {
		var startPos = this.currentPos();
		var stateNode = new loreline_NStateDecl(this.nextNodeId++,startPos,temporary,[]);
		this.expect(loreline_TokenType.KwState);
		var blockEnd = this.parseBlockStart().type == loreline_TokenType.Indent ? loreline_TokenType.Unindent : loreline_TokenType.RBrace;
		stateNode.style = blockEnd == loreline_TokenType.RBrace ? 1 : 0;
		this.attachComments(stateNode);
		while(!this.check(blockEnd) && !this.isAtEnd()) {
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
			stateNode.fields.push(this.parseObjectField());
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
		}
		while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
		}
		this.expect(blockEnd);
		stateNode.pos = stateNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
		return stateNode;
	}
	,parseObjectField: function() {
		var startPos = this.currentPos();
		var name = this.expectIdentifier();
		var objectField = new loreline_NObjectField(this.nextNodeId++,startPos,name,null);
		this.expect(loreline_TokenType.Colon);
		this.attachComments(objectField);
		if(this.checkBlockStart()) {
			objectField.value = this.parseObjectLiteral();
		} else {
			objectField.value = this.parseExpression();
		}
		objectField.pos = objectField.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
		return objectField;
	}
	,parseBeatDecl: function() {
		var startPos = this.currentPos();
		var beatNode = new loreline_NBeatDecl(this.nextNodeId++,startPos,null,[],[]);
		this.expect(loreline_TokenType.KwBeat);
		beatNode.pos = startPos.extendedTo(this.currentPos());
		beatNode.name = this.expectIdentifier();
		var blockStart = this.parseBlockStart();
		var blockEnd = blockStart.type == loreline_TokenType.Indent ? loreline_TokenType.Unindent : loreline_TokenType.RBrace;
		beatNode.style = blockEnd == loreline_TokenType.RBrace ? 1 : 0;
		this.attachComments(beatNode);
		while(!this.check(blockEnd) && !this.isAtEnd()) {
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
			beatNode.body.push(this.parseNode());
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
		}
		while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
		}
		this.expect(blockEnd);
		beatNode.pos = beatNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
		return beatNode;
	}
	,checkBlockStart: function() {
		var indentToken = null;
		var braceToken = null;
		var numIndents = 0;
		var i = 0;
		while(this.current + i < this.tokens.length) {
			var token = this.tokens[this.current + i];
			++i;
			if(token.type == loreline_TokenType.LineBreak) {
				continue;
			}
			if(token.type == loreline_TokenType.Indent) {
				++numIndents;
				indentToken = token;
				continue;
			}
			if(token.type == loreline_TokenType.LBrace) {
				if(braceToken == null) {
					braceToken = token;
				}
				continue;
			}
			break;
		}
		if(braceToken != null) {
			return true;
		} else if(indentToken != null) {
			if(numIndents > 1) {
				throw haxe_Exception.thrown(new loreline_ParseError("Invalid indentation level",indentToken.pos));
			}
			return true;
		} else {
			return false;
		}
	}
	,parseBlockStart: function() {
		var indentToken = null;
		var braceToken = null;
		var numIndents = 0;
		while(!this.isAtEnd()) {
			if(this.match(loreline_TokenType.LineBreak)) {
				continue;
			}
			if(this.match(loreline_TokenType.Indent)) {
				++numIndents;
				indentToken = this.prevWithType(loreline_TokenType.Indent);
				continue;
			}
			if(this.match(loreline_TokenType.LBrace)) {
				if(braceToken == null) {
					braceToken = this.prevWithType(loreline_TokenType.LBrace);
				}
				continue;
			}
			break;
		}
		if(braceToken != null) {
			return braceToken;
		} else if(indentToken != null) {
			if(numIndents > 1) {
				throw haxe_Exception.thrown(new loreline_ParseError("Invalid indentation level",indentToken.pos));
			}
			return indentToken;
		} else {
			this.addError(new loreline_ParseError("Expected " + Std.string(loreline_TokenType.LBrace) + " or " + Std.string(loreline_TokenType.Indent) + ", got " + Std.string(this.tokens[this.current].type),this.currentPos()));
			return new loreline_Token(loreline_TokenType.Indent,this.currentPos());
		}
	}
	,parseCharacterDecl: function() {
		var startPos = this.currentPos();
		var characterNode = new loreline_NCharacterDecl(this.nextNodeId++,startPos,null,null,[]);
		this.expect(loreline_TokenType.KwCharacter);
		characterNode.name = this.expectIdentifier();
		characterNode.namePos = this.prevNonWhitespaceOrComment().pos;
		var blockEnd = this.parseBlockStart().type == loreline_TokenType.Indent ? loreline_TokenType.Unindent : loreline_TokenType.RBrace;
		characterNode.style = blockEnd == loreline_TokenType.RBrace ? 1 : 0;
		this.attachComments(characterNode);
		while(!this.check(blockEnd) && !this.isAtEnd()) {
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
			characterNode.fields.push(this.parseObjectField());
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
		}
		while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
		}
		this.expect(blockEnd);
		characterNode.pos = characterNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
		return characterNode;
	}
	,parseTextStatement: function() {
		var startPos = this.currentPos();
		var statement = this.attachComments(new loreline_NTextStatement(this.nextNodeId++,startPos,null));
		statement.content = this.parseStringLiteral();
		return statement;
	}
	,parseChoiceStatement: function() {
		var startPos = this.currentPos();
		var choiceNode = new loreline_NChoiceStatement(this.nextNodeId++,startPos,[]);
		this.expect(loreline_TokenType.KwChoice);
		var blockEnd = this.parseBlockStart().type == loreline_TokenType.Indent ? loreline_TokenType.Unindent : loreline_TokenType.RBrace;
		choiceNode.style = blockEnd == loreline_TokenType.RBrace ? 1 : 0;
		this.attachComments(choiceNode);
		while(!this.check(blockEnd) && !this.isAtEnd()) {
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
			choiceNode.options.push(this.parseChoiceOption(blockEnd));
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
		}
		this.expect(blockEnd);
		choiceNode.pos = choiceNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
		return choiceNode;
	}
	,parseChoiceOption: function(blockEnd) {
		var startPos = this.currentPos();
		var choiceOption = this.attachComments(new loreline_NChoiceOption(this.nextNodeId++,startPos,null,null,[]));
		choiceOption.text = this.parseStringLiteral();
		if(this.match(loreline_TokenType.KwIf)) {
			choiceOption.condition = this.parseConditionExpression();
		}
		if(this.checkBlockStart()) {
			choiceOption.body = [];
			choiceOption.style = this.parseStatementBlock(choiceOption.body);
		} else if(!this.check(blockEnd)) {
			choiceOption.body = [this.parseNode()];
			choiceOption.style = 0;
		}
		choiceOption.pos = choiceOption.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
		return choiceOption;
	}
	,isExpressionStart: function() {
		var _g = this.tokens[this.current].type;
		switch(_g._hx_index) {
		case 8:
			var _g1 = _g.quotes;
			var _g1 = _g.s;
			var _g1 = _g.attachments;
			return true;
		case 9:
			var _g1 = _g.n;
			return true;
		case 10:
			var _g1 = _g.b;
			return true;
		case 12:
			var _g1 = _g.name;
			if(this.peek().type == loreline_TokenType.Colon) {
				return false;
			} else {
				return true;
			}
			break;
		case 11:case 19:case 31:case 36:case 38:case 40:
			return true;
		default:
			return false;
		}
	}
	,parseExpressionStatement: function() {
		var expr = this.parseExpression();
		if(this.match(loreline_TokenType.OpAssign) || this.match(loreline_TokenType.OpPlusAssign) || this.match(loreline_TokenType.OpMinusAssign) || this.match(loreline_TokenType.OpMultiplyAssign) || this.match(loreline_TokenType.OpDivideAssign)) {
			var op = this.previous().type;
			var assignment = this.attachComments(new loreline_NAssign(this.nextNodeId++,expr.pos,expr,op,null));
			assignment.value = this.parseExpression();
			assignment.pos = assignment.pos.extendedTo(assignment.value.pos);
			return assignment;
		}
		return this.attachComments(expr);
	}
	,isKnownNodeStart: function() {
		var _g = this.tokens[this.current].type;
		switch(_g._hx_index) {
		case 8:
			var _g1 = _g.quotes;
			var _g1 = _g.s;
			var _g1 = _g.attachments;
			return true;
		case 12:
			var _g1 = _g.name;
			if(this.peek().type == loreline_TokenType.Colon) {
				return true;
			} else if(this.peek().type == loreline_TokenType.Arrow) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:case 2:case 3:case 4:case 5:case 32:
			return true;
		default:
			return false;
		}
	}
	,parseIfStatement: function() {
		var startPos = this.currentPos();
		var ifNode = new loreline_NIfStatement(this.nextNodeId++,startPos,null,null,null);
		this.expect(loreline_TokenType.KwIf);
		ifNode.condition = this.parseConditionExpression();
		while(this.match(loreline_TokenType.LineBreak)) {
		}
		this.attachComments(ifNode);
		ifNode.thenBranch = new loreline_NBlock(this.nextNodeId++,this.currentPos(),null);
		ifNode.thenBranch.body = [];
		ifNode.thenBranch.style = this.parseStatementBlock(ifNode.thenBranch.body);
		var elseToken = this.tokens[this.current];
		if(elseToken != null && elseToken.type == loreline_TokenType.KwElse) {
			this.advance();
			while(this.match(loreline_TokenType.LineBreak)) {
			}
			this.attachElseComments(ifNode,elseToken);
			if(this.check(loreline_TokenType.KwIf)) {
				ifNode.elseBranch = new loreline_NBlock(this.nextNodeId++,this.currentPos(),null);
				var tmp = this.parseIfStatement();
				ifNode.elseBranch.body = [tmp];
				ifNode.elseBranch.style = 0;
			} else {
				ifNode.elseBranch = new loreline_NBlock(this.nextNodeId++,this.currentPos(),null);
				ifNode.elseBranch.body = [];
				ifNode.elseBranch.style = this.parseStatementBlock(ifNode.elseBranch.body);
			}
		}
		ifNode.pos = ifNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
		return ifNode;
	}
	,parseTransition: function() {
		var startPos = this.currentPos();
		this.expect(loreline_TokenType.Arrow);
		if(this.match(loreline_TokenType.Dot)) {
			return this.attachComments(new loreline_NTransition(this.nextNodeId++,startPos.extendedTo(this.prevNonWhitespaceOrComment().pos),".",this.prevNonWhitespaceOrComment().pos));
		}
		var target = this.expectIdentifier();
		return this.attachComments(new loreline_NTransition(this.nextNodeId++,startPos.extendedTo(this.prevNonWhitespaceOrComment().pos),target,this.prevNonWhitespaceOrComment().pos));
	}
	,parseExpression: function() {
		try {
			var expr = this.parseLogicalOr();
			if(this.check(loreline_TokenType.OpAssign) || this.check(loreline_TokenType.OpPlusAssign) || this.check(loreline_TokenType.OpMinusAssign) || this.check(loreline_TokenType.OpMultiplyAssign) || this.check(loreline_TokenType.OpDivideAssign)) {
				var op = this.tokens[this.current].type;
				this.advance();
				var assignment = this.attachComments(new loreline_NAssign(this.nextNodeId++,expr.pos,expr,op,null));
				assignment.value = this.parseExpression();
				assignment.pos = assignment.pos.extendedTo(assignment.value.pos);
				return assignment;
			}
			return expr;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(((e) instanceof loreline_ParseError)) {
				this.addError(e);
			}
			return new loreline_NLiteral(this.nextNodeId++,this.currentPos(),null,loreline_LiteralType.Null);
		}
	}
	,parseLogicalOr: function() {
		var expr = this.parseLogicalAnd();
		while(this.match(loreline_TokenType.OpOr(false))) {
			var op = this.previous().type;
			var binary = this.attachComments(new loreline_NBinary(this.nextNodeId++,expr.pos,expr,op,null));
			binary.right = this.parseLogicalAnd();
			binary.pos = binary.pos.extendedTo(binary.right.pos);
			expr = binary;
		}
		return expr;
	}
	,parseLogicalAnd: function() {
		var expr = this.parseEquality();
		while(this.match(loreline_TokenType.OpAnd(false))) {
			var op = this.previous().type;
			var binary = this.attachComments(new loreline_NBinary(this.nextNodeId++,expr.pos,expr,op,null));
			binary.right = this.parseEquality();
			binary.pos = binary.pos.extendedTo(binary.right.pos);
			expr = binary;
		}
		return expr;
	}
	,parseEquality: function() {
		var expr = this.parseComparison();
		while(this.match(loreline_TokenType.OpEquals) || this.match(loreline_TokenType.OpNotEquals)) {
			var op = this.previous().type;
			var binary = this.attachComments(new loreline_NBinary(this.nextNodeId++,expr.pos,expr,op,null));
			binary.right = this.parseComparison();
			binary.pos = binary.pos.extendedTo(binary.right.pos);
			expr = binary;
		}
		return expr;
	}
	,parseComparison: function() {
		var expr = this.parseAdditive();
		while(this.match(loreline_TokenType.OpGreater) || this.match(loreline_TokenType.OpGreaterEq) || this.match(loreline_TokenType.OpLess) || this.match(loreline_TokenType.OpLessEq)) {
			var op = this.previous().type;
			var binary = this.attachComments(new loreline_NBinary(this.nextNodeId++,expr.pos,expr,op,null));
			binary.right = this.parseAdditive();
			binary.pos = binary.pos.extendedTo(binary.right.pos);
			expr = binary;
		}
		return expr;
	}
	,parseAdditive: function() {
		var expr = this.parseMultiplicative();
		while(this.match(loreline_TokenType.OpPlus) || this.match(loreline_TokenType.OpMinus)) {
			var op = this.previous().type;
			var binary = this.attachComments(new loreline_NBinary(this.nextNodeId++,expr.pos,expr,op,null));
			binary.right = this.parseMultiplicative();
			binary.pos = binary.pos.extendedTo(binary.right.pos);
			expr = binary;
		}
		return expr;
	}
	,parseMultiplicative: function() {
		var expr = this.parseUnary();
		while(this.match(loreline_TokenType.OpMultiply) || this.match(loreline_TokenType.OpDivide) || this.match(loreline_TokenType.OpModulo)) {
			var op = this.previous().type;
			var binary = this.attachComments(new loreline_NBinary(this.nextNodeId++,expr.pos,expr,op,null));
			binary.right = this.parseUnary();
			binary.pos = binary.pos.extendedTo(binary.right.pos);
			expr = binary;
		}
		return expr;
	}
	,parseUnary: function() {
		if(this.match(loreline_TokenType.OpNot) || this.match(loreline_TokenType.OpMinus)) {
			var op = this.previous().type;
			var unary = this.attachComments(new loreline_NUnary(this.nextNodeId++,this.previous().pos,op,null));
			unary.operand = this.parseUnary();
			unary.pos = unary.pos.extendedTo(unary.operand.pos);
			return unary;
		}
		return this.parsePrimary();
	}
	,parsePrimary: function() {
		var startPos = this.currentPos();
		var _g = this.tokens[this.current].type;
		switch(_g._hx_index) {
		case 8:
			var _g1 = _g.quotes;
			var _g1 = _g.s;
			var _g1 = _g.attachments;
			return this.parseStringLiteral();
		case 9:
			var n = _g.n;
			this.advance();
			return this.attachComments(new loreline_NLiteral(this.nextNodeId++,startPos,n,loreline_LiteralType.Number));
		case 10:
			var b = _g.b;
			this.advance();
			return this.attachComments(new loreline_NLiteral(this.nextNodeId++,startPos,b,loreline_LiteralType.Boolean));
		case 11:
			this.advance();
			return this.attachComments(new loreline_NLiteral(this.nextNodeId++,startPos,null,loreline_LiteralType.Null));
		case 12:
			var name = _g.name;
			this.advance();
			return this.parseIdentifierExpression(startPos,name);
		case 36:
			return this.parseObjectLiteral();
		case 38:
			this.advance();
			var expr = this.parseExpression();
			this.expect(loreline_TokenType.RParen);
			return expr;
		case 40:
			return this.parseArrayLiteral();
		default:
			throw haxe_Exception.thrown(new loreline_ParseError("Unexpected token in expression",this.currentPos()));
		}
	}
	,parseStringLiteral: function() {
		var stringLiteralPos = this.currentPos();
		var parts = [];
		var _g = this.tokens[this.current].type;
		if(_g._hx_index == 8) {
			var quotes = _g.quotes;
			var content = _g.s;
			var attachments = _g.attachments;
			var startPos = quotes != 0 ? stringLiteralPos.withOffset(content,1,stringLiteralPos.length - 2) : stringLiteralPos;
			var currentPos = 0;
			if(attachments == null || attachments.length == 0) {
				var partPos = this.makeStringPartPosition(startPos,content,0);
				partPos.length = startPos.length;
				var literalId = this.nextNodeId++;
				var partId = this.nextNodeId++;
				parts.push(new loreline_NStringPart(partId,partPos,loreline_StringPartType.Raw(content)));
				this.advance();
				return this.attachComments(new loreline_NStringLiteral(literalId,stringLiteralPos,quotes,parts));
			}
			var stringLiteral = this.attachComments(new loreline_NStringLiteral(this.nextNodeId++,stringLiteralPos,quotes,parts));
			var _g = 0;
			var _g1 = attachments.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = attachments[i];
				switch(_g2._hx_index) {
				case 0:
					var braces = _g2.braces;
					var inTag = _g2.inTag;
					var tokens = _g2.expr;
					var start = _g2.start;
					var length = _g2.length;
					if(currentPos >= start + length) {
						continue;
					}
					if(start > currentPos) {
						var partPos = this.makeStringPartPosition(startPos,content,currentPos);
						partPos.length = start - currentPos;
						parts.push(new loreline_NStringPart(this.nextNodeId++,partPos,loreline_StringPartType.Raw(HxOverrides.substr(content,currentPos,start - currentPos))));
					}
					parts.push(this.parseStringInterpolation(braces,inTag,tokens,start,length,content));
					currentPos = start + length;
					break;
				case 1:
					var closing = _g2.closing;
					var start1 = _g2.start;
					var length1 = _g2.length;
					if(currentPos >= start1 + length1) {
						continue;
					}
					if(start1 > currentPos) {
						var partPos1 = this.makeStringPartPosition(startPos,content,currentPos);
						partPos1.length = start1 - currentPos;
						parts.push(new loreline_NStringPart(this.nextNodeId++,partPos1,loreline_StringPartType.Raw(HxOverrides.substr(content,currentPos,start1 - currentPos))));
					}
					parts.push(this.parseStringTag(closing,start1,length1,content,quotes,attachments));
					currentPos = start1 + length1;
					break;
				}
			}
			if(currentPos < content.length) {
				var partPos = this.makeStringPartPosition(startPos,content,currentPos);
				partPos.length = content.length - currentPos;
				parts.push(new loreline_NStringPart(this.nextNodeId++,partPos,loreline_StringPartType.Raw(HxOverrides.substr(content,currentPos,null))));
			}
			this.advance();
			return stringLiteral;
		} else {
			throw haxe_Exception.thrown(new loreline_ParseError("Expected string, got " + Std.string(this.tokens[this.current].type),this.currentPos()));
		}
	}
	,makeStringPartPosition: function(stringStart,content,offset) {
		var line = stringStart.line;
		var column = stringStart.column;
		var _g = 0;
		var _g1 = offset;
		while(_g < _g1) {
			var i = _g++;
			if(HxOverrides.cca(content,i) == 10) {
				++line;
				column = 1;
			} else {
				++column;
			}
		}
		return new loreline_Position(line,column,stringStart.offset + offset);
	}
	,makeAccess: function(pos,target,name,namePos) {
		if(name != null) {
			if(name.length == 0) {
				this.addError(new loreline_ParseError("Invalid access: " + (name != null ? "'" + name + "'" : "null"),pos));
			}
			if(target != null) {
				if(namePos != null) {
					pos = new loreline_Position(target.pos.line,target.pos.column,target.pos.offset,namePos.offset + name.length - target.pos.offset);
				} else {
					throw haxe_Exception.thrown(new loreline_ParseError("Invalid access (missing name position)",pos));
				}
			} else if(pos.length == 0) {
				var tmp = namePos != null ? namePos.length : null;
				pos = new loreline_Position(pos.line,pos.column,pos.offset,tmp != null ? tmp : name.length);
			}
		}
		return new loreline_NAccess(this.nextNodeId++,pos,target,name);
	}
	,parseStringInterpolation: function(braces,inTag,tokens,start,length,content) {
		var tmp = tokens[0];
		var tmp1 = tmp != null ? tmp.pos : null;
		var pos = this.makeStringPartPosition(tmp1 != null ? tmp1 : this.currentPos(),content,start);
		pos.length = length;
		if(tokens.length == 0) {
			var tmp = tokens[0];
			var tmp1 = tmp != null ? tmp.pos : null;
			this.addError(new loreline_ParseError("Empty interpolation",tmp1 != null ? tmp1 : this.currentPos()));
			var tmp = this.nextNodeId++;
			var tmp1 = this.nextNodeId++;
			var tmp2 = tokens[0];
			var tmp3 = tmp2 != null ? tmp2.pos : null;
			return new loreline_NStringPart(tmp,pos,loreline_StringPartType.Expr(new loreline_NLiteral(tmp1,tmp3 != null ? tmp3 : this.currentPos(),null,loreline_LiteralType.Null)));
		}
		var expr = null;
		if(!braces && tokens.length > 0) {
			var target = null;
			var i = 0;
			var prevIsDot = false;
			while(i < tokens.length) {
				var token = tokens[i];
				++i;
				var _g = token.type;
				switch(_g._hx_index) {
				case 12:
					var name = _g.name;
					if(target == null) {
						target = this.attachComments(this.makeAccess(token.pos,null,name,null));
					} else if(prevIsDot) {
						target = this.attachComments(this.makeAccess(token.pos,target,name,token.pos));
					} else {
						this.addError(new loreline_ParseError("Missing dot in field access",token.pos));
						var tmp = this.nextNodeId++;
						var tmp1 = this.nextNodeId++;
						var tmp2 = tokens[0];
						var tmp3 = tmp2 != null ? tmp2.pos : null;
						return new loreline_NStringPart(tmp,pos,loreline_StringPartType.Expr(new loreline_NLiteral(tmp1,tmp3 != null ? tmp3 : this.currentPos(),null,loreline_LiteralType.Null)));
					}
					prevIsDot = false;
					break;
				case 35:
					if(target == null) {
						this.addError(new loreline_ParseError("Leading dot in field access",token.pos));
						var tmp4 = this.nextNodeId++;
						var tmp5 = this.nextNodeId++;
						var tmp6 = tokens[0];
						var tmp7 = tmp6 != null ? tmp6.pos : null;
						return new loreline_NStringPart(tmp4,pos,loreline_StringPartType.Expr(new loreline_NLiteral(tmp5,tmp7 != null ? tmp7 : this.currentPos(),null,loreline_LiteralType.Null)));
					}
					prevIsDot = true;
					break;
				case 38:
					if(target == null) {
						this.addError(new loreline_ParseError("Function call without target",token.pos));
						var tmp8 = this.nextNodeId++;
						var tmp9 = this.nextNodeId++;
						var tmp10 = tokens[0];
						var tmp11 = tmp10 != null ? tmp10.pos : null;
						return new loreline_NStringPart(tmp8,pos,loreline_StringPartType.Expr(new loreline_NLiteral(tmp9,tmp11 != null ? tmp11 : this.currentPos(),null,loreline_LiteralType.Null)));
					}
					var callStart = token.pos;
					var argTokens = [];
					var currentArgTokens = [];
					var parenLevel = 1;
					while(i < tokens.length && parenLevel > 0) {
						var t = tokens[i];
						++i;
						switch(t.type._hx_index) {
						case 34:
							if(parenLevel == 1) {
								if(currentArgTokens.length > 0) {
									argTokens.push(currentArgTokens);
									currentArgTokens = [];
								}
							} else {
								currentArgTokens.push(t);
							}
							break;
						case 38:
							++parenLevel;
							currentArgTokens.push(t);
							break;
						case 39:
							--parenLevel;
							if(parenLevel > 0) {
								currentArgTokens.push(t);
							} else if(currentArgTokens.length > 0) {
								argTokens.push(currentArgTokens);
							}
							break;
						default:
							currentArgTokens.push(t);
						}
					}
					if(parenLevel > 0) {
						this.addError(new loreline_ParseError("Unterminated function call",callStart));
						var tmp12 = this.nextNodeId++;
						var tmp13 = this.nextNodeId++;
						var tmp14 = tokens[0];
						var tmp15 = tmp14 != null ? tmp14.pos : null;
						return new loreline_NStringPart(tmp12,pos,loreline_StringPartType.Expr(new loreline_NLiteral(tmp13,tmp15 != null ? tmp15 : this.currentPos(),null,loreline_LiteralType.Null)));
					}
					var args = [];
					var _g1 = 0;
					while(_g1 < argTokens.length) {
						var argTokenGroup = argTokens[_g1];
						++_g1;
						var tempParser = new loreline_Parser(argTokenGroup);
						tempParser.nextNodeId = this.nextNodeId;
						args.push(tempParser.parseExpression());
						this.nextNodeId = tempParser.nextNodeId;
					}
					target = this.attachComments(new loreline_NCall(this.nextNodeId++,callStart.extendedTo(tokens[i - 1].pos),target,args));
					prevIsDot = false;
					break;
				case 40:
					if(target == null) {
						this.addError(new loreline_ParseError("Array access without target",token.pos));
						var tmp16 = this.nextNodeId++;
						var tmp17 = this.nextNodeId++;
						var tmp18 = tokens[0];
						var tmp19 = tmp18 != null ? tmp18.pos : null;
						return new loreline_NStringPart(tmp16,pos,loreline_StringPartType.Expr(new loreline_NLiteral(tmp17,tmp19 != null ? tmp19 : this.currentPos(),null,loreline_LiteralType.Null)));
					}
					var arrayStart = token.pos;
					var arrayTokens = [];
					var bracketLevel = 1;
					var lastRBracket = null;
					while(i < tokens.length && bracketLevel > 0) {
						var t1 = tokens[i];
						++i;
						switch(t1.type._hx_index) {
						case 40:
							++bracketLevel;
							arrayTokens.push(t1);
							break;
						case 41:
							--bracketLevel;
							if(bracketLevel > 0) {
								arrayTokens.push(t1);
							}
							lastRBracket = t1;
							break;
						default:
							arrayTokens.push(t1);
						}
					}
					if(bracketLevel > 0) {
						this.addError(new loreline_ParseError("Unterminated array access",arrayStart));
						var tmp20 = this.nextNodeId++;
						var tmp21 = this.nextNodeId++;
						var tmp22 = tokens[0];
						var tmp23 = tmp22 != null ? tmp22.pos : null;
						return new loreline_NStringPart(tmp20,pos,loreline_StringPartType.Expr(new loreline_NLiteral(tmp21,tmp23 != null ? tmp23 : this.currentPos(),null,loreline_LiteralType.Null)));
					}
					var tempParser1 = new loreline_Parser(arrayTokens);
					tempParser1.nextNodeId = this.nextNodeId;
					var indexExpr = tempParser1.parseExpression();
					this.nextNodeId = tempParser1.nextNodeId;
					var accessPos = pos.extendedTo(tokens[i - 1].pos);
					accessPos.length += 1;
					target = this.attachComments(new loreline_NArrayAccess(this.nextNodeId++,accessPos,target,indexExpr));
					prevIsDot = false;
					break;
				default:
					this.addError(new loreline_ParseError("Unexpected token in field access: " + Std.string(token.type),token.pos));
					var tmp24 = this.nextNodeId++;
					var tmp25 = this.nextNodeId++;
					var tmp26 = tokens[0];
					var tmp27 = tmp26 != null ? tmp26.pos : null;
					return new loreline_NStringPart(tmp24,pos,loreline_StringPartType.Expr(new loreline_NLiteral(tmp25,tmp27 != null ? tmp27 : this.currentPos(),null,loreline_LiteralType.Null)));
				}
			}
			if(prevIsDot) {
				this.addError(new loreline_ParseError("Trailing dot in field access",tokens[tokens.length - 1].pos));
			}
			expr = target;
		} else {
			var tempParser = new loreline_Parser(tokens);
			tempParser.nextNodeId = this.nextNodeId;
			expr = tempParser.parseExpression();
			this.nextNodeId = tempParser.nextNodeId;
			if(!tempParser.isAtEnd()) {
				this.addError(new loreline_ParseError("Unexpected tokens after interpolation expression",tempParser.tokens[tempParser.current].pos));
			}
		}
		var partPos = new loreline_Position(pos.line,pos.column + (braces ? 1 : 0),pos.offset - (braces ? 2 : 0),length);
		return new loreline_NStringPart(this.nextNodeId++,partPos,loreline_StringPartType.Expr(expr));
	}
	,parseStringTag: function(closing,start,length,content,quotes,attachments) {
		var pos = this.makeStringPartPosition(this.currentPos(),content,start);
		pos.length = length;
		if(quotes != 0) {
			pos = pos.withOffset(content,1,pos.length);
		}
		var offsetStart = closing ? 2 : 1;
		var innerStart = start + offsetStart;
		var innerLength = length - (closing ? 3 : 2);
		var innerEnd = innerStart + innerLength;
		var tagId = this.nextNodeId++;
		var hasAttachmentsInRange = false;
		if(attachments != null) {
			var _g = 0;
			var _g1 = attachments.length;
			_hx_loop1: while(_g < _g1) {
				var i = _g++;
				var _g2 = attachments[i];
				switch(_g2._hx_index) {
				case 0:
					var _g3 = _g2.braces;
					var _g4 = _g2.inTag;
					var _g5 = _g2.expr;
					var aStart = _g2.start;
					var aLength = _g2.length;
					var aEnd = aStart + aLength;
					if(aStart >= innerStart && aEnd <= innerEnd) {
						hasAttachmentsInRange = true;
						break _hx_loop1;
					}
					break;
				case 1:
					var _g6 = _g2.closing;
					var _g7 = _g2.start;
					var _g8 = _g2.length;
					continue;
				}
			}
		}
		if(!hasAttachmentsInRange) {
			var partPos = this.makeStringPartPosition(pos,content,innerStart);
			partPos.length = innerLength;
			var literalId = this.nextNodeId++;
			var partId = this.nextNodeId++;
			return new loreline_NStringPart(tagId,pos,loreline_StringPartType.Tag(closing,this.attachComments(new loreline_NStringLiteral(literalId,partPos,0,[new loreline_NStringPart(partId,partPos,loreline_StringPartType.Raw(HxOverrides.substr(content,innerStart,innerLength)))]))));
		}
		var parts = [];
		var stringLiteral = this.attachComments(new loreline_NStringLiteral(this.nextNodeId++,pos,0,parts));
		var currentPos = innerStart;
		if(attachments != null) {
			var _g = 0;
			var _g1 = attachments.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = attachments[i];
				switch(_g2._hx_index) {
				case 0:
					var _g3 = _g2.inTag;
					var braces = _g2.braces;
					var tokens = _g2.expr;
					var aStart = _g2.start;
					var aLength = _g2.length;
					var aEnd = aStart + aLength;
					if(aStart >= innerStart && aEnd <= innerEnd) {
						if(aStart > currentPos) {
							var partPos = this.makeStringPartPosition(pos,HxOverrides.substr(content,start,null),currentPos - start + offsetStart);
							partPos.length = aStart - currentPos;
							parts.push(new loreline_NStringPart(this.nextNodeId++,partPos,loreline_StringPartType.Raw(HxOverrides.substr(content,currentPos,aStart - currentPos))));
						}
						parts.push(this.parseStringInterpolation(braces,true,tokens,aStart,aLength,content));
						currentPos = aEnd;
					}
					break;
				case 1:
					var _g4 = _g2.closing;
					var _g5 = _g2.start;
					var _g6 = _g2.length;
					continue;
				}
			}
		}
		if(currentPos < innerEnd) {
			var partPos = this.makeStringPartPosition(pos,HxOverrides.substr(content,start,null),currentPos - start + offsetStart);
			partPos.length = innerStart + innerEnd - currentPos;
			parts.push(new loreline_NStringPart(this.nextNodeId++,partPos,loreline_StringPartType.Raw(HxOverrides.substr(content,currentPos,innerEnd - currentPos))));
		}
		return new loreline_NStringPart(tagId,pos,loreline_StringPartType.Tag(closing,stringLiteral));
	}
	,parseIdentifierExpression: function(startPos,name) {
		var expr = this.attachComments(this.makeAccess(startPos,null,name,null));
		while(true) if(this.match(loreline_TokenType.Dot)) {
			var prop = null;
			var propPos = this.currentPos();
			if(this.checkIdentifier()) {
				prop = this.expectIdentifier();
			} else {
				this.addError(new loreline_ParseError("Expected identifier after '.'",this.currentPos()));
				prop = "";
			}
			expr = this.attachComments(this.makeAccess(startPos,expr,prop,propPos));
		} else if(this.match(loreline_TokenType.LBracket)) {
			var index = this.parseExpression();
			this.expect(loreline_TokenType.RBracket);
			var accessPos = startPos.extendedTo(this.previous().pos);
			expr = this.attachComments(new loreline_NArrayAccess(this.nextNodeId++,accessPos,expr,index));
		} else if(this.match(loreline_TokenType.LParen)) {
			var args = this.parseCallArguments();
			expr = this.attachComments(new loreline_NCall(this.nextNodeId++,startPos.extendedTo(this.previous().pos),expr,args));
		} else {
			break;
		}
		return expr;
	}
	,parseArrayLiteral: function() {
		var startPos = this.currentPos();
		var elements = [];
		var literal = new loreline_NLiteral(this.nextNodeId++,startPos,elements,loreline_LiteralType.Array);
		this.expect(loreline_TokenType.LBracket);
		this.attachComments(literal);
		var needsSeparator = false;
		while(!this.check(loreline_TokenType.RBracket) && !this.isAtEnd()) {
			if(needsSeparator) {
				while(this.match(loreline_TokenType.LineBreak)) needsSeparator = false;
				if(this.match(loreline_TokenType.Comma)) {
					needsSeparator = false;
				}
			}
			while(this.match(loreline_TokenType.LineBreak) || this.match(loreline_TokenType.Indent) || this.match(loreline_TokenType.Unindent)) needsSeparator = false;
			if(!this.check(loreline_TokenType.RBracket) && needsSeparator) {
				throw haxe_Exception.thrown(new loreline_ParseError("Expected comma or line break between elements",this.currentPos()));
			}
			while(this.match(loreline_TokenType.LineBreak) || this.match(loreline_TokenType.Indent) || this.match(loreline_TokenType.Unindent)) {
			}
			if(!this.check(loreline_TokenType.RBracket)) {
				elements.push(this.parseExpression());
			}
			var prev = this.previous();
			needsSeparator = prev.type != loreline_TokenType.Colon && prev.type != loreline_TokenType.LineBreak;
		}
		while(this.match(loreline_TokenType.LineBreak) || this.match(loreline_TokenType.Indent) || this.match(loreline_TokenType.Unindent)) {
		}
		this.expect(loreline_TokenType.RBracket);
		literal.pos = literal.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
		return literal;
	}
	,parseObjectLiteral: function() {
		var startPos = this.currentPos();
		var fields = [];
		var blockEnd = this.parseBlockStart().type == loreline_TokenType.Indent ? loreline_TokenType.Unindent : loreline_TokenType.RBrace;
		var style = blockEnd == loreline_TokenType.RBrace ? 1 : 0;
		var literal = new loreline_NLiteral(this.nextNodeId++,blockEnd != loreline_TokenType.RBrace ? this.nextNonWhitespaceOrComment().pos : startPos,fields,loreline_LiteralType.Object(style));
		this.attachComments(literal);
		var needsSeparator = false;
		while(!this.check(blockEnd) && !this.isAtEnd()) {
			if(needsSeparator) {
				while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) needsSeparator = false;
				if(this.match(loreline_TokenType.Comma)) {
					needsSeparator = false;
				}
			}
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) needsSeparator = false;
			if(!this.check(blockEnd) && needsSeparator) {
				throw haxe_Exception.thrown(new loreline_ParseError("Expected comma or line break between fields",this.currentPos()));
			}
			while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
			}
			if(!this.check(blockEnd)) {
				fields.push(this.parseObjectField());
			}
			var prev = this.previous();
			needsSeparator = prev.type != loreline_TokenType.Colon && prev.type != loreline_TokenType.LineBreak;
		}
		while(this.match(loreline_TokenType.LineBreak) || blockEnd != loreline_TokenType.Unindent && this.match(loreline_TokenType.Unindent)) {
		}
		this.expect(blockEnd);
		literal.pos = literal.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
		return literal;
	}
	,parseCallArguments: function() {
		var args = [];
		if(!this.check(loreline_TokenType.RParen)) {
			do {
				while(this.match(loreline_TokenType.LineBreak)) {
				}
				args.push(this.parseExpression());
				while(this.match(loreline_TokenType.LineBreak)) {
				}
			} while(this.match(loreline_TokenType.Comma));
		}
		this.expect(loreline_TokenType.RParen);
		return args;
	}
	,parseConditionExpression: function() {
		var hasParen = this.match(loreline_TokenType.LParen);
		var expr = null;
		try {
			expr = this.parseExpression();
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof loreline_ParseError)) {
				var e = _g1;
				this.addError(e);
				expr = new loreline_NLiteral(this.nextNodeId++,this.currentPos(),null,loreline_LiteralType.Null);
			} else {
				throw _g;
			}
		}
		if(hasParen) {
			this.expect(loreline_TokenType.RParen);
		}
		return expr;
	}
	,match: function(type) {
		if(this.check(type)) {
			this.advance();
			return true;
		}
		return false;
	}
	,isAtLineBreak: function() {
		if(!this.lineBreakAfterToken) {
			return this.tokens[this.current].type == loreline_TokenType.LineBreak;
		} else {
			return true;
		}
	}
	,expect: function(type) {
		if(this.check(type)) {
			return this.advance();
		} else {
			var error = new loreline_ParseError("Expected " + Std.string(type) + ", got " + (this.isAtEnd() ? "EoF" : Std.string(this.tokens[this.current].type)),this.tokens[Math.min(this.current,this.tokens.length - 1) | 0].pos);
			switch(type._hx_index) {
			case 37:case 39:case 45:
				this.addError(error);
				return new loreline_Token(type,this.currentPos());
			default:
			}
			throw haxe_Exception.thrown(error);
		}
	}
	,checkIdentifier: function() {
		var _g = this.tokens[this.current].type;
		if(_g._hx_index == 12) {
			var name = _g.name;
			return true;
		} else {
			return false;
		}
	}
	,expectIdentifier: function() {
		var _g = this.tokens[this.current].type;
		if(_g._hx_index == 12) {
			var name = _g.name;
			this.advance();
			return name;
		} else {
			throw haxe_Exception.thrown(new loreline_ParseError("Expected identifier, got " + Std.string(this.tokens[this.current].type),this.currentPos()));
		}
	}
	,attachComments: function(node) {
		if(this.pendingComments == null || this.pendingComments.length == 0) {
			return node;
		}
		var nodeStart = node.pos;
		var remainingComments = null;
		var _g = 0;
		var _g1 = this.pendingComments.length;
		while(_g < _g1) {
			var i = _g++;
			var comment = this.pendingComments[i];
			if(comment.pos.line < nodeStart.line) {
				if(node.leadingComments == null) {
					node.leadingComments = [];
				}
				node.leadingComments.push(comment);
			} else if(comment.pos.line == nodeStart.line) {
				if(node.trailingComments == null) {
					node.trailingComments = [];
				}
				node.trailingComments.push(comment);
			} else {
				if(remainingComments == null) {
					remainingComments = [];
				}
				remainingComments.push(comment);
			}
		}
		this.pendingComments = remainingComments;
		return node;
	}
	,attachElseComments: function(node,elseToken) {
		if(this.pendingComments != null) {
			var nodeStart = elseToken.pos;
			var remainingComments = [];
			var _g = 0;
			var _g1 = this.pendingComments;
			while(_g < _g1.length) {
				var comment = _g1[_g];
				++_g;
				if(comment.pos.line < nodeStart.line) {
					if(node.elseLeadingComments == null) {
						node.elseLeadingComments = [];
					}
					node.elseLeadingComments.push(comment);
				} else if(comment.pos.line == nodeStart.line) {
					if(node.elseTrailingComments == null) {
						node.elseTrailingComments = [];
					}
					node.elseTrailingComments.push(comment);
				} else {
					remainingComments.push(comment);
				}
			}
			this.pendingComments = remainingComments;
		}
		return node;
	}
	,synchronize: function() {
		this.advance();
		while(!this.isAtEnd()) {
			var _g = this.tokens[this.current].type;
			switch(_g._hx_index) {
			case 8:
				var _g1 = _g.quotes;
				var _g2 = _g.s;
				var _g3 = _g.attachments;
				if(this.previous().type == loreline_TokenType.RBrace) {
					return;
				}
				this.advance();
				break;
			case 32:
				this.advance();
				if(this.check(loreline_TokenType.Dot) || loreline_TokenTypeHelpers.isIdentifier(this.tokens[this.current].type)) {
					this.advance();
				}
				return;
			case 1:case 2:case 3:case 4:case 5:case 37:case 44:
				return;
			default:
				this.advance();
			}
		}
	}
	,requiresNewLine: function() {
		switch(this.tokens[this.current].type._hx_index) {
		case 6:case 32:case 37:
			return false;
		default:
			return true;
		}
	}
	,addError: function(error) {
		if(this.errors == null) {
			this.errors = [];
		}
		if(this.errors.indexOf(error) == -1) {
			this.errors.push(error);
		}
		return error;
	}
	,getErrors: function() {
		if(this.errors == null) {
			this.errors = [];
		}
		return this.errors;
	}
	,__class__: loreline_Parser
};
var loreline_Position = function(line,column,offset,length) {
	if(length == null) {
		length = 0;
	}
	this.line = line;
	this.column = column;
	this.offset = offset;
	this.length = length;
};
loreline_Position.__name__ = "loreline.Position";
loreline_Position.prototype = {
	toString: function() {
		return "(" + this.line + ":" + this.column + ":" + this.offset + ":" + this.length + ")";
	}
	,toJson: function() {
		var json = { line : this.line, column : this.column, offset : this.offset};
		if(this.length != 0) {
			json["length"] = this.length;
		}
		return json;
	}
	,withOffset: function(content,additionalOffset,newLength) {
		if(newLength == null) {
			newLength = 0;
		}
		if(additionalOffset == 0) {
			return new loreline_Position(this.line,this.column,this.offset,newLength);
		}
		var currentLine = this.line;
		var currentColumn = this.column;
		var currentOffset = this.offset;
		if(additionalOffset > 0) {
			var chars = 0;
			while(chars < additionalOffset) {
				if(currentOffset < content.length && HxOverrides.cca(content,currentOffset) == 10) {
					++currentLine;
					currentColumn = 1;
				} else {
					++currentColumn;
				}
				++chars;
				++currentOffset;
			}
		} else {
			var chars = 0;
			while(chars > additionalOffset) {
				--currentOffset;
				if(currentOffset >= 0 && HxOverrides.cca(content,currentOffset) == 10) {
					--currentLine;
					var col = 1;
					var scanPos = currentOffset - 1;
					while(scanPos >= 0) {
						var c = HxOverrides.cca(content,scanPos);
						if(c == 10) {
							break;
						}
						++col;
						--scanPos;
					}
					currentColumn = col;
				} else {
					--currentColumn;
				}
				--chars;
			}
		}
		if(currentOffset < 0) {
			currentOffset = 0;
			currentLine = 1;
			currentColumn = 1;
		}
		return new loreline_Position(currentLine,currentColumn,currentOffset,newLength);
	}
	,extendedTo: function(endPos) {
		return new loreline_Position(this.line,this.column,this.offset,endPos.offset + endPos.length - this.offset);
	}
	,__class__: loreline_Position
};
var loreline_Printer = function(indent,newline) {
	if(newline == null) {
		newline = "\n";
	}
	if(indent == null) {
		indent = "    ";
	}
	this.enableComments = true;
	this._indent = indent;
	this._newline = newline;
	this._beginLine = 0;
	this._lastChar = -1;
	this._level = 0;
	this._buf = new StringBuf();
};
loreline_Printer.__name__ = "loreline.Printer";
loreline_Printer.prototype = {
	indent: function() {
		this._level++;
	}
	,unindent: function() {
		this._level--;
	}
	,write: function(s) {
		if(s.length > 0) {
			if(this._beginLine > 0) {
				this.tab();
				this._beginLine = 0;
			}
			this._buf.b += s == null ? "null" : "" + s;
			this._lastChar = HxOverrides.cca(s,s.length - 1);
			var i = s.length - 1;
			while(i >= 0) {
				var c = HxOverrides.cca(s,i);
				if(c != 32 && c != 10 && c != 13 && c != 9) {
					this._lastVisibleChar = c;
					break;
				}
				--i;
			}
		}
		return this;
	}
	,_writeln: function(s) {
		if(s == null) {
			s = "";
		}
		this.write(s);
		return this.newline();
	}
	,newline: function() {
		if(this._beginLine < 2) {
			this._buf.b += Std.string(this._newline);
			this._beginLine++;
		}
		return this;
	}
	,tab: function() {
		var _g = 0;
		var _g1 = this._level;
		while(_g < _g1) {
			var _ = _g++;
			this._buf.b += Std.string(this._indent);
		}
		return this;
	}
	,_line: function(s) {
		this.tab();
		this._buf.b += s == null ? "null" : "" + s;
		return this.newline();
	}
	,clear: function() {
		this._level = 0;
		this._buf = new StringBuf();
	}
	,toString: function() {
		return this._buf.b;
	}
	,print: function(node) {
		this._level = 0;
		this._buf = new StringBuf();
		this._beginLine = 1;
		this.printNode(node);
		return this.toString();
	}
	,printNode: function(node) {
		switch(js_Boot.getClass(node)) {
		case loreline_NAccess:
			this.printAccess(node);
			break;
		case loreline_NArrayAccess:
			this.printArrayAccess(node);
			break;
		case loreline_NAssign:
			this.printAssignment(node);
			break;
		case loreline_NBeatDecl:
			this.printBeatDecl(node);
			break;
		case loreline_NBinary:
			this.printBinary(node);
			break;
		case loreline_NCall:
			this.printCall(node);
			break;
		case loreline_NCharacterDecl:
			this.printCharacterDecl(node);
			break;
		case loreline_NChoiceOption:
			this.printChoiceOption(node);
			break;
		case loreline_NChoiceStatement:
			this.printChoiceStatement(node);
			break;
		case loreline_NDialogueStatement:
			this.printDialogueStatement(node);
			break;
		case loreline_NIfStatement:
			this.printIfStatement(node);
			break;
		case loreline_NLiteral:
			this.printLiteral(node);
			break;
		case loreline_NStateDecl:
			this.printStateDecl(node);
			break;
		case loreline_NStringLiteral:
			this.printStringLiteral(node);
			break;
		case loreline_NTextStatement:
			this.printTextStatement(node);
			break;
		case loreline_NTransition:
			this.printTransition(node);
			break;
		case loreline_NUnary:
			this.printUnary(node);
			break;
		case loreline_Script:
			this.printScript(node);
			break;
		default:
			var c = js_Boot.getClass(node);
			throw haxe_Exception.thrown("Unsupported node type: " + c.__name__);
		}
	}
	,printLeadingComments: function(node) {
		if(this.enableComments && node.leadingComments != null) {
			var _g = 0;
			var _g1 = node.leadingComments;
			while(_g < _g1.length) {
				var comment = _g1[_g];
				++_g;
				if(comment.multiline) {
					this.write("/*" + comment.content + "*/");
					this.newline();
				} else {
					this.write("//" + comment.content);
					this.newline();
				}
			}
		}
	}
	,printTrailingComments: function(node) {
		if(this.enableComments && node.trailingComments != null) {
			var _g = 0;
			var _g1 = node.trailingComments;
			while(_g < _g1.length) {
				var comment = _g1[_g];
				++_g;
				if(this._lastChar != 32 && this._beginLine == 0) {
					this.write(" ");
				}
				if(comment.multiline) {
					this.write("/*" + comment.content + "*/ ");
				} else {
					this.write("//" + comment.content);
					this.newline();
				}
			}
		}
	}
	,printImport: function(imp) {
		this.printLeadingComments(imp);
		this.write("import \"" + imp.path + "\"");
		this.newline();
		this.printTrailingComments(imp);
	}
	,printScript: function(script) {
		var _g = 0;
		var _g1 = script.declarations;
		while(_g < _g1.length) {
			var decl = _g1[_g];
			++_g;
			this.printNode(decl);
		}
	}
	,printStateDecl: function(state) {
		this.newline();
		this.newline();
		this.printLeadingComments(state);
		if(state.temporary) {
			this.write("new ");
		}
		this.write("state ");
		this.printTrailingComments(state);
		this.write("{");
		this.newline();
		this._level++;
		var first = true;
		var _g = 0;
		var _g1 = state.fields;
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(!first) {
				if(this._beginLine == 0) {
					this.newline();
				}
			}
			first = false;
			this.printLeadingComments(field);
			this.write("" + field.name + ": ");
			this.printTrailingComments(field);
			this.printNode(field.value);
		}
		this.newline();
		this._level--;
		this.write("}");
		this.newline();
	}
	,printCharacterDecl: function(char) {
		this.newline();
		this.newline();
		this.printLeadingComments(char);
		this.write("character " + char.name + " ");
		this.printTrailingComments(char);
		this.write("{");
		this.newline();
		this._level++;
		var _g = 0;
		var _g1 = char.fields;
		while(_g < _g1.length) {
			var prop = _g1[_g];
			++_g;
			this.printLeadingComments(prop);
			this.write("" + prop.name + ": ");
			this.printTrailingComments(prop);
			this.printNode(prop.value);
			if(this._beginLine == 0) {
				this.newline();
			}
		}
		this._level--;
		this.write("}");
		this.newline();
	}
	,printBeatDecl: function(beat) {
		this.newline();
		this.newline();
		this.printLeadingComments(beat);
		this.write("beat " + beat.name + " ");
		this.printTrailingComments(beat);
		this.write("{");
		this.newline();
		this.newline();
		this._level++;
		var _g = 0;
		var _g1 = beat.body.length;
		while(_g < _g1) {
			var i = _g++;
			this.printNode(beat.body[i]);
			if(i < beat.body.length - 1) {
				this.newline();
			}
		}
		this._level--;
		if(this._beginLine == 0) {
			this.newline();
		}
		if(this._lastVisibleChar != 125) {
			this.newline();
		}
		this.write("}");
		this.newline();
	}
	,printTextStatement: function(text) {
		this.printLeadingComments(text);
		this.printNode(text.content);
		this.printTrailingComments(text);
	}
	,printDialogueStatement: function(dialogue) {
		this.printLeadingComments(dialogue);
		this.write("" + dialogue.character + ": ");
		this.printTrailingComments(dialogue);
		this.printNode(dialogue.content);
	}
	,printChoiceStatement: function(choice) {
		this.newline();
		this.newline();
		this.printLeadingComments(choice);
		this.write("choice ");
		this.printTrailingComments(choice);
		this.write("{");
		this.newline();
		this._level++;
		var _g = 0;
		var _g1 = choice.options;
		while(_g < _g1.length) {
			var option = _g1[_g];
			++_g;
			this.printNode(option);
		}
		this._level--;
		this.write("}");
		this.newline();
	}
	,printChoiceOption: function(option) {
		this.newline();
		this.newline();
		this.printLeadingComments(option);
		this.printNode(option.text);
		this.printTrailingComments(option);
		if(option.condition != null) {
			this.write(" if ");
			this.printParenExpression(option.condition);
		}
		if(option.body.length > 0) {
			if(option.body.length == 1 && ((option.body[0]) instanceof loreline_NTransition)) {
				this.write(" ");
				this.printNode(option.body[0]);
				if(this._beginLine == 0) {
					this.newline();
				}
			} else {
				this.write(" {");
				this.newline();
				this._level++;
				var _g = 0;
				var _g1 = option.body;
				while(_g < _g1.length) {
					var node = _g1[_g];
					++_g;
					this.printNode(node);
					if(this._beginLine == 0 && node != option.body[option.body.length - 1]) {
						this.newline();
					}
				}
				this._level--;
				this.newline();
				this.write("}");
				this.newline();
			}
		} else {
			this.newline();
		}
	}
	,printIfStatement: function(ifStmt,isElseIf) {
		if(isElseIf == null) {
			isElseIf = false;
		}
		if(!isElseIf) {
			this.newline();
			this.newline();
		}
		this.printLeadingComments(ifStmt);
		this.write("if ");
		this.printParenExpression(ifStmt.condition);
		this.printTrailingComments(ifStmt);
		this.write(" {");
		this.newline();
		this._level++;
		var _g = 0;
		var _g1 = ifStmt.thenBranch.body;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			this.printNode(node);
			this.newline();
		}
		this._level--;
		this.write("}");
		this.newline();
		if(ifStmt.elseBranch != null) {
			if(ifStmt.elseBranch.body.length == 1 && ((ifStmt.elseBranch.body[0]) instanceof loreline_NIfStatement)) {
				this.write("else ");
				this.printIfStatement(ifStmt.elseBranch.body[0],true);
			} else {
				this.write("else {");
				this.newline();
				this._level++;
				var _g = 0;
				var _g1 = ifStmt.elseBranch.body;
				while(_g < _g1.length) {
					var node = _g1[_g];
					++_g;
					this.printNode(node);
					this.newline();
				}
				this._level--;
				this.write("}");
				this.newline();
			}
		}
	}
	,printTransition: function(trans) {
		this.printLeadingComments(trans);
		this.write("-> " + trans.target);
		this.printTrailingComments(trans);
	}
	,printStringLiteral: function(str) {
		var surroundWithQuotes = str.quotes == 1;
		if(surroundWithQuotes) {
			this.printLeadingComments(str);
			this.write("\"");
		}
		var _g = 0;
		var _g1 = str.parts;
		while(_g < _g1.length) {
			var part = _g1[_g];
			++_g;
			var _g2 = part.type;
			switch(_g2._hx_index) {
			case 0:
				var text = _g2.text;
				this.write(text);
				break;
			case 1:
				var expr = _g2.expr;
				var needsBraces = !((expr) instanceof loreline_NAccess);
				this.write("$");
				if(needsBraces) {
					this.write("{");
				}
				this.printNode(expr);
				if(needsBraces) {
					this.write("}");
				}
				break;
			case 2:
				var closing = _g2.closing;
				var content = _g2.expr;
				this.write(closing ? "</" : "<");
				this.printStringLiteral(content);
				this.write(">");
				break;
			}
		}
		if(surroundWithQuotes) {
			this.write("\"");
			this.printTrailingComments(str);
		}
	}
	,printLiteral: function(lit) {
		this.printLeadingComments(lit);
		var _g = lit.type;
		switch(_g._hx_index) {
		case 0:
			this.write(lit.value == null ? "null" : Std.string(lit.value));
			break;
		case 1:
			this.write(lit.value ? "true" : "false");
			break;
		case 2:
			this.write("null");
			break;
		case 3:
			var first = true;
			this.write("[");
			var _g1 = 0;
			var _g2 = lit.value;
			while(_g1 < _g2.length) {
				var elem = _g2[_g1];
				++_g1;
				if(!first) {
					this.write(", ");
				}
				first = false;
				this.printNode(elem);
			}
			this.write("]");
			break;
		case 4:
			var _g1 = _g.style;
			this.write("{");
			this.newline();
			this._level++;
			var first = true;
			var _g = 0;
			var _g1 = lit.value;
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(!first) {
					if(this._beginLine == 0) {
						this.newline();
					}
				}
				first = false;
				this.printLeadingComments(field);
				this.write("" + field.name + ": ");
				this.printTrailingComments(field);
				this.printNode(field.value);
			}
			this.newline();
			this._level--;
			this.write("}");
			break;
		}
		this.printTrailingComments(lit);
	}
	,printAccess: function(access) {
		this.printLeadingComments(access);
		if(access.target != null) {
			this.printNode(access.target);
			this.write(".");
		}
		this.write(access.name);
		this.printTrailingComments(access);
	}
	,printArrayAccess: function(access) {
		this.printLeadingComments(access);
		this.printNode(access.target);
		this.write("[");
		this.printNode(access.index);
		this.write("]");
		this.printTrailingComments(access);
	}
	,printCall: function(call) {
		this.printLeadingComments(call);
		this.printNode(call.target);
		this.write("(");
		var first = true;
		var _g = 0;
		var _g1 = call.args;
		while(_g < _g1.length) {
			var arg = _g1[_g];
			++_g;
			if(!first) {
				this.write(", ");
			}
			first = false;
			this.printNode(arg);
		}
		this.write(")");
		this.printTrailingComments(call);
	}
	,printBinary: function(binary,skipParen) {
		if(skipParen == null) {
			skipParen = false;
		}
		this.printLeadingComments(binary);
		var needsParens;
		if(!skipParen) {
			var _g = binary.op;
			switch(_g._hx_index) {
			case 29:
				var word = _g.word;
				needsParens = true;
				break;
			case 30:
				var word = _g.word;
				needsParens = true;
				break;
			default:
				needsParens = false;
			}
		} else {
			needsParens = false;
		}
		if(needsParens) {
			this.write("(");
		}
		this.printNode(binary.left);
		this.write(" " + this.getOperator(binary.op) + " ");
		this.printNode(binary.right);
		if(needsParens) {
			this.write(")");
		}
		this.printTrailingComments(binary);
	}
	,printUnary: function(unary) {
		this.printLeadingComments(unary);
		this.write(this.getOperator(unary.op));
		this.printTrailingComments(unary);
		this.printNode(unary.operand);
	}
	,printAssignment: function(assign) {
		this.printLeadingComments(assign);
		this.printNode(assign.target);
		this.printTrailingComments(assign);
		this.write(" " + this.getOperator(assign.op) + " ");
		this.printNode(assign.value);
	}
	,printParenExpression: function(expr) {
		this.write("(");
		if(((expr) instanceof loreline_NBinary)) {
			this.printBinary(expr,true);
		} else {
			this.printNode(expr);
		}
		this.write(")");
	}
	,getOperator: function(op) {
		switch(op._hx_index) {
		case 13:
			return "=";
		case 14:
			return "+=";
		case 15:
			return "-=";
		case 16:
			return "*=";
		case 17:
			return "/=";
		case 18:
			return "+";
		case 19:
			return "-";
		case 20:
			return "*";
		case 21:
			return "/";
		case 22:
			return "%";
		case 23:
			return "==";
		case 24:
			return "!=";
		case 25:
			return ">";
		case 26:
			return "<";
		case 27:
			return ">=";
		case 28:
			return "<=";
		case 29:
			if(op.word) {
				return "and";
			} else {
				return "&&";
			}
			break;
		case 30:
			if(op.word) {
				return "or";
			} else {
				return "||";
			}
			break;
		case 31:
			return "!";
		default:
			throw haxe_Exception.thrown("Unsupported operator: " + Std.string(op));
		}
	}
	,__class__: loreline_Printer
};
var loreline_Quotes = {};
loreline_Quotes.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Unquoted";
	case 1:
		return "DoubleQuotes";
	}
};
var loreline_Script = function(id,pos,declarations) {
	loreline_Node.call(this,id,pos);
	this.declarations = declarations;
};
loreline_Script.__name__ = "loreline.Script";
loreline_Script.__super__ = loreline_Node;
loreline_Script.prototype = $extend(loreline_Node.prototype,{
	toJson: function() {
		var json = loreline_Node.prototype.toJson.call(this);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.declarations;
		while(_g1 < _g2.length) {
			var decl = _g2[_g1];
			++_g1;
			_g.push(decl.toJson());
		}
		json.declarations = _g;
		return json;
	}
	,each: function(handleNode) {
		loreline_Node.prototype.each.call(this,handleNode);
		if(this.declarations != null) {
			var _g = 0;
			var _g1 = this.declarations.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.declarations[i];
				handleNode(child,this);
				child.each(handleNode);
			}
		}
	}
	,__class__: loreline_Script
});
var loreline_Utf8 = function() { };
loreline_Utf8.__name__ = "loreline.Utf8";
loreline_Utf8.uLength = function(str) {
	return str.length;
};
loreline_Utf8.uSubstr = function(str,pos,len) {
	return HxOverrides.substr(str,pos,len);
};
loreline_Utf8.uSubstring = function(str,startIndex,endIndex) {
	return str.substring(startIndex,endIndex);
};
loreline_Utf8.uCharCodeAt = function(str,pos) {
	return HxOverrides.cca(str,pos);
};
loreline_Utf8.uIndexOf = function(str,substr,startIndex) {
	return str.indexOf(substr,startIndex);
};
loreline_Utf8.uLastIndexOf = function(str,substr,startIndex) {
	return str.lastIndexOf(substr,startIndex);
};
loreline_Utf8.uToChars = function(str) {
	return str.split("");
};
loreline_Utf8.uCharAt = function(str,pos) {
	return str.charAt(pos);
};
var loreline_lsp_URI = {};
loreline_lsp_URI._new = function(uri) {
	return uri;
};
loreline_lsp_URI.fromString = function(uri) {
	return uri;
};
loreline_lsp_URI.toString = function(this1) {
	return this1;
};
var loreline_lsp_SymbolPrinter = function(content) {
	this.content = content;
};
loreline_lsp_SymbolPrinter.__name__ = "loreline.lsp.SymbolPrinter";
loreline_lsp_SymbolPrinter.prototype = {
	print: function(node) {
		if(js_Boot.getClass(node) == loreline_Script) {
			return this.printScript(node);
		} else {
			return [];
		}
	}
	,printScript: function(script) {
		var symbols = [];
		var _g = 0;
		var _g1 = script.declarations;
		while(_g < _g1.length) {
			var decl = _g1[_g];
			++_g;
			switch(js_Boot.getClass(decl)) {
			case loreline_NBeatDecl:
				symbols.push(this.printBeatDecl(decl));
				break;
			case loreline_NCharacterDecl:
				symbols.push(this.printCharacterDecl(decl));
				break;
			case loreline_NChoiceStatement:
				symbols.push(this.printChoice(decl));
				break;
			case loreline_NIfStatement:
				var _g2 = 0;
				var _g3 = this.printIf(decl);
				while(_g2 < _g3.length) {
					var symbol = _g3[_g2];
					++_g2;
					symbols.push(symbol);
				}
				break;
			case loreline_NStateDecl:
				symbols.push(this.printStateDecl(decl));
				break;
			default:
			}
		}
		return symbols;
	}
	,printBeatDecl: function(beat) {
		var children = [];
		var _g = 0;
		var _g1 = beat.body;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			switch(js_Boot.getClass(node)) {
			case loreline_NBeatDecl:
				children.push(this.printBeatDecl(node));
				break;
			case loreline_NChoiceStatement:
				children.push(this.printChoice(node));
				break;
			case loreline_NIfStatement:
				var _g2 = 0;
				var _g3 = this.printIf(node);
				while(_g2 < _g3.length) {
					var symbol = _g3[_g2];
					++_g2;
					children.push(symbol);
				}
				break;
			case loreline_NStateDecl:
				children.push(this.printStateDecl(node));
				break;
			default:
			}
		}
		return { name : beat.name, detail : "beat", kind : 5, deprecated : false, range : this.rangeFromPosition(beat.pos), selectionRange : this.rangeFromPosition(beat.pos), children : children};
	}
	,printCharacterDecl: function(char) {
		var children = [];
		var _g = 0;
		var _g1 = char.fields;
		while(_g < _g1.length) {
			var prop = _g1[_g];
			++_g;
			children.push({ name : prop.name, detail : this.printValue(prop.value), kind : 7, deprecated : false, range : this.rangeFromPosition(prop.pos), selectionRange : this.rangeFromPosition(prop.pos)});
		}
		return { name : char.name, detail : "character", kind : 19, deprecated : false, range : this.rangeFromPosition(char.pos), selectionRange : this.rangeFromPosition(char.pos), children : children};
	}
	,printStateDecl: function(state) {
		var children = [];
		var fields = state.fields;
		var _g = 0;
		var _g1 = fields;
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			children.push({ name : field.name, detail : this.printValue(field.value), kind : 13, deprecated : false, range : this.rangeFromPosition(field.pos), selectionRange : this.rangeFromPosition(field.pos)});
		}
		return { name : state.temporary ? "new state" : "state", detail : children.length + " fields", kind : 3, deprecated : false, range : this.rangeFromPosition(state.pos), selectionRange : this.rangeFromPosition(state.pos), children : children};
	}
	,printChoice: function(choice) {
		var children = [];
		var _g = 0;
		var _g1 = choice.options;
		while(_g < _g1.length) {
			var option = _g1[_g];
			++_g;
			var label;
			var _g2 = option.text;
			if(_g2 == null) {
				label = "(empty)";
			} else {
				var text = _g2;
				label = this.printValue(text);
			}
			var optionSymbol = { name : label, detail : option.condition != null ? "if " + this.printValue(option.condition) : "", kind : 22, deprecated : false, range : this.rangeFromPosition(option.pos), selectionRange : this.rangeFromPosition(option.pos), children : []};
			var _g3 = 0;
			var _g4 = option.body;
			while(_g3 < _g4.length) {
				var node = _g4[_g3];
				++_g3;
				switch(js_Boot.getClass(node)) {
				case loreline_NChoiceStatement:
					optionSymbol.children.push(this.printChoice(node));
					break;
				case loreline_NIfStatement:
					var _g5 = 0;
					var _g6 = this.printIf(node);
					while(_g5 < _g6.length) {
						var symbol = _g6[_g5];
						++_g5;
						optionSymbol.children.push(symbol);
					}
					break;
				case loreline_NStateDecl:
					optionSymbol.children.push(this.printStateDecl(node));
					break;
				default:
				}
			}
			children.push(optionSymbol);
		}
		return { name : "choice", detail : choice.options.length + " options", kind : 10, deprecated : false, range : this.rangeFromPosition(choice.pos), selectionRange : this.rangeFromPosition(choice.pos), children : children};
	}
	,printIf: function(ifStmt) {
		var result = [];
		if(ifStmt.thenBranch != null) {
			var blockSymbol = this.printBlock("then",null,ifStmt.thenBranch);
			result.push({ name : this.printValue(ifStmt.condition), detail : "condition", kind : 17, deprecated : false, range : this.rangeFromPosition(ifStmt.pos), selectionRange : this.rangeFromPosition(ifStmt.pos), children : blockSymbol.children});
		}
		if(ifStmt.elseBranch != null && ifStmt.elseBranch.body.length == 1) {
			if(js_Boot.getClass(ifStmt.elseBranch.body[0]) == loreline_NIfStatement) {
				var _g = 0;
				var _g1 = this.printIf(ifStmt.elseBranch.body[0]);
				while(_g < _g1.length) {
					var symbol = _g1[_g];
					++_g;
					result.push(symbol);
				}
			}
		}
		return result;
	}
	,printBlock: function(name,detail,block) {
		var children = [];
		var _g = 0;
		var _g1 = block.body;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			switch(js_Boot.getClass(node)) {
			case loreline_NChoiceStatement:
				children.push(this.printChoice(node));
				break;
			case loreline_NIfStatement:
				var _g2 = 0;
				var _g3 = this.printIf(node);
				while(_g2 < _g3.length) {
					var symbol = _g3[_g2];
					++_g2;
					children.push(symbol);
				}
				break;
			case loreline_NStateDecl:
				children.push(this.printStateDecl(node));
				break;
			default:
			}
		}
		return { name : name, detail : detail, kind : 3, deprecated : false, range : this.rangeFromPosition(block.pos), selectionRange : this.rangeFromPosition(block.pos), children : children};
	}
	,printValue: function(node) {
		var printer = new loreline_Printer();
		printer.enableComments = false;
		return StringTools.trim(printer.print(node));
	}
	,rangeFromPosition: function(pos) {
		var start = this.fromLorelinePosition(pos);
		var end = this.fromLorelinePosition(pos.withOffset(this.content,pos.length));
		return { start : start, end : end};
	}
	,fromLorelinePosition: function(pos) {
		return { line : pos.line - 1, character : pos.column - 1};
	}
	,__class__: loreline_lsp_SymbolPrinter
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = "String";
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
LorelineServer.server = new loreline_lsp_Server();
LorelineServer.nextRequestId = 1;
loreline_TokenStackType.ChoiceBrace = 0;
loreline_TokenStackType.ChoiceIndent = 1;
loreline_TokenStackType.StateBrace = 2;
loreline_TokenStackType.StateIndent = 3;
loreline_TokenStackType.CharacterBrace = 4;
loreline_TokenStackType.CharacterIndent = 5;
loreline_TokenStackType.BeatBrace = 6;
loreline_TokenStackType.BeatIndent = 7;
loreline_TokenStackType.Brace = 8;
loreline_TokenStackType.Indent = 9;
loreline_TokenStackType.Bracket = 10;
loreline_Lexer.hasNonSpecialChar_specialChars = " \t\"+=*/-(){}[]:\n\r";
loreline_Lexer.KEYWORDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["import"] = loreline_TokenType.KwImport;
	_g.h["state"] = loreline_TokenType.KwState;
	_g.h["beat"] = loreline_TokenType.KwBeat;
	_g.h["character"] = loreline_TokenType.KwCharacter;
	_g.h["choice"] = loreline_TokenType.KwChoice;
	_g.h["if"] = loreline_TokenType.KwIf;
	_g.h["else"] = loreline_TokenType.KwElse;
	_g.h["new"] = loreline_TokenType.KwNew;
	_g.h["true"] = loreline_TokenType.LBoolean(true);
	_g.h["false"] = loreline_TokenType.LBoolean(false);
	_g.h["null"] = loreline_TokenType.LNull;
	_g.h["and"] = loreline_TokenType.OpAnd(true);
	_g.h["or"] = loreline_TokenType.OpOr(true);
	$r = _g;
	return $r;
}(this));
loreline_BlockStyle.Plain = 0;
loreline_BlockStyle.Braces = 1;
loreline_Parser.parse_parsing = false;
loreline_Quotes.Unquoted = 0;
loreline_Quotes.DoubleQuotes = 1;
LorelineServer.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=loreline-server.js.map